/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Storage } from '@ionic/storage';
import { JwtHelperService } from '@auth0/angular-jwt';
import { TokenApiService, User } from 'ng-common-library';
import { LoginConfigService } from './login-config.service';
import { Subject } from 'rxjs';
import { first } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@ionic/storage";
import * as i3 from "@auth0/angular-jwt/src/jwthelper.service";
import * as i4 from "./login-config.service";
import * as i5 from "ng-common-library";
export class LoginService {
    /**
     * @param {?} http
     * @param {?} storage
     * @param {?} jwtHelper
     * @param {?} loginConfigService
     * @param {?} tokenService
     */
    constructor(http, storage, jwtHelper, loginConfigService, tokenService) {
        this.http = http;
        this.storage = storage;
        this.jwtHelper = jwtHelper;
        this.loginConfigService = loginConfigService;
        this.tokenService = tokenService;
        this.currentUser = null;
        this.login$ = new Subject();
        this.hideLogin = true;
        this.JWT_USER_NAME = 'jwt_user';
        /*
          Check if a user is already stored
          This is for when child windows (ie. PSG)
          are being opened.
        */
        storage.get(this.JWT_USER_NAME)
            .then((user) => {
            this.setCurrentUser(user);
        });
    }
    /**
     * @return {?}
     */
    getCurrentUser() {
        return this.currentUser;
    }
    /**
     * @param {?} user
     * @return {?}
     */
    setCurrentUser(user) {
        this.currentUser = user;
    }
    /**
     * @return {?}
     */
    getLogoSrc() {
        return this.loginConfigService.getLogoSrc();
    }
    /**
     * @return {?}
     */
    getLoginApiUrl() {
        return this.loginConfigService.getLoginApiUrl();
    }
    /**
     * @return {?}
     */
    getLoginIpUrl() {
        return this.loginConfigService.getLoginIpUrl();
    }
    /**
     * @return {?}
     */
    getLoginUrl() {
        return this.loginConfigService.getLoginUrl();
    }
    /**
     * @return {?}
     */
    getLogoutUrl() {
        return this.loginConfigService.getLogoutUrl();
    }
    /**
     * @return {?}
     */
    getTitle() {
        return this.loginConfigService.getTitle();
    }
    /*
          Check if we already have a token and see if it is still valid.
          This is used to prevent the login screen from being presented
          to the user when they restart the app.
         */
    /**
     * @return {?}
     */
    checkLogin() {
        this.tokenService.token$.pipe(first()).subscribe((token) => {
            if (!token) {
                this.login$.next(null);
                this.clearLocalUser();
            }
            else {
                /** @type {?} */
                const decodedToken = this.jwtHelper.decodeToken(token);
                if (!decodedToken) {
                    console.log('Invalid token received from server!');
                    this.clearLocalUser();
                    this.login$.next(null);
                }
                else {
                    /** @type {?} */
                    const user = new User();
                    user.username = decodedToken['sub'];
                    user.firstname = decodedToken['firstname'];
                    user.lastname = decodedToken['lastname'];
                    user.roles = decodedToken['roles'];
                    user.appid = decodedToken['appid'];
                    /*
                      This is set for the PSG popup window (or other windows like it) so that they can
                      all have access to the current user. This only works if the popup windows
                      all come from the same originating address, so it is quite safe.
                     */
                    this.storage.set(this.JWT_USER_NAME, user)
                        .then(() => {
                        console.log('New user [' + this.getCurrentUser().username + '] added to storage.');
                    });
                    this.setCurrentUser(user);
                    this.login$.next(user);
                }
            }
        });
        this.tokenService.checkToken();
    }
    /**
     * @param {?} user
     * @return {?}
     */
    logIn(user) {
        user.appid = this.loginConfigService.getAppid();
        this.subAndCheckToken(user, true);
        this.tokenService.getToken(user);
    }
    /**
     * @private
     * @param {?} user
     * @param {?} sendNullResponse
     * @return {?}
     */
    subAndCheckToken(user, sendNullResponse) {
        this.tokenService.token$.pipe(first()).subscribe((token) => {
            if (!token) {
                // The server thinks the token is not valid (expired, the secret key changed, etc)
                console.log('Invalid token, not logged in.');
                this.clearLocalUser();
                if (sendNullResponse) {
                    this.login$.next(null);
                }
            }
            else {
                /** @type {?} */
                const decodedToken = this.jwtHelper.decodeToken(token);
                if (!decodedToken) {
                    console.log('Invalid token received from server!');
                    this.setCurrentUser(null);
                    if (sendNullResponse) {
                        this.login$.next(null);
                    }
                }
                else if (decodedToken['sub'] !== user.username) {
                    console.log('Invalid username in token received from server!');
                    this.setCurrentUser(null);
                    if (sendNullResponse) {
                        this.login$.next(null);
                    }
                }
                else {
                    user.firstname = decodedToken['firstname'];
                    user.lastname = decodedToken['lastname'];
                    user.roles = decodedToken['roles'];
                    /*
                      This is set for the PSG popup window (or other windows like it) so that they can
                      all have access to the current user. This only works if the popup windows
                      all come from the same originating address, so it is quite safe.
                     */
                    this.storage.set(this.JWT_USER_NAME, user)
                        .then(() => {
                        console.log('New user [' + this.getCurrentUser().username + '] added to storage.');
                    });
                    this.setCurrentUser(user);
                    this.login$.next(user);
                }
            }
        });
    }
    /**
     * Log the user out and return them to the login screen.
     * @return {?}
     */
    logOut() {
        if (this.getCurrentUser() && this.getCurrentUser().username) {
            this.http.post(this.loginConfigService.getLogoutUrl(), this.getCurrentUser()).pipe(first()).subscribe(() => {
                console.log('Logged out');
            });
        }
        this.clearLocalUser();
    }
    /**
     * @private
     * @return {?}
     */
    clearLocalUser() {
        /** @type {?} */
        let username = null;
        if (this.getCurrentUser() && this.getCurrentUser().username) {
            username = this.getCurrentUser().username;
        }
        this.setCurrentUser(null);
        this.hideLogin = false;
        this.tokenService.clearToken();
        this.storage.remove(this.JWT_USER_NAME)
            .then(() => {
            if (username) {
                console.log('User [' + username + '] removed from storage');
            }
            else {
                console.log('User removed from storage');
            }
        });
    }
}
LoginService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LoginService.ctorParameters = () => [
    { type: HttpClient },
    { type: Storage },
    { type: JwtHelperService },
    { type: LoginConfigService },
    { type: TokenApiService }
];
/** @nocollapse */ LoginService.ngInjectableDef = i0.defineInjectable({ factory: function LoginService_Factory() { return new LoginService(i0.inject(i1.HttpClient), i0.inject(i2.Storage), i0.inject(i3.JwtHelperService), i0.inject(i4.LoginConfigService), i0.inject(i5.TokenApiService)); }, token: LoginService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.currentUser;
    /** @type {?} */
    LoginService.prototype.login$;
    /** @type {?} */
    LoginService.prototype.hideLogin;
    /** @type {?} */
    LoginService.prototype.JWT_USER_NAME;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.storage;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.jwtHelper;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.loginConfigService;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.tokenService;
}
//# sourceMappingURL=data:application/json;base64,