/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { LoginService } from './login.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./login.service";
export class LoginIpService {
    /**
     * @param {?} http
     * @param {?} loginService
     */
    constructor(http, loginService) {
        this.http = http;
        this.loginService = loginService;
        this.loginIp$ = new Subject();
        this.loginInfo = null;
    }
    /**
     * @return {?}
     */
    getLoginIp() {
        this.http.get(this.loginService.getLoginIpUrl()).subscribe((loginIp) => {
            console.log('Got login ip: ' + loginIp);
            this.loginInfo = loginIp;
            this.loginIp$.next(loginIp);
        }, (e) => {
            console.log('Could not get login ip: ' + e);
            this.loginInfo = null;
            this.loginIp$.next(null);
        });
    }
}
LoginIpService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LoginIpService.ctorParameters = () => [
    { type: HttpClient },
    { type: LoginService }
];
/** @nocollapse */ LoginIpService.ngInjectableDef = i0.defineInjectable({ factory: function LoginIpService_Factory() { return new LoginIpService(i0.inject(i1.HttpClient), i0.inject(i2.LoginService)); }, token: LoginIpService, providedIn: "root" });
if (false) {
    /** @type {?} */
    LoginIpService.prototype.loginIp$;
    /** @type {?} */
    LoginIpService.prototype.loginInfo;
    /**
     * @type {?}
     * @private
     */
    LoginIpService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LoginIpService.prototype.loginService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4taXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxvZ2luLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbG9naW4taXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRWhELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7Ozs7QUFLN0IsTUFBTSxPQUFPLGNBQWM7Ozs7O0lBSXZCLFlBQW9CLElBQWdCLEVBQVUsWUFBMEI7UUFBcEQsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBRmpFLGFBQVEsR0FBcUIsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQUNwRCxjQUFTLEdBQVksSUFBSSxDQUFDO0lBRWpDLENBQUM7Ozs7SUFFTSxVQUFVO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVUsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQWdCLEVBQUUsRUFBRTtZQUNyRixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7OztZQXBCSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFSTyxVQUFVO1lBR1YsWUFBWTs7Ozs7SUFRaEIsa0NBQTJEOztJQUMzRCxtQ0FBaUM7Ozs7O0lBQ3JCLDhCQUF3Qjs7Ozs7SUFBRSxzQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7TG9naW5JcH0gZnJvbSAnLi4vbW9kZWwvTG9naW5JcCc7XG5pbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtMb2dpblNlcnZpY2V9IGZyb20gJy4vbG9naW4uc2VydmljZSc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIExvZ2luSXBTZXJ2aWNlIHtcblxuICAgIHB1YmxpYyBsb2dpbklwJDogU3ViamVjdDxMb2dpbklwPiA9IG5ldyBTdWJqZWN0PExvZ2luSXA+KCk7XG4gICAgcHVibGljIGxvZ2luSW5mbzogTG9naW5JcCA9IG51bGw7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBwcml2YXRlIGxvZ2luU2VydmljZTogTG9naW5TZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgcHVibGljIGdldExvZ2luSXAoKSB7XG4gICAgICAgIHRoaXMuaHR0cC5nZXQ8TG9naW5JcD4odGhpcy5sb2dpblNlcnZpY2UuZ2V0TG9naW5JcFVybCgpKS5zdWJzY3JpYmUoKGxvZ2luSXA6IExvZ2luSXApID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHb3QgbG9naW4gaXA6ICcgKyBsb2dpbklwKTtcbiAgICAgICAgICAgIHRoaXMubG9naW5JbmZvID0gbG9naW5JcDtcbiAgICAgICAgICAgIHRoaXMubG9naW5JcCQubmV4dChsb2dpbklwKTtcbiAgICAgICAgfSwgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb3VsZCBub3QgZ2V0IGxvZ2luIGlwOiAnICsgZSk7XG4gICAgICAgICAgICB0aGlzLmxvZ2luSW5mbyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmxvZ2luSXAkLm5leHQobnVsbCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==