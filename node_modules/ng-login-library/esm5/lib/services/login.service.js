/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Storage } from '@ionic/storage';
import { JwtHelperService } from '@auth0/angular-jwt';
import { TokenApiService, User } from 'ng-common-library';
import { LoginConfigService } from './login-config.service';
import { Subject } from 'rxjs';
import { first } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@ionic/storage";
import * as i3 from "@auth0/angular-jwt/src/jwthelper.service";
import * as i4 from "./login-config.service";
import * as i5 from "ng-common-library";
var LoginService = /** @class */ (function () {
    function LoginService(http, storage, jwtHelper, loginConfigService, tokenService) {
        var _this = this;
        this.http = http;
        this.storage = storage;
        this.jwtHelper = jwtHelper;
        this.loginConfigService = loginConfigService;
        this.tokenService = tokenService;
        this.currentUser = null;
        this.login$ = new Subject();
        this.hideLogin = true;
        this.JWT_USER_NAME = 'jwt_user';
        /*
          Check if a user is already stored
          This is for when child windows (ie. PSG)
          are being opened.
        */
        storage.get(this.JWT_USER_NAME)
            .then(function (user) {
            _this.setCurrentUser(user);
        });
    }
    /**
     * @return {?}
     */
    LoginService.prototype.getCurrentUser = /**
     * @return {?}
     */
    function () {
        return this.currentUser;
    };
    /**
     * @param {?} user
     * @return {?}
     */
    LoginService.prototype.setCurrentUser = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        this.currentUser = user;
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getLogoSrc = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getLogoSrc();
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getLoginApiUrl = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getLoginApiUrl();
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getLoginIpUrl = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getLoginIpUrl();
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getLoginUrl = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getLoginUrl();
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getLogoutUrl = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getLogoutUrl();
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getTitle = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getTitle();
    };
    /*
      Check if we already have a token and see if it is still valid.
      This is used to prevent the login screen from being presented
      to the user when they restart the app.
     */
    /*
          Check if we already have a token and see if it is still valid.
          This is used to prevent the login screen from being presented
          to the user when they restart the app.
         */
    /**
     * @return {?}
     */
    LoginService.prototype.checkLogin = /*
          Check if we already have a token and see if it is still valid.
          This is used to prevent the login screen from being presented
          to the user when they restart the app.
         */
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.tokenService.token$.pipe(first()).subscribe(function (token) {
            if (!token) {
                _this.login$.next(null);
                _this.clearLocalUser();
            }
            else {
                /** @type {?} */
                var decodedToken = _this.jwtHelper.decodeToken(token);
                if (!decodedToken) {
                    console.log('Invalid token received from server!');
                    _this.clearLocalUser();
                    _this.login$.next(null);
                }
                else {
                    /** @type {?} */
                    var user = new User();
                    user.username = decodedToken['sub'];
                    user.firstname = decodedToken['firstname'];
                    user.lastname = decodedToken['lastname'];
                    user.roles = decodedToken['roles'];
                    user.appid = decodedToken['appid'];
                    /*
                      This is set for the PSG popup window (or other windows like it) so that they can
                      all have access to the current user. This only works if the popup windows
                      all come from the same originating address, so it is quite safe.
                     */
                    _this.storage.set(_this.JWT_USER_NAME, user)
                        .then(function () {
                        console.log('New user [' + _this.getCurrentUser().username + '] added to storage.');
                    });
                    _this.setCurrentUser(user);
                    _this.login$.next(user);
                }
            }
        });
        this.tokenService.checkToken();
    };
    /**
     * @param {?} user
     * @return {?}
     */
    LoginService.prototype.logIn = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        user.appid = this.loginConfigService.getAppid();
        this.subAndCheckToken(user, true);
        this.tokenService.getToken(user);
    };
    /**
     * @private
     * @param {?} user
     * @param {?} sendNullResponse
     * @return {?}
     */
    LoginService.prototype.subAndCheckToken = /**
     * @private
     * @param {?} user
     * @param {?} sendNullResponse
     * @return {?}
     */
    function (user, sendNullResponse) {
        var _this = this;
        this.tokenService.token$.pipe(first()).subscribe(function (token) {
            if (!token) {
                // The server thinks the token is not valid (expired, the secret key changed, etc)
                console.log('Invalid token, not logged in.');
                _this.clearLocalUser();
                if (sendNullResponse) {
                    _this.login$.next(null);
                }
            }
            else {
                /** @type {?} */
                var decodedToken = _this.jwtHelper.decodeToken(token);
                if (!decodedToken) {
                    console.log('Invalid token received from server!');
                    _this.setCurrentUser(null);
                    if (sendNullResponse) {
                        _this.login$.next(null);
                    }
                }
                else if (decodedToken['sub'] !== user.username) {
                    console.log('Invalid username in token received from server!');
                    _this.setCurrentUser(null);
                    if (sendNullResponse) {
                        _this.login$.next(null);
                    }
                }
                else {
                    user.firstname = decodedToken['firstname'];
                    user.lastname = decodedToken['lastname'];
                    user.roles = decodedToken['roles'];
                    /*
                      This is set for the PSG popup window (or other windows like it) so that they can
                      all have access to the current user. This only works if the popup windows
                      all come from the same originating address, so it is quite safe.
                     */
                    _this.storage.set(_this.JWT_USER_NAME, user)
                        .then(function () {
                        console.log('New user [' + _this.getCurrentUser().username + '] added to storage.');
                    });
                    _this.setCurrentUser(user);
                    _this.login$.next(user);
                }
            }
        });
    };
    /** Log the user out and return them to the login screen. */
    /**
     * Log the user out and return them to the login screen.
     * @return {?}
     */
    LoginService.prototype.logOut = /**
     * Log the user out and return them to the login screen.
     * @return {?}
     */
    function () {
        if (this.getCurrentUser() && this.getCurrentUser().username) {
            this.http.post(this.loginConfigService.getLogoutUrl(), this.getCurrentUser()).pipe(first()).subscribe(function () {
                console.log('Logged out');
            });
        }
        this.clearLocalUser();
    };
    /**
     * @private
     * @return {?}
     */
    LoginService.prototype.clearLocalUser = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var username = null;
        if (this.getCurrentUser() && this.getCurrentUser().username) {
            username = this.getCurrentUser().username;
        }
        this.setCurrentUser(null);
        this.hideLogin = false;
        this.tokenService.clearToken();
        this.storage.remove(this.JWT_USER_NAME)
            .then(function () {
            if (username) {
                console.log('User [' + username + '] removed from storage');
            }
            else {
                console.log('User removed from storage');
            }
        });
    };
    LoginService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LoginService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Storage },
        { type: JwtHelperService },
        { type: LoginConfigService },
        { type: TokenApiService }
    ]; };
    /** @nocollapse */ LoginService.ngInjectableDef = i0.defineInjectable({ factory: function LoginService_Factory() { return new LoginService(i0.inject(i1.HttpClient), i0.inject(i2.Storage), i0.inject(i3.JwtHelperService), i0.inject(i4.LoginConfigService), i0.inject(i5.TokenApiService)); }, token: LoginService, providedIn: "root" });
    return LoginService;
}());
export { LoginService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.currentUser;
    /** @type {?} */
    LoginService.prototype.login$;
    /** @type {?} */
    LoginService.prototype.hideLogin;
    /** @type {?} */
    LoginService.prototype.JWT_USER_NAME;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.storage;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.jwtHelper;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.loginConfigService;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.tokenService;
}
//# sourceMappingURL=data:application/json;base64,