/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { LoginService } from './login.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./login.service";
var LoginIpService = /** @class */ (function () {
    function LoginIpService(http, loginService) {
        this.http = http;
        this.loginService = loginService;
        this.loginIp$ = new Subject();
        this.loginInfo = null;
    }
    /**
     * @return {?}
     */
    LoginIpService.prototype.getLoginIp = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.http.get(this.loginService.getLoginIpUrl()).subscribe(function (loginIp) {
            console.log('Got login ip: ' + loginIp);
            _this.loginInfo = loginIp;
            _this.loginIp$.next(loginIp);
        }, function (e) {
            console.log('Could not get login ip: ' + e);
            _this.loginInfo = null;
            _this.loginIp$.next(null);
        });
    };
    LoginIpService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LoginIpService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: LoginService }
    ]; };
    /** @nocollapse */ LoginIpService.ngInjectableDef = i0.defineInjectable({ factory: function LoginIpService_Factory() { return new LoginIpService(i0.inject(i1.HttpClient), i0.inject(i2.LoginService)); }, token: LoginIpService, providedIn: "root" });
    return LoginIpService;
}());
export { LoginIpService };
if (false) {
    /** @type {?} */
    LoginIpService.prototype.loginIp$;
    /** @type {?} */
    LoginIpService.prototype.loginInfo;
    /**
     * @type {?}
     * @private
     */
    LoginIpService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LoginIpService.prototype.loginService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4taXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxvZ2luLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbG9naW4taXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRWhELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7Ozs7QUFFN0I7SUFPSSx3QkFBb0IsSUFBZ0IsRUFBVSxZQUEwQjtRQUFwRCxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQWM7UUFGakUsYUFBUSxHQUFxQixJQUFJLE9BQU8sRUFBVyxDQUFDO1FBQ3BELGNBQVMsR0FBWSxJQUFJLENBQUM7SUFFakMsQ0FBQzs7OztJQUVNLG1DQUFVOzs7SUFBakI7UUFBQSxpQkFVQztRQVRHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFVLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxPQUFnQjtZQUNqRixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxDQUFDO1lBQ3hDLEtBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO1lBQ3pCLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hDLENBQUMsRUFBRSxVQUFDLENBQUM7WUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzVDLEtBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Z0JBcEJKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBUk8sVUFBVTtnQkFHVixZQUFZOzs7eUJBSHBCO0NBMkJDLEFBckJELElBcUJDO1NBbEJZLGNBQWM7OztJQUV2QixrQ0FBMkQ7O0lBQzNELG1DQUFpQzs7Ozs7SUFDckIsOEJBQXdCOzs7OztJQUFFLHNDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtMb2dpbklwfSBmcm9tICcuLi9tb2RlbC9Mb2dpbklwJztcbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0xvZ2luU2VydmljZX0gZnJvbSAnLi9sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTG9naW5JcFNlcnZpY2Uge1xuXG4gICAgcHVibGljIGxvZ2luSXAkOiBTdWJqZWN0PExvZ2luSXA+ID0gbmV3IFN1YmplY3Q8TG9naW5JcD4oKTtcbiAgICBwdWJsaWMgbG9naW5JbmZvOiBMb2dpbklwID0gbnVsbDtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TG9naW5JcCgpIHtcbiAgICAgICAgdGhpcy5odHRwLmdldDxMb2dpbklwPih0aGlzLmxvZ2luU2VydmljZS5nZXRMb2dpbklwVXJsKCkpLnN1YnNjcmliZSgobG9naW5JcDogTG9naW5JcCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0dvdCBsb2dpbiBpcDogJyArIGxvZ2luSXApO1xuICAgICAgICAgICAgdGhpcy5sb2dpbkluZm8gPSBsb2dpbklwO1xuICAgICAgICAgICAgdGhpcy5sb2dpbklwJC5uZXh0KGxvZ2luSXApO1xuICAgICAgICB9LCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvdWxkIG5vdCBnZXQgbG9naW4gaXA6ICcgKyBlKTtcbiAgICAgICAgICAgIHRoaXMubG9naW5JbmZvID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubG9naW5JcCQubmV4dChudWxsKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19