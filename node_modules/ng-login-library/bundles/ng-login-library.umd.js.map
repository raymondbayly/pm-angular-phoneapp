{"version":3,"file":"ng-login-library.umd.js.map","sources":["ng://ng-login-library/lib/services/login-config.service.ts","ng://ng-login-library/lib/services/login.service.ts","ng://ng-login-library/lib/services/login-ip.service.ts","ng://ng-login-library/lib/model/LoginIp.ts","ng://ng-login-library/lib/login.component.ts","ng://ng-login-library/lib/login.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginConfigService {\n\n  private title: string;\n  private loginUrl: string;\n  private loginApiUrl: string;\n  private loginIpUrl: string;\n  private logoutUrl: string;\n  private logoSrc: string;\n  private appid: string;\n\n  public getAppid(): string {\n    return this.appid;\n  }\n\n  public setAppid(value: string): void {\n    this.appid = value;\n  }\n\n  public getTitle(): string {\n    return this.title;\n  }\n\n  public setTitle(value: string): void {\n    this.title = value;\n  }\n\n  public getLoginUrl(): string {\n    return this.loginUrl;\n  }\n\n  public setLoginUrl(value: string): void {\n    this.loginUrl = value;\n  }\n\n  public getLoginApiUrl(): string {\n    return this.loginApiUrl;\n  }\n\n  public setLoginApiUrl(value: string): void {\n    this.loginApiUrl = value;\n  }\n\n  public getLoginIpUrl(): string {\n    return this.loginIpUrl;\n  }\n\n  public setLoginIpUrl(value: string): void {\n    this.loginIpUrl = value;\n  }\n\n  public getLogoutUrl(): string {\n    return this.logoutUrl;\n  }\n\n  public setLogoutUrl(value: string): void {\n    this.logoutUrl = value;\n  }\n\n  public getLogoSrc(): string {\n    return this.logoSrc;\n  }\n\n  public setLogoSrc(value: string): void {\n    this.logoSrc = value;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Storage} from '@ionic/storage';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {TokenApiService, User} from 'ng-common-library';\nimport {LoginConfigService} from './login-config.service';\nimport {Subject} from 'rxjs';\nimport {first} from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LoginService {\n\n    private currentUser: User = null;\n\n    public login$: Subject<User> = new Subject<User>();\n\n    public hideLogin = true;\n\n    public readonly JWT_USER_NAME = 'jwt_user';\n\n    constructor(\n        private http: HttpClient,\n        private storage: Storage,\n        private jwtHelper: JwtHelperService,\n        private loginConfigService: LoginConfigService,\n        private tokenService: TokenApiService) {\n\n        /*\n          Check if a user is already stored\n          This is for when child windows (ie. PSG)\n          are being opened.\n        */\n        storage.get(this.JWT_USER_NAME)\n            .then((user: User) => {\n                this.setCurrentUser(user);\n            });\n    }\n\n    public getCurrentUser(): User {\n        return this.currentUser;\n    }\n\n    public setCurrentUser(user: User): void {\n        this.currentUser = user;\n    }\n\n    public getLogoSrc(): string {\n        return this.loginConfigService.getLogoSrc();\n    }\n\n    public getLoginApiUrl(): string {\n        return this.loginConfigService.getLoginApiUrl();\n    }\n\n    public getLoginIpUrl(): string {\n        return this.loginConfigService.getLoginIpUrl();\n    }\n\n    public getLoginUrl(): string {\n        return this.loginConfigService.getLoginUrl();\n    }\n\n    public getLogoutUrl(): string {\n        return this.loginConfigService.getLogoutUrl();\n    }\n\n    public getTitle(): string {\n        return this.loginConfigService.getTitle();\n    }\n\n    /*\n      Check if we already have a token and see if it is still valid.\n      This is used to prevent the login screen from being presented\n      to the user when they restart the app.\n     */\n    public checkLogin() {\n        this.tokenService.token$.pipe(first()).subscribe((token: string) => {\n            if (!token) {\n                this.login$.next(null);\n                this.clearLocalUser();\n            } else {\n                const decodedToken = this.jwtHelper.decodeToken(token);\n                if (!decodedToken) {\n                    console.log('Invalid token received from server!');\n                    this.clearLocalUser();\n                    this.login$.next(null);\n                } else {\n                    const user = new User();\n                    user.username = decodedToken['sub'];\n                    user.firstname = decodedToken['firstname'];\n                    user.lastname = decodedToken['lastname'];\n                    user.roles = decodedToken['roles'];\n                    user.appid = decodedToken['appid'];\n                    /*\n                      This is set for the PSG popup window (or other windows like it) so that they can\n                      all have access to the current user. This only works if the popup windows\n                      all come from the same originating address, so it is quite safe.\n                     */\n                    this.storage.set(this.JWT_USER_NAME, user)\n                        .then(() => {\n                                console.log('New user [' + this.getCurrentUser().username + '] added to storage.');\n                            }\n                        );\n                    this.setCurrentUser(user);\n                    this.login$.next(user);\n                }\n            }\n        });\n        this.tokenService.checkToken();\n    }\n\n    public logIn(user: User) {\n        user.appid = this.loginConfigService.getAppid();\n        this.subAndCheckToken(user, true);\n        this.tokenService.getToken(user);\n    }\n\n    private subAndCheckToken(user: User, sendNullResponse: boolean) {\n        this.tokenService.token$.pipe(first()).subscribe((token: string) => {\n            if (!token) {\n                // The server thinks the token is not valid (expired, the secret key changed, etc)\n                console.log('Invalid token, not logged in.');\n                this.clearLocalUser();\n                if (sendNullResponse) {\n                    this.login$.next(null);\n                }\n            } else {\n                const decodedToken = this.jwtHelper.decodeToken(token);\n                if (!decodedToken) {\n                    console.log('Invalid token received from server!');\n                    this.setCurrentUser(null);\n                    if (sendNullResponse) {\n                        this.login$.next(null);\n                    }\n                } else if (decodedToken['sub'] !== user.username) {\n                    console.log('Invalid username in token received from server!');\n                    this.setCurrentUser(null);\n                    if (sendNullResponse) {\n                        this.login$.next(null);\n                    }\n                } else {\n                    user.firstname = decodedToken['firstname'];\n                    user.lastname = decodedToken['lastname'];\n                    user.roles = decodedToken['roles'];\n                    /*\n                      This is set for the PSG popup window (or other windows like it) so that they can\n                      all have access to the current user. This only works if the popup windows\n                      all come from the same originating address, so it is quite safe.\n                     */\n                    this.storage.set(this.JWT_USER_NAME, user)\n                        .then(() => {\n                                console.log('New user [' + this.getCurrentUser().username + '] added to storage.');\n                            }\n                        );\n                    this.setCurrentUser(user);\n                    this.login$.next(user);\n                }\n            }\n        });\n    }\n\n    /** Log the user out and return them to the login screen. */\n    public logOut() {\n        if (this.getCurrentUser() && this.getCurrentUser().username) {\n            this.http.post(this.loginConfigService.getLogoutUrl(), this.getCurrentUser()).pipe(first()).subscribe(() => {\n                console.log('Logged out');\n            });\n        }\n        this.clearLocalUser();\n    }\n\n    private clearLocalUser() {\n        let username = null;\n        if (this.getCurrentUser() && this.getCurrentUser().username) {\n            username = this.getCurrentUser().username;\n        }\n        this.setCurrentUser(null);\n        this.hideLogin = false;\n        this.tokenService.clearToken();\n        this.storage.remove(this.JWT_USER_NAME)\n            .then(() => {\n                if (username) {\n                    console.log('User [' + username + '] removed from storage');\n                } else {\n                    console.log('User removed from storage');\n                }\n            });\n    }\n}\n","import {HttpClient} from '@angular/common/http';\nimport {LoginIp} from '../model/LoginIp';\nimport {Injectable} from '@angular/core';\nimport {LoginService} from './login.service';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LoginIpService {\n\n    public loginIp$: Subject<LoginIp> = new Subject<LoginIp>();\n    public loginInfo: LoginIp = null;\n    constructor(private http: HttpClient, private loginService: LoginService) {\n    }\n\n    public getLoginIp() {\n        this.http.get<LoginIp>(this.loginService.getLoginIpUrl()).subscribe((loginIp: LoginIp) => {\n            console.log('Got login ip: ' + loginIp);\n            this.loginInfo = loginIp;\n            this.loginIp$.next(loginIp);\n        }, (e) => {\n            console.log('Could not get login ip: ' + e);\n            this.loginInfo = null;\n            this.loginIp$.next(null);\n        });\n    }\n}\n","export class LoginIp {\n  // Seed with defaults for maximum protection\n  uniqueDeviceIdentifier = '--';\n  copyRightInfo = 'Â© 2018 - PeraHealth, Inc.';\n  versionInfo = '--';\n  patentInfo = '| <strong>US Patent Nos.</strong> 8,092,380; 8,100,829; 8,355,925; 8,403,847 and 8,454,506; | <strong>Canadian Patent No.</strong> 2,599,387 and other Canadian and foreign patents pending.';\n}\n","import {AfterViewInit, Component, OnInit, ViewChildren, ViewEncapsulation} from '@angular/core';\n\nimport {LoginService} from './services/login.service';\nimport {LoginIp} from './model/LoginIp';\nimport {LoginIpService} from './services/login-ip.service';\nimport {User} from 'ng-common-library';\nimport {first} from 'rxjs/operators';\n\n@Component({\n  selector: 'phlib-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class LoginComponent implements OnInit, AfterViewInit {\n\n  @ViewChildren('input') vc;\n\n  private readonly NO_DICE = 'Error:  Username or password is incorrect';\n\n  loginInfo: LoginIp = new LoginIp();\n  errorMessage: string;\n  logoSrc: string;\n  title: string;\n  public userPassword: string;\n\n  constructor(public loginService: LoginService,\n              public loginLibraryIpService: LoginIpService) {\n  }\n\n  public getUser() {\n    if (!this.loginService.getCurrentUser()) {\n      this.loginService.setCurrentUser(new User());\n    }\n    return this.loginService.getCurrentUser();\n  }\n\n  ngOnInit() {\n    this.logoSrc = this.loginService.getLogoSrc();\n\n    this.loginLibraryIpService.loginIp$.pipe(first()).subscribe((loginIp: LoginIp) => {\n      if (loginIp) {\n        this.loginInfo = loginIp;\n      } else {\n        console.log('Could not get Login Information from server, using defaults.');\n      }\n    });\n    this.loginLibraryIpService.getLoginIp();\n    localStorage.removeItem('currentUser');\n    this.loginService.setCurrentUser(new User());\n    this.errorMessage = null;\n  }\n\n  login() {\n    // Retrieve a reference to the current user from the loginService\n    const user: User = this.getUser();\n    if (user.username && this.userPassword) {\n      // Base64 encode the password\n      user.password = btoa(this.userPassword);\n      this.loginService.login$.pipe(first()).subscribe((usr: User) => {\n        if (!usr) {\n          /*\n             Any error = this message. This is a security best practice as you\n             do not want to give the user any information that they can use to\n             get into the system.\n             Wipe out the encoded password\n           */\n          user.password = null;\n          this.userPassword = null;\n          this.errorMessage = this.NO_DICE;\n          this.loginErrored();\n        } else {\n          // Wipe out the encoded password\n          user.password = null;\n          this.errorMessage = null;\n          this.userPassword = null;\n        }\n      });\n      this.loginService.logIn(user);\n    } else {\n      this.errorMessage = this.NO_DICE;\n      this.loginErrored();\n    }\n  }\n\n  loginErrored() {\n    this.setFocusToUsernameField();\n  }\n\n  ngAfterViewInit(): void {\n    this.setFocusToUsernameField();\n  }\n\n  public setFocusToUsernameField() {\n    if (this.vc && this.vc.first && this.vc.first.nativeElement) {\n      this.vc.first.nativeElement.focus();\n    }\n  }\n}\n","import {LoginComponent} from './login.component';\nimport {LoginService} from './services/login.service';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {FormsModule} from '@angular/forms';\nimport {LoginConfigService} from './services/login-config.service';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {LoginIpService} from './services/login-ip.service';\nimport {HttpClientModule} from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [LoginComponent],\n  exports: [LoginComponent]\n})\nexport class LoginModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: LoginModule,\n      providers: [\n        HttpClientModule,\n        LoginService,\n        LoginIpService,\n        LoginConfigService\n      ]\n    };\n  }\n}\n"],"names":["Injectable","Subject","first","User","HttpClient","Storage","JwtHelperService","TokenApiService","Component","ViewEncapsulation","ViewChildren","HttpClientModule","NgModule","BrowserModule","FormsModule"],"mappings":"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"}
