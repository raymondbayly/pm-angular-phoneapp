import { Storage } from '@ionic/storage';
import { JwtHelperService } from '@auth0/angular-jwt';
import { JwtHelperService as JwtHelperService$1 } from '@auth0/angular-jwt/src/jwthelper.service';
import { Subject } from 'rxjs';
import { TokenApiService, User } from 'ng-common-library';
import { first } from 'rxjs/operators';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { Injectable, Component, ViewChildren, ViewEncapsulation, defineInjectable, inject, NgModule } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoginConfigService = /** @class */ (function () {
    function LoginConfigService() {
    }
    /**
     * @return {?}
     */
    LoginConfigService.prototype.getAppid = /**
     * @return {?}
     */
    function () {
        return this.appid;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    LoginConfigService.prototype.setAppid = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.appid = value;
    };
    /**
     * @return {?}
     */
    LoginConfigService.prototype.getTitle = /**
     * @return {?}
     */
    function () {
        return this.title;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    LoginConfigService.prototype.setTitle = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.title = value;
    };
    /**
     * @return {?}
     */
    LoginConfigService.prototype.getLoginUrl = /**
     * @return {?}
     */
    function () {
        return this.loginUrl;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    LoginConfigService.prototype.setLoginUrl = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.loginUrl = value;
    };
    /**
     * @return {?}
     */
    LoginConfigService.prototype.getLoginApiUrl = /**
     * @return {?}
     */
    function () {
        return this.loginApiUrl;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    LoginConfigService.prototype.setLoginApiUrl = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.loginApiUrl = value;
    };
    /**
     * @return {?}
     */
    LoginConfigService.prototype.getLoginIpUrl = /**
     * @return {?}
     */
    function () {
        return this.loginIpUrl;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    LoginConfigService.prototype.setLoginIpUrl = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.loginIpUrl = value;
    };
    /**
     * @return {?}
     */
    LoginConfigService.prototype.getLogoutUrl = /**
     * @return {?}
     */
    function () {
        return this.logoutUrl;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    LoginConfigService.prototype.setLogoutUrl = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.logoutUrl = value;
    };
    /**
     * @return {?}
     */
    LoginConfigService.prototype.getLogoSrc = /**
     * @return {?}
     */
    function () {
        return this.logoSrc;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    LoginConfigService.prototype.setLogoSrc = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.logoSrc = value;
    };
    LoginConfigService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ LoginConfigService.ngInjectableDef = defineInjectable({ factory: function LoginConfigService_Factory() { return new LoginConfigService(); }, token: LoginConfigService, providedIn: "root" });
    return LoginConfigService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoginService = /** @class */ (function () {
    function LoginService(http, storage, jwtHelper, loginConfigService, tokenService) {
        var _this = this;
        this.http = http;
        this.storage = storage;
        this.jwtHelper = jwtHelper;
        this.loginConfigService = loginConfigService;
        this.tokenService = tokenService;
        this.currentUser = null;
        this.login$ = new Subject();
        this.hideLogin = true;
        this.JWT_USER_NAME = 'jwt_user';
        /*
          Check if a user is already stored
          This is for when child windows (ie. PSG)
          are being opened.
        */
        storage.get(this.JWT_USER_NAME)
            .then(function (user) {
            _this.setCurrentUser(user);
        });
    }
    /**
     * @return {?}
     */
    LoginService.prototype.getCurrentUser = /**
     * @return {?}
     */
    function () {
        return this.currentUser;
    };
    /**
     * @param {?} user
     * @return {?}
     */
    LoginService.prototype.setCurrentUser = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        this.currentUser = user;
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getLogoSrc = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getLogoSrc();
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getLoginApiUrl = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getLoginApiUrl();
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getLoginIpUrl = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getLoginIpUrl();
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getLoginUrl = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getLoginUrl();
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getLogoutUrl = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getLogoutUrl();
    };
    /**
     * @return {?}
     */
    LoginService.prototype.getTitle = /**
     * @return {?}
     */
    function () {
        return this.loginConfigService.getTitle();
    };
    /*
      Check if we already have a token and see if it is still valid.
      This is used to prevent the login screen from being presented
      to the user when they restart the app.
     */
    /*
          Check if we already have a token and see if it is still valid.
          This is used to prevent the login screen from being presented
          to the user when they restart the app.
         */
    /**
     * @return {?}
     */
    LoginService.prototype.checkLogin = /*
          Check if we already have a token and see if it is still valid.
          This is used to prevent the login screen from being presented
          to the user when they restart the app.
         */
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.tokenService.token$.pipe(first()).subscribe(function (token) {
            if (!token) {
                _this.login$.next(null);
                _this.clearLocalUser();
            }
            else {
                /** @type {?} */
                var decodedToken = _this.jwtHelper.decodeToken(token);
                if (!decodedToken) {
                    console.log('Invalid token received from server!');
                    _this.clearLocalUser();
                    _this.login$.next(null);
                }
                else {
                    /** @type {?} */
                    var user = new User();
                    user.username = decodedToken['sub'];
                    user.firstname = decodedToken['firstname'];
                    user.lastname = decodedToken['lastname'];
                    user.roles = decodedToken['roles'];
                    user.appid = decodedToken['appid'];
                    /*
                      This is set for the PSG popup window (or other windows like it) so that they can
                      all have access to the current user. This only works if the popup windows
                      all come from the same originating address, so it is quite safe.
                     */
                    _this.storage.set(_this.JWT_USER_NAME, user)
                        .then(function () {
                        console.log('New user [' + _this.getCurrentUser().username + '] added to storage.');
                    });
                    _this.setCurrentUser(user);
                    _this.login$.next(user);
                }
            }
        });
        this.tokenService.checkToken();
    };
    /**
     * @param {?} user
     * @return {?}
     */
    LoginService.prototype.logIn = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        user.appid = this.loginConfigService.getAppid();
        this.subAndCheckToken(user, true);
        this.tokenService.getToken(user);
    };
    /**
     * @private
     * @param {?} user
     * @param {?} sendNullResponse
     * @return {?}
     */
    LoginService.prototype.subAndCheckToken = /**
     * @private
     * @param {?} user
     * @param {?} sendNullResponse
     * @return {?}
     */
    function (user, sendNullResponse) {
        var _this = this;
        this.tokenService.token$.pipe(first()).subscribe(function (token) {
            if (!token) {
                // The server thinks the token is not valid (expired, the secret key changed, etc)
                console.log('Invalid token, not logged in.');
                _this.clearLocalUser();
                if (sendNullResponse) {
                    _this.login$.next(null);
                }
            }
            else {
                /** @type {?} */
                var decodedToken = _this.jwtHelper.decodeToken(token);
                if (!decodedToken) {
                    console.log('Invalid token received from server!');
                    _this.setCurrentUser(null);
                    if (sendNullResponse) {
                        _this.login$.next(null);
                    }
                }
                else if (decodedToken['sub'] !== user.username) {
                    console.log('Invalid username in token received from server!');
                    _this.setCurrentUser(null);
                    if (sendNullResponse) {
                        _this.login$.next(null);
                    }
                }
                else {
                    user.firstname = decodedToken['firstname'];
                    user.lastname = decodedToken['lastname'];
                    user.roles = decodedToken['roles'];
                    /*
                      This is set for the PSG popup window (or other windows like it) so that they can
                      all have access to the current user. This only works if the popup windows
                      all come from the same originating address, so it is quite safe.
                     */
                    _this.storage.set(_this.JWT_USER_NAME, user)
                        .then(function () {
                        console.log('New user [' + _this.getCurrentUser().username + '] added to storage.');
                    });
                    _this.setCurrentUser(user);
                    _this.login$.next(user);
                }
            }
        });
    };
    /** Log the user out and return them to the login screen. */
    /**
     * Log the user out and return them to the login screen.
     * @return {?}
     */
    LoginService.prototype.logOut = /**
     * Log the user out and return them to the login screen.
     * @return {?}
     */
    function () {
        if (this.getCurrentUser() && this.getCurrentUser().username) {
            this.http.post(this.loginConfigService.getLogoutUrl(), this.getCurrentUser()).pipe(first()).subscribe(function () {
                console.log('Logged out');
            });
        }
        this.clearLocalUser();
    };
    /**
     * @private
     * @return {?}
     */
    LoginService.prototype.clearLocalUser = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var username = null;
        if (this.getCurrentUser() && this.getCurrentUser().username) {
            username = this.getCurrentUser().username;
        }
        this.setCurrentUser(null);
        this.hideLogin = false;
        this.tokenService.clearToken();
        this.storage.remove(this.JWT_USER_NAME)
            .then(function () {
            if (username) {
                console.log('User [' + username + '] removed from storage');
            }
            else {
                console.log('User removed from storage');
            }
        });
    };
    LoginService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LoginService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Storage },
        { type: JwtHelperService },
        { type: LoginConfigService },
        { type: TokenApiService }
    ]; };
    /** @nocollapse */ LoginService.ngInjectableDef = defineInjectable({ factory: function LoginService_Factory() { return new LoginService(inject(HttpClient), inject(Storage), inject(JwtHelperService$1), inject(LoginConfigService), inject(TokenApiService)); }, token: LoginService, providedIn: "root" });
    return LoginService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoginIpService = /** @class */ (function () {
    function LoginIpService(http, loginService) {
        this.http = http;
        this.loginService = loginService;
        this.loginIp$ = new Subject();
        this.loginInfo = null;
    }
    /**
     * @return {?}
     */
    LoginIpService.prototype.getLoginIp = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.http.get(this.loginService.getLoginIpUrl()).subscribe(function (loginIp) {
            console.log('Got login ip: ' + loginIp);
            _this.loginInfo = loginIp;
            _this.loginIp$.next(loginIp);
        }, function (e) {
            console.log('Could not get login ip: ' + e);
            _this.loginInfo = null;
            _this.loginIp$.next(null);
        });
    };
    LoginIpService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LoginIpService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: LoginService }
    ]; };
    /** @nocollapse */ LoginIpService.ngInjectableDef = defineInjectable({ factory: function LoginIpService_Factory() { return new LoginIpService(inject(HttpClient), inject(LoginService)); }, token: LoginIpService, providedIn: "root" });
    return LoginIpService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoginIp = /** @class */ (function () {
    function LoginIp() {
        // Seed with defaults for maximum protection
        this.uniqueDeviceIdentifier = '--';
        this.copyRightInfo = '© 2018 - PeraHealth, Inc.';
        this.versionInfo = '--';
        this.patentInfo = '| <strong>US Patent Nos.</strong> 8,092,380; 8,100,829; 8,355,925; 8,403,847 and 8,454,506; | <strong>Canadian Patent No.</strong> 2,599,387 and other Canadian and foreign patents pending.';
    }
    return LoginIp;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoginComponent = /** @class */ (function () {
    function LoginComponent(loginService, loginLibraryIpService) {
        this.loginService = loginService;
        this.loginLibraryIpService = loginLibraryIpService;
        this.NO_DICE = 'Error:  Username or password is incorrect';
        this.loginInfo = new LoginIp();
    }
    /**
     * @return {?}
     */
    LoginComponent.prototype.getUser = /**
     * @return {?}
     */
    function () {
        if (!this.loginService.getCurrentUser()) {
            this.loginService.setCurrentUser(new User());
        }
        return this.loginService.getCurrentUser();
    };
    /**
     * @return {?}
     */
    LoginComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.logoSrc = this.loginService.getLogoSrc();
        this.loginLibraryIpService.loginIp$.pipe(first()).subscribe(function (loginIp) {
            if (loginIp) {
                _this.loginInfo = loginIp;
            }
            else {
                console.log('Could not get Login Information from server, using defaults.');
            }
        });
        this.loginLibraryIpService.getLoginIp();
        localStorage.removeItem('currentUser');
        this.loginService.setCurrentUser(new User());
        this.errorMessage = null;
    };
    /**
     * @return {?}
     */
    LoginComponent.prototype.login = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Retrieve a reference to the current user from the loginService
        /** @type {?} */
        var user = this.getUser();
        if (user.username && this.userPassword) {
            // Base64 encode the password
            user.password = btoa(this.userPassword);
            this.loginService.login$.pipe(first()).subscribe(function (usr) {
                if (!usr) {
                    /*
                       Any error = this message. This is a security best practice as you
                       do not want to give the user any information that they can use to
                       get into the system.
                       Wipe out the encoded password
                     */
                    user.password = null;
                    _this.userPassword = null;
                    _this.errorMessage = _this.NO_DICE;
                    _this.loginErrored();
                }
                else {
                    // Wipe out the encoded password
                    user.password = null;
                    _this.errorMessage = null;
                    _this.userPassword = null;
                }
            });
            this.loginService.logIn(user);
        }
        else {
            this.errorMessage = this.NO_DICE;
            this.loginErrored();
        }
    };
    /**
     * @return {?}
     */
    LoginComponent.prototype.loginErrored = /**
     * @return {?}
     */
    function () {
        this.setFocusToUsernameField();
    };
    /**
     * @return {?}
     */
    LoginComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setFocusToUsernameField();
    };
    /**
     * @return {?}
     */
    LoginComponent.prototype.setFocusToUsernameField = /**
     * @return {?}
     */
    function () {
        if (this.vc && this.vc.first && this.vc.first.nativeElement) {
            this.vc.first.nativeElement.focus();
        }
    };
    LoginComponent.decorators = [
        { type: Component, args: [{
                    selector: 'phlib-login',
                    template: "<!-- Hide the component if the user is already logged in. -->\n<div class=\"container\" [hidden]=\"loginService.hideLogin\">\n  <div class=\"card card-container\">\n    <img id=\"profile-img\" class=\"profile-img-card\" src={{logoSrc}} />\n    <p id=\"login-subtitle\" class=\"login-subtitle\">\n        Log Into Your <strong>{{title}}</strong> Account\n    </p>\n\n    <form name=\"form-signin\" (ngSubmit)=\"f.form.valid && login()\" #f=\"ngForm\" novalidate>\n      <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"errorMessage\">{{errorMessage}}</div>\n      <span id=\"reauth-email\" class=\"reauth-email\"></span>\n      <div class=\"form-group\" [ngClass]=\"{ 'has-error': f.submitted && !username.valid }\">\n        <label for=\"username\">User Name</label>\n        <input #input autofocus type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" [(ngModel)]=\"getUser().username\" #username=\"ngModel\" required />\n      </div>\n      <div class=\"form-group\" [ngClass]=\"{ 'has-error': f.submitted && !password.valid }\">\n        <label for=\"password\">Password</label>\n        <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" autocomplete=\"off\" [(ngModel)]=\"userPassword\" #password=\"ngModel\" required />\n      </div>\n      <div id=\"remember\" class=\"checkbox\">\n\n      </div>\n      <button [disabled]=\"username.invalid || password.invalid\" class=\"btn btn-lg btn-primary btn-block btn-signin\" type=\"submit\">LOGIN</button>\n    </form>\n  </div>\n  <footer>\n    <div class=\"footer\">\n      <span>{{loginInfo.copyRightInfo}} <strong>Version:</strong> {{loginInfo.versionInfo}}\n          | <strong>UDI: </strong>{{loginInfo.uniqueDeviceIdentifier}} <span [innerHtml]=\"loginInfo.patentInfo\"></span>\n      </span>\n    </div>\n  </footer>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["body,html{height:100%;background:no-repeat #3b3b3b}.ph-login-button{display:none}.card-container.card{max-width:490px;height:500px;padding:33px 55px 0}.btn{font-weight:700;height:36px;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.card{background-color:#fff;padding:20px 25px 30px;margin:100px auto 25px;border-radius:4px;box-shadow:0 2px 2px rgba(0,0,0,.3)}.profile-img-card{width:100%;height:3.5em;margin:0 auto 10px;display:block}.login-subtitle{font-size:1.2em;font-weight:700;color:#999;font-family:Tahoma;margin:10px 0 20px;min-height:1em}.reauth-email{display:block;color:#404040;line-height:2;margin-bottom:10px;font-size:14px;text-align:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;box-sizing:border-box}.form-signin #inputEmail,.form-signin #inputPassword{direction:ltr;height:44px;font-size:16px}label{color:#d9d9d9;text-transform:uppercase;font-weight:400;font-size:14px;font-family:Tahoma}.form-signin button,.form-signin input[type=email],.form-signin input[type=password],.form-signin input[type=text]{width:100%;display:block;margin-bottom:10px;z-index:1;position:relative;box-sizing:border-box}.form-control:focus{border-left-color:#fff;border-right-color:#fff;border-top-color:#fff;box-shadow:none;-webkit-box-shadow:none}.form-control{background-color:#fff;border-radius:0}.form-group input{border-top:none;border-left:none;border-right:none;box-shadow:none;margin-bottom:2em;font-size:1.2em}.btn.btn-signin{background-color:#999;display:block;margin-right:auto;margin-left:auto;padding:0;font-weight:700;font-size:14px;font-family:Tahoma;width:50%;height:36px;border-radius:3px;border:#666;transition:218ms}.forgot-password{color:#6891a2}.forgot-password:active,.forgot-password:focus,.forgot-password:hover{color:#0c6121}.footer{font-size:.7em;position:fixed;width:100%;bottom:0;left:0;padding-left:5px;background-color:#fff}"]
                }] }
    ];
    /** @nocollapse */
    LoginComponent.ctorParameters = function () { return [
        { type: LoginService },
        { type: LoginIpService }
    ]; };
    LoginComponent.propDecorators = {
        vc: [{ type: ViewChildren, args: ['input',] }]
    };
    return LoginComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoginModule = /** @class */ (function () {
    function LoginModule() {
    }
    /**
     * @return {?}
     */
    LoginModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: LoginModule,
            providers: [
                HttpClientModule,
                LoginService,
                LoginIpService,
                LoginConfigService
            ]
        };
    };
    LoginModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        BrowserModule,
                        FormsModule
                    ],
                    declarations: [LoginComponent],
                    exports: [LoginComponent]
                },] }
    ];
    return LoginModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LoginService, LoginIpService, LoginConfigService, LoginComponent, LoginModule, LoginIp };

//# sourceMappingURL=ng-login-library.js.map