{"version":3,"file":"ng-filters-library.js.map","sources":["ng://ng-filters-library/lib/filters.module.ts","ng://ng-filters-library/lib/filter/locations/location-selector.service.ts","ng://ng-filters-library/lib/filter/model/locations.ts","ng://ng-filters-library/lib/filter/query-filters/filter-query-config.service.ts","ng://ng-filters-library/lib/filter/query-filters/filter-query-rest.service.ts","ng://ng-filters-library/lib/sort/SortEnum.ts","ng://ng-filters-library/lib/sort/sort.service.ts","ng://ng-filters-library/lib/group/warning-category-group.service.ts","ng://ng-filters-library/lib/group/hospital-los-group.service.ts","ng://ng-filters-library/lib/filter/providers/provider-filter.service.ts","ng://ng-filters-library/lib/group/provider-group.service.ts","ng://ng-filters-library/lib/group/unit-group.service.ts","ng://ng-filters-library/lib/group/facility-group.service.ts","ng://ng-filters-library/lib/group/group.service.ts","ng://ng-filters-library/lib/filter/filter.service.ts","ng://ng-filters-library/lib/filter/service-line/service-line-config.service.ts","ng://ng-filters-library/lib/filter/service-line/service-line-rest.service.ts","ng://ng-filters-library/lib/filter/service-line/service-line-filter.service.ts","ng://ng-filters-library/lib/filter/providers/providers-config.service.ts","ng://ng-filters-library/lib/filter/providers/providers-api.service.ts","ng://ng-filters-library/lib/filter/agegroups/age-groups.service.ts","ng://ng-filters-library/lib/filter/warnings/warnings-filter.service.ts","ng://ng-filters-library/lib/filter/diagnosis/diagnosis-config.service.ts","ng://ng-filters-library/lib/filter/diagnosis/diagnosis-filter.service.ts","ng://ng-filters-library/lib/filter/diagnosis/diagnosis-rest.service.ts","ng://ng-filters-library/lib/filter/warning-time-frame/warning-time-frame-filter.service.ts","ng://ng-filters-library/lib/filter/model/diagnosis.ts"],"sourcesContent":["import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {MatCheckboxModule} from '@angular/material';\nimport {FormsModule} from '@angular/forms';\nimport {NgPipesModule} from 'ngx-pipes';\n\n@NgModule({\n  imports: [\n    MatCheckboxModule,\n    BrowserModule,\n    FormsModule,\n    NgPipesModule\n  ],\n  declarations: [\n  ],\n  exports: []\n})\nexport class FiltersModule {\n}\n","import {EventEmitter, Injectable} from '@angular/core';\nimport {Facility} from 'ng-common-library/lib/model/Facility';\nimport {Unit} from 'ng-common-library/lib/model/Unit';\nimport {Locations} from '../model/locations';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationSelectorService {\n\n  public loadedLocations = new Subject<void>();\n\n  // Map of facility to indeterminate state\n  facilities: Facility[];\n  units: Unit[];\n  /** Facilities that do not have all of their units selected\n   *  This is useful when setting up the rest call\n   *  NOTE: I thought about making facilities a map and putting units\n   *       as the value, but the REST call just takes the list of facilities\n   *       and units.. so it really is all units or some units with the call.\n   */\n  indeterminateFacilities: string[];\n\n  selectAll = new EventEmitter<Facility>();\n\n  deselectAll = new EventEmitter<Facility>();\n\n  checkForIndeterminate = new EventEmitter<string>();\n\n  expandUnitsList = new EventEmitter<void>();\n\n  collapseUnitsList = new EventEmitter<void>();\n\n  selectedUnits: Unit[] = [];\n\n  previousUnits: Unit[] = [];\n\n  constructor() {\n  }\n\n  checkUnitSelection(unitID: string): boolean {\n    for (const unit of this.selectedUnits) {\n      if (unitID === unit.key.unitID) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  selectUnit(unit: Unit) {\n    if (this.selectedUnits.indexOf(unit) < 0) {\n      this.selectedUnits.push(unit);\n    }\n    this.checkForIndeterminate.emit(unit.key.facilityID);\n  }\n\n  deselectUnit(unit: Unit) {\n    const index = this.selectedUnits.indexOf(unit);\n    if (index !== -1) {\n      this.selectedUnits.splice(index, 1);\n    }\n    this.checkForIndeterminate.emit(unit.key.facilityID);\n  }\n\n  selectAllUnitsFromAFacility(facility: Facility) {\n    for (const unit of this.units) {\n      if (unit.key.facilityID === facility.facilityID && this.selectedUnits.indexOf(unit) < 0) {\n        this.selectedUnits.push(unit);\n      }\n    }\n  }\n\n  deselectAllUnitsFromAFacility(facility: Facility) {\n    for (const unit of this.units) {\n      if (unit.key.facilityID === facility.facilityID) {\n        const index = this.selectedUnits.indexOf(unit);\n        if (index !== -1) {\n          this.selectedUnits.splice(index, 1);\n        }\n      }\n    }\n  }\n\n  /** Check if previous units and selected units are the same */\n  isLocationSelectionTheSame(): boolean {\n    // quickest way to decide\n    if (this.selectedUnits.length !== this.previousUnits.length) {\n      return false;\n    }\n    // check if every unit from selected units exists in previous units\n    for (const unit of this.selectedUnits) {\n      // bool to track if a unit has been found in the other list\n      let found = false;\n      for (const u of this.previousUnits) {\n        // match on facility id and unit id\n        if (u.key.facilityID === unit.key.facilityID && u.key.unitID === unit.key.unitID) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        return false;\n      }\n    }\n    // check if every unit from previous units exists in selected units\n    for (const unit of this.previousUnits) {\n      // bool to track if a unit has been found in the other list\n      let found = false;\n      for (const u of this.selectedUnits) {\n        // match on facility id and unit id\n        if (u.key.facilityID === unit.key.facilityID && u.key.unitID === unit.key.unitID) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private getUnitCountForFacility(facilityId: string): number {\n    let unitCount = 0;\n    for (const u of this.units) {\n      if (u.key.facilityID === facilityId) {\n        unitCount++;\n      }\n    }\n    return unitCount;\n  }\n\n  /** Builds string []s for change of peragraph and FLC REST calls when filtering */\n  getLocationsToFilter(): Locations {\n\n    const selectedLocations: Locations = {facilities: [], units: []};\n    for (const u of this.selectedUnits) {\n      selectedLocations.units.push(u.key.unitID);\n      if (selectedLocations.facilities.indexOf(u.key.facilityID) < 0) {\n        selectedLocations.facilities.push(u.key.facilityID);\n      }\n    }\n\n    /**\n     * If any of the facilities in the selectedLocations are \"indeterminate\"\n     *  then we must supply the list of units. Otherwise we can specify \"*\"\n     *  for the units which makes the rest / sql calls run faster.\n     */\n    let foundIndeterminateFacility = false;\n    for (const fId of selectedLocations.facilities) {\n      if (this.indeterminateFacilities.indexOf(fId) >= 0) {\n        foundIndeterminateFacility = true;\n        // It only takes one...\n        break;\n      }\n    }\n    if (!foundIndeterminateFacility) {\n      selectedLocations.units = ['*'];\n    }\n    return selectedLocations;\n  }\n\n  public setFacilityIndeterminateState(facilityID: string, isIndeterminate: boolean): void {\n    if (isIndeterminate) {\n      this.indeterminateFacilities.push(facilityID);\n    } else {\n      if (this.indeterminateFacilities.indexOf(facilityID) >= 0) {\n        this.indeterminateFacilities.splice(this.indeterminateFacilities.indexOf(facilityID), 1);\n      }\n    }\n  }\n\n  public clearIndeterminateFacilities(): void {\n    this.indeterminateFacilities = [];\n  }\n}\n","export class Locations {\n  public facilities: string[];\n  public units: string[];\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilterQueryConfigService {\n\n  private filterQueryEndPoint = null;\n\n  getFilterQueryEndPoint(): any {\n    if (!this.filterQueryEndPoint) {\n      console.warn('Filter query endpoint is not set!');\n    }\n    return this.filterQueryEndPoint;\n  }\n\n  setFilterQueryEndPoint(value: any) {\n    this.filterQueryEndPoint = value;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {Observable, timer} from 'rxjs';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {FilterQueryConfigService} from './filter-query-config.service';\nimport {switchMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilterQueryRestService {\n\n  private pollInstance$: Observable<any>;\n\n  constructor(private http: HttpClient, private filterQueryConfig: FilterQueryConfigService) {\n    this.pollInstance$ = timer(0, 900000);\n\n  }\n\n  /**\n   * Rest call for getting filtered visits according to current criteria\n   */\n  public getFilteredVisits(queryParamsGetter: any): Observable<string[]> {\n    const serverFilterCriteria = queryParamsGetter();\n    return this.http.get<string[]>(this.filterQueryConfig.getFilterQueryEndPoint(), {params: this.getQueryParams(serverFilterCriteria)});\n  }\n\n  /**\n   * get updated filter criteria on an interval\n   */\n  public getFilteredVisitsInterval(queryParamsGetter: any) {\n    return this.pollInstance$.pipe(switchMap(\n      (() => this.getFilteredVisits(queryParamsGetter))\n    ));\n  }\n\n  /**\n   * returns the filter criteria in the form of a HttpParams object\n   */\n  getQueryParams(serverFilterCriteria: {}): HttpParams {\n    // check if object is empty\n    if (Object.keys(serverFilterCriteria).length === 0) {\n      return null;\n    } else {\n      // if not empty create params object\n      let params = new HttpParams();\n      // for every key in the object attach a list of params\n      for ( const key in serverFilterCriteria) {\n        if (serverFilterCriteria.hasOwnProperty(key)) {\n          // traverse the list of params for same key and add each one\n          for ( let criteria of serverFilterCriteria[key] ) {\n            criteria = criteria.replace(/,/g, '|');\n            params = params.append(key, criteria);\n          }\n        }\n      }\n      return params;\n    }\n  }\n\n}\n","export enum SortChoices {\n  RIScore = 'latestRi',\n  DisplayName = 'displayName',\n  MedicalRecordNumber = 'medicalRecordNumber',\n  VisitNumber = 'visitNumber',\n  HospitalLOS = 'hospitalLos',\n  WarningSeverity = 'warningSeverity',\n  WarningDuration = 'warningDuration'\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\nimport {SortChoices} from './SortEnum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SortService {\n  // sort currently applied to array view\n  public activeSortFunction: ((peraGraphA: PeraGraph, PeraGraphB: PeraGraph) => number) = null;\n\n  // sort function in sidebar -> not currently active in array view\n  private _stagedSortFunction: ((peraGraphA: PeraGraph, PeraGraphB: PeraGraph) => number) = null;\n\n  activeSortName: string = null;\n\n  stagedSortName: string = null;\n\n  nonStandardSortFunctionActive = false;\n\n  nonStandardSortFunction: ((peraGraphA: PeraGraph, PeraGraphB: PeraGraph) => number) = null;\n\n  // options of dropdown\n  choices: { value: { sortName: string, transformer: (peragraph: PeraGraph) => any }, description: string, tooltip: string }[] = [\n    {\n      value: {\n        sortName: SortChoices.DisplayName, transformer: (peragraph: PeraGraph) => {\n          return peragraph.displayName;\n        }\n      }, description: 'Patient Name', tooltip: 'Alphabetical sort by patient last name'\n    },\n    {\n      value: {\n        sortName: SortChoices.MedicalRecordNumber, transformer: (peragraph: PeraGraph) => {\n          return peragraph.patient.medicalRecordNumber;\n        }\n      }, description: 'MRN', tooltip: 'Sort graphs by the medical record number of the patient'\n    },\n    {\n      value: {\n        sortName: SortChoices.VisitNumber, transformer: (peragraph: PeraGraph) => {\n          return peragraph.vnm;\n        }\n      }, description: 'Visit Number', tooltip: 'Sort graphs by the visit number of the patient'\n    },\n    {\n      value: {\n        sortName: SortChoices.RIScore, transformer: (peragraph: PeraGraph) => {\n          return peragraph.latestRi;\n        }\n      }, description: 'RI Score', tooltip: 'Sort by Rothman Index score value'\n    },\n    {\n      value: {\n        sortName: SortChoices.HospitalLOS, transformer: (peragraph: PeraGraph) => {\n          return peragraph.admitDate;\n        }\n      }, description: 'Hospital LOS', tooltip: 'Sort by hospital length of stay'\n    },\n    {\n      value: {\n        sortName: SortChoices.WarningSeverity, transformer: (peragraph: PeraGraph) => {\n          if (peragraph.activeWarning) {\n            const category = peragraph.activeWarning.category;\n            if (category === 'V') {\n              return 4;\n            } else if (category === 'H') {\n              return 3;\n            } else if (category === 'M') {\n              return 2;\n            } else {\n              return 1;\n            }\n          }\n          return null;\n        }\n      }, description: 'Warning Severity', tooltip: 'Sort by the severity of patient warnings'\n    },\n    {\n      value: {\n        sortName: SortChoices.WarningDuration, transformer: (peragraph: PeraGraph) => {\n          if (peragraph.activeWarning) {\n            return peragraph.activeWarning.createdDate;\n          }\n          return null;\n        }\n      }, description: 'Warning Created Time', tooltip: 'Sort by warning created time'\n    }\n  ];\n\n  constructor() {\n    this.stageSortFunction(this.choices[0].value.transformer, 1, this.choices[0].value.sortName);\n    // set staged sort to active\n    this.activeSortFunction = this.getStagedSortFunction();\n    this.activeSortName = this.stagedSortName;\n  }\n\n\n  getStagedSortFunction(): (peraGraphA: PeraGraph, PeraGraphB: PeraGraph) => number {\n    return this._stagedSortFunction;\n  }\n\n  /**\n   * what to do if sidebar is destroyed\n   */\n  clearSort() {\n    this.activeSortName = null;\n    this.activeSortFunction = null;\n    this.stagedSortName = null;\n    this._stagedSortFunction = null;\n  }\n\n  /**\n   * stage sort function for application\n   */\n  stageSortFunction(transformer: (peraGraphA: PeraGraph) => any, direction: number, sortName: string) {\n    this.stagedSortName = sortName;\n    this._stagedSortFunction = this.createSortFunction(transformer, direction);\n  }\n\n  /**\n   * generates sort function from transformer function, direction, and sortName\n   * @param transformer - function to take peraGraph and return primitive value for sorting\n   * @param direction - direction of sort\n   */\n  createSortFunction(transformer: (peraGraphA: PeraGraph) => any, direction: number) {\n    return function (peraGraphA: PeraGraph, peraGraphB: PeraGraph): number {\n      // get comparable values from peragraphs to sort by\n      const valueA = transformer(peraGraphA);\n      const valueB = transformer(peraGraphB);\n      let comparison = 0;\n      // compare values and return\n      if (valueA && valueB) {\n        if (valueA > valueB) {\n          comparison = 1;\n        } if (valueA < valueB) {\n          comparison = -1;\n        }\n      } else {\n        if (valueA && !valueB) {\n          comparison = 1;\n        } else if (valueB && !valueA) {\n          comparison = -1;\n        }\n      }\n      return comparison * direction;\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {GroupOption} from './GroupOption';\nimport {PeraGraph} from 'ng-common-library';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarningCategoryGroupService implements GroupOption {\n\n  /**\n   * things that need to emit before generating the warning lanes\n   */\n  dependency = null;\n\n  constructor() { }\n\n  /**\n   * generate group choice object for facilities\n   */\n  generateLanes(): { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } {\n    return {\n      groupName: 'Warning Category',\n      lanes: [{\n        laneFunction: (peraGraph: PeraGraph) => peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'V',\n        laneTitle: 'Very High Warning'\n      },\n        {\n          laneFunction: (peraGraph: PeraGraph) => peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'H',\n          laneTitle: 'High Warning'\n        },\n        {\n          laneFunction: (peraGraph: PeraGraph) => peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'M',\n          laneTitle: 'Medium Warning'\n        },\n        {laneFunction: (peraGraph: PeraGraph) => peraGraph.activeWarning == null, laneTitle: 'No Warning'}]\n    };\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\nimport {GroupOption} from './GroupOption';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HospitalLosGroupService implements GroupOption {\n\n  /**\n   * size of LOS lane ranges\n   */\n  losIncrement = 1;\n\n  /**\n   * number of lanes LOS group by can have\n   */\n  losLaneMax = 5;\n\n  /**\n   * things that need to emit before generating the Hospital Los lanes\n   */\n  dependency = null;\n\n  constructor() { }\n\n  /**\n   * generate group choice object for facilities\n   */\n  generateLanes(): { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } {\n    const option: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } = {\n      groupName: 'Hospital LOS',\n      lanes: []\n    };\n    for (let i = 0; i < this.losLaneMax * this.losIncrement; i += this.losIncrement) {\n      const losLaneInfo = this.generateLosLaneFilterFunctionAndTitle(i, i + this.losIncrement);\n      option.lanes.push({laneFunction: losLaneInfo.filterFunction, laneTitle: losLaneInfo.title});\n    }\n    // generate catch all lane for visits older then max\n    const losLaneInfoFinal = this.generateLosLaneFilterFunctionAndTitle(this.losLaneMax * this.losIncrement);\n    option.lanes.push({laneFunction: losLaneInfoFinal.filterFunction, laneTitle: losLaneInfoFinal.title});\n    return option;\n  }\n\n  /**\n   * generate filter function and label for Hospital LOS group by\n   * @param minIndex - number of days before current time to start including graphs in this lane (inclusive)\n   * @param maxIndex - number of days before current time to stop including graphs (exclusive)\n   */\n  private generateLosLaneFilterFunctionAndTitle(minIndex: number, maxIndex: number = -1): { filterFunction: (peraGraph: PeraGraph) => boolean, title: string } {\n    const minVolume = minIndex * 86400000;\n    if (maxIndex !== -1) {\n      // if a max end of the range is included create a filtr for between max and min duration\n      const maxVolume = maxIndex * 86400000;\n      return {\n        filterFunction: function (peraGraph: PeraGraph): boolean {\n          const current = ((new Date()).getTime());\n          const min = current - minVolume;\n          const max = current - maxVolume;\n          return peraGraph.admitDate <= min && peraGraph.admitDate > max;\n        }, title: minIndex.toString() + ' - ' + maxIndex.toString() + ' days'\n      };\n    } else {\n      // create catch all if max is not included in function call\n      return {\n        filterFunction: function (peraGraph: PeraGraph): boolean {\n          const current = ((new Date()).getTime());\n          const min = current - minVolume;\n          return peraGraph.admitDate <= min;\n        }, title: minIndex.toString() + '+ days'\n      };\n    }\n  }\n\n}\n","import {EventEmitter, Injectable} from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\nimport {AttendingProvider} from 'ng-common-library/lib/model/AttendingProvider';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProviderFilterService {\n\n    // all providers\n    providers: AttendingProvider[] = [];\n\n    // dictionary of providers currently selected in sidebar\n    selectedProviders = {};\n\n    // event for letting provider filter know providers are ready\n    providersLoaded = new EventEmitter<void>();\n\n    // event for changing all checkbox values\n    // true for select\n    // false for deselect\n    toggleAll = new EventEmitter<boolean>();\n\n    constructor() {\n    }\n\n    /**\n     * closure which returns filter function\n     * had to use a closure to be able to pass in selectedProviders list into filter\n     */\n    getFilterfunction() {\n        const selectedProviders = {};\n        for (const prov in this.selectedProviders) {\n          if (prov) {\n            selectedProviders[prov] = this.selectedProviders[prov];\n          }\n        }\n        return function(peragraph: PeraGraph) {\n            return peragraph.attendingProvider && selectedProviders[peragraph.attendingProvider.firstName + peragraph.attendingProvider.lastName];\n        };\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {GroupOption} from './GroupOption';\nimport {PeraGraph} from 'ng-common-library';\nimport {AttendingProvider} from 'ng-common-library/lib/model/AttendingProvider';\nimport {ProviderFilterService} from '../filter/providers/provider-filter.service';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProviderGroupService implements GroupOption {\n\n  /**\n   * things that need to emit before generating the provider lanes\n   */\n  dependency = new Subject<void>();\n\n  constructor(private providerService: ProviderFilterService) {\n    this.providerService.providersLoaded.subscribe(() => {\n      this.dependency.next();\n    });\n  }\n\n  /**\n   * generate group choice object for facilities\n   */\n  generateLanes(): { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } {\n    const option: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } = {\n      groupName: 'Provider',\n      lanes: []\n    };\n    for (const provider of this.providerService.providers) {\n      option.lanes.push({\n        laneFunction: this.generateProviderLaneFilterFunction(provider),\n        laneTitle: provider.lastName + ', ' + provider.firstName\n      });\n    }\n    return option;\n  }\n\n  /**\n   * helper function for generating a filter function for provider groups given a provider\n   * @param provider - provider to filter for\n   */\n  private generateProviderLaneFilterFunction(provider: AttendingProvider): (peraGraph: PeraGraph) => boolean {\n    const firstName = provider.firstName;\n    const lastName = provider.lastName;\n    return function (peraGraph: PeraGraph): boolean {\n      return peraGraph.attendingProvider.firstName === firstName && peraGraph.attendingProvider.lastName === lastName;\n    };\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {GroupOption} from './GroupOption';\nimport {LocationSelectorService} from '../filter/locations/location-selector.service';\nimport {PeraGraph, Unit} from 'ng-common-library';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UnitGroupService implements GroupOption {\n\n  /**\n   * things that need to emit before generating the unit lanes\n   */\n  dependency = new Subject<void>();\n\n  constructor(private locationSelectorService: LocationSelectorService) {\n    this.locationSelectorService.loadedLocations.subscribe(() => {\n      this.dependency.next();\n    });\n  }\n\n  /**\n   * generate group choice object for facilities\n   */\n  generateLanes(): { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } {\n    const option: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } = {\n      groupName: 'Unit',\n      lanes: []\n    };\n    for (const unit of this.locationSelectorService.units) {\n      option.lanes.push({laneFunction: this.generateUnitLaneFilterFunction(unit), laneTitle: unit.displayName});\n    }\n    return option;\n  }\n\n  /**\n   * generate filter function for filtering out a group for a specific unit\n   * @param unit - unit to filter on\n   */\n  private generateUnitLaneFilterFunction(unit: Unit) {\n    const unitName = unit.displayName;\n    return function (peraGraph: PeraGraph): boolean {\n      return peraGraph.unitId === unitName;\n    };\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {GroupOption} from './GroupOption';\nimport {Facility, PeraGraph} from 'ng-common-library';\nimport {LocationSelectorService} from '../filter/locations/location-selector.service';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FacilityGroupService implements GroupOption {\n\n  /**\n   * things that need to emit before generating the facility lanes\n   */\n  dependency = new Subject<void>();\n\n  constructor(private locationSelectorService: LocationSelectorService) {\n    this.locationSelectorService.loadedLocations.subscribe(() => {\n      this.dependency.next();\n    });\n  }\n\n  /**\n   * generate group choice object for facilities\n   */\n  generateLanes(): { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } {\n    const option: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } = {\n      groupName: 'Facility',\n      lanes: []\n    };\n    for (const facility of this.locationSelectorService.facilities) {\n      option.lanes.push({laneFunction: this.generateFacilitiyLaneFilterFunction(facility), laneTitle: facility.displayName});\n    }\n    return option;\n  }\n\n  /**\n   * generate filter function for grouping by facility\n   * @param facility - facility to filter for\n   */\n  private generateFacilitiyLaneFilterFunction(facility: Facility) {\n    const facilityName = facility.displayName;\n    return function (peraGraph: PeraGraph): boolean {\n      return peraGraph.facilityId === facilityName;\n    };\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {WarningCategoryGroupService} from './warning-category-group.service';\nimport {HospitalLosGroupService} from './hospital-los-group.service';\nimport {ProviderGroupService} from './provider-group.service';\nimport {UnitGroupService} from './unit-group.service';\nimport {FacilityGroupService} from './facility-group.service';\nimport {GroupOption} from './GroupOption';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GroupService {\n\n  /**\n   * subject used to change how many groups to be open initially after applying filtering, grouping and/or sorting\n   */\n  public changeNumberOfGroupsToShow$ = new BehaviorSubject<number>(4);\n\n  /**\n   * subject to expand groups if necessary\n   */\n  public expandGroups$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * switch to decide if it is necessary to recalculate how many groups should be closed\n   */\n  public changeGroupsClosed = false;\n\n  /**\n   * emits when it is okay to display group options\n   */\n  public groupsLoaded$ = new Subject<void>();\n\n  /**\n   * different options to group by and corresponding logic to divide graphs into groups\n   */\n  groupOptions: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] }[] = [];\n\n  /**\n   * tells the groups to update themselves\n   */\n  public groupSubject$: BehaviorSubject<{ laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] >;\n\n  /**\n   * groups active in the array view\n   */\n  activeGroup: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] };\n\n  /**\n   * groups currently selected in sidebar\n   */\n  stagedGroup: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] };\n\n  constructor(private warningGroupService: WarningCategoryGroupService,\n              private hospitalLosGroupService: HospitalLosGroupService,\n              private providerGroupService: ProviderGroupService,\n              private facilityGroupService: FacilityGroupService,\n              private unitGroupService: UnitGroupService) {\n    const groupOptions: GroupOption[] = [warningGroupService, hospitalLosGroupService, providerGroupService, facilityGroupService, unitGroupService];\n    const dependencies = this.compileDependencies(groupOptions);\n    // set default value of group by\n    this.setDefaults();\n    // wait for dependencies to load and then\n    combineLatest(dependencies).subscribe(() => this.generateGroupByOptions(groupOptions));\n  }\n\n  /**\n   * compiles a list of dependencies from all the Group Option classes\n   * @param options - list of Services to compile dependencies from\n   */\n  compileDependencies(options: GroupOption[]): Observable<any>[] {\n    const dependencies: Observable<any>[] = [];\n    for (const option of options) {\n        if (option.dependency && dependencies.indexOf(option.dependency) < 0) {\n          dependencies.push(option.dependency);\n        }\n    }\n    return dependencies;\n  }\n\n  /**\n   * generate filter functions and titles for all the group by options and add them to the options list\n   */\n  generateGroupByOptions(options: GroupOption[]) {\n    this.groupOptions = [];\n    for (const option of options) {\n      this.groupOptions.push(option.generateLanes());\n    }\n    this.groupsLoaded$.next();\n  }\n\n  /**\n   * set default value of group by\n   */\n  setDefaults() {\n    this.activeGroup = this.warningGroupService.generateLanes();\n    this.stagedGroup = this.warningGroupService.generateLanes();\n    this.groupSubject$ = new BehaviorSubject<{laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string}[]>(this.warningGroupService.generateLanes().lanes);\n  }\n\n  /**\n   * what to do if sidebar is destroyed\n   */\n  clearGroupBy() {\n    this.activeGroup = this.warningGroupService.generateLanes();\n    this.stagedGroup = this.warningGroupService.generateLanes();\n    this.groupSubject$.next(this.warningGroupService.generateLanes().lanes);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {PeraGraph} from 'ng-common-library';\nimport {LocationSelectorService} from './locations/location-selector.service';\nimport {Locations} from './model/locations';\nimport {FilterQueryRestService} from './query-filters/filter-query-rest.service';\nimport {SortService} from '../sort/sort.service';\nimport {SortChoices} from '../sort/SortEnum';\nimport {GroupService} from '../group/group.service';\n\n/**\n * Manages the staging filters object -> the current status of the sidebar,\n * the active filters object -> the filters currently being applied to the array view,\n * and the subject which is used to update the array view when filters are applied.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilterService {\n\n  /** BehaviorSubject for when selected locations change. */\n  public locationsChanged = new BehaviorSubject<{ locations: Locations, executeFilterQuery: boolean }>({\n    locations: new Locations(),\n    executeFilterQuery: false,\n  });\n\n  /** Filters actively applied to the array view. */\n  public activeFilters = {};\n\n  /** Filters currently selected in the sidebar but NOT applied. */\n  private stagingFilters = {};\n\n  /**\n   * visit numbers of patients filtered out by server side filters\n   */\n  public serverFilteredVisits: string[] = [];\n\n  /**\n   * name of filter for server side filters\n   */\n  private serverFilterName = 'query-filter';\n\n  /**\n   * criteria to build filter query from as currently represented in sidebar\n   */\n  private stagedServerFilterCriteria = {};\n\n  /**\n   * criteria for server side filtering currently ACTIVE in array view\n   */\n  private _activeServerFilterCriteria = {};\n\n  /** Subject which is updated when filters are applied. */\n  public filterSubject$ = new BehaviorSubject<any>(this.activeFilters);\n\n  constructor(private locationSelectorService: LocationSelectorService,\n              private filterRestService: FilterQueryRestService,\n              private sortService: SortService,\n              private groupService: GroupService) {\n  }\n\n  /**\n   * Adds a staged filter (prior to activating the filters)\n   * @param filterName Name of the filter to stage.\n   * @param filterFunction The filter function to stage.\n   */\n  stageFilter(filterName: string, filterFunction: (peragraph: PeraGraph) => boolean) {\n    this.stagingFilters[filterName] = filterFunction;\n  }\n\n  /**\n   * Removes a staged filter.\n   * @param filterName Name of filter to unstage.\n   */\n  unstageFilter(filterName: string) {\n    delete this.stagingFilters[filterName];\n  }\n\n  /**\n   * gets filter function that filters out patients based on criteria from conglomerated filter query\n   */\n  getServerSideFilterFunction() {\n    const thisRef = this;\n    return function (peragraph: PeraGraph): boolean {\n      for (const vnm of thisRef.serverFilteredVisits) {\n        if (vnm === peragraph.vnm) {\n          return true;\n        }\n      }\n      return false;\n    };\n  }\n\n  /**\n   * add filter criteria to criteria object\n   * @param criteria - array of criteria to add to filter\n   * @param title - property name of criteria on the filterCriteria object -> MUST match a\n   * QueryParam in the REST call located in common.FilterController or it won't be applied\n   */\n  stageServerFilterCriteria(criteria: Array<string>, title: string) {\n    this.stagedServerFilterCriteria[title] = criteria;\n    this.stageFilter(this.serverFilterName, this.getServerSideFilterFunction());\n  }\n\n  /**\n   * removes a criteria object from the filter criteria object\n   * if no criterion remain, the filter is removed from the staged filters\n   * @param title - name of the criteria to be removed\n   */\n  removeStagedServerCriteria(title: string) {\n    delete this.stagedServerFilterCriteria[title];\n    if (Object.keys(this.stagedServerFilterCriteria).length === 0) {\n      this.unstageFilter(this.serverFilterName);\n    }\n  }\n\n  /**\n   * return staged server side filter parameters\n   */\n  getStagedServerSideFilterCriteria() {\n    return this.stagedServerFilterCriteria;\n  }\n\n  /**\n   * returns a function which returns the current active filters at the given time\n   */\n  getActiveServerFilterCriteria(): {} {\n    const filterServiceRef = this;\n    return function (): {} {\n      return filterServiceRef._activeServerFilterCriteria;\n    };\n  }\n\n  /**\n   * what to do if sidebar is destroyed\n   */\n  clearAllFilters() {\n    this.activeFilters = {};\n    this.stagingFilters = {};\n    this.serverFilteredVisits = [];\n    this.stagedServerFilterCriteria = {};\n    this._activeServerFilterCriteria = {};\n    this.filterSubject$.next({});\n    this.groupService.clearGroupBy();\n    this.sortService.clearSort();\n  }\n\n  /**\n   * Activate the staged filters\n   *\n   * 2 seperate paths:\n   *      A. Location changes -> refresh graphs is called after changing the endpoint parameters and a variable is passed in\n   *                              to let refresh changes know if the server side filter needs to be refreshed\n   *      B. No location changes -> If the server side filtering needs to be refreshed, its REST call is initiated before client side filtering occurs,\n   *                              otherwise client side filtering occurs immediatley on existing graphs\n   */\n  activateFilters() {\n    // close appropriate groups if changing, filters, group by, or sort\n    this.groupService.changeGroupsClosed = true;\n    // set staged sort to active\n    this.sortService.activeSortFunction = this.sortService.getStagedSortFunction();\n    this.sortService.activeSortName = this.sortService.stagedSortName;\n\n    // set staged filters to active filters\n    this.activeFilters = {};\n    for (const filter in this.stagingFilters) {\n      if (this.stagingFilters.hasOwnProperty(filter)) {\n        this.activeFilters[filter] = this.stagingFilters[filter];\n      }\n    }\n    // set staged server side filtering query parameters to active\n    this._activeServerFilterCriteria = {};\n    for (const criteria in this.stagedServerFilterCriteria) {\n      if (this.stagedServerFilterCriteria.hasOwnProperty(criteria)) {\n        this._activeServerFilterCriteria[criteria] = this.stagedServerFilterCriteria[criteria];\n      }\n    }\n\n    // check if the filter query needs to be run\n    const executeQuery = this.activeFilters.hasOwnProperty(this.serverFilterName);\n\n    // Check if unit selection has changed\n    if (!this.locationSelectorService.isLocationSelectionTheSame() || this.sortService.activeSortName === SortChoices.RIScore || this.groupService.stagedGroup.groupName !== this.groupService.activeGroup.groupName) {\n      this.groupService.activeGroup = this.groupService.stagedGroup;\n      this.groupService.groupSubject$.next(this.groupService.activeGroup.lanes);\n      // get selected unit and facility ids\n      const selectedLocations: Locations = this.locationSelectorService.getLocationsToFilter();\n      // Signal that location selections have changed and whether or not to execute the filter query\n      this.locationsChanged.next({locations: selectedLocations, executeFilterQuery: executeQuery});\n    } else {\n      // if filter query needs to be executed, wait for it to return before filtering the graphs in the client\n      if (executeQuery) {\n        this.filterRestService.getFilteredVisits(this.getActiveServerFilterCriteria()).subscribe((visits: string[]) => {\n          this.serverFilteredVisits = visits;\n          this.filterSubject$.next(this.activeFilters);\n        });\n      } else {\n        // pass the filter subject with the updated filters\n        setTimeout(() => this.filterSubject$.next(this.activeFilters), 500);\n      }\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceLineConfigService {\n\n  private serviceLineDescriptionsEndpoint = null;\n\n  getServiceLineDescriptionsEndpoint(): any {\n    if (!this.serviceLineDescriptionsEndpoint) {\n      console.warn('Service Line Descriptions endpoint is not set!');\n    }\n    return this.serviceLineDescriptionsEndpoint;\n  }\n\n  setServiceLineDescriptionsEndpoint(value: any) {\n    this.serviceLineDescriptionsEndpoint = value;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {ServiceLineConfigService} from './service-line-config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceLineRestService {\n\n  constructor(private http: HttpClient, private serviceLineConfig: ServiceLineConfigService) { }\n\n  /**\n   * return all service line descriptions\n   */\n  getAllServiceLineDescriptions(): Observable<string[]> {\n    return this.http.get<string[]>(this.serviceLineConfig.getServiceLineDescriptionsEndpoint());\n  }\n}\n","import {EventEmitter, Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceLineFilterService {\n\n  toggleAll = new EventEmitter<boolean>();\n\n  constructor() { }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProvidersConfigService {\n\n  private allProvidersEndpoint = null;\n\n  public getAllProvidersEndpoint(): string {\n    if (!this.allProvidersEndpoint) {\n      console.warn('All Providers Endpoint is not set!');\n    }\n    return this.allProvidersEndpoint;\n  }\n\n  public setAllProvidersEndpoint(value: string): void {\n    this.allProvidersEndpoint = value;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {AttendingProvider} from \"ng-common-library/lib/model/AttendingProvider\";\nimport {Observable} from \"rxjs\";\nimport {ProvidersConfigService} from './providers-config.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProvidersApiService {\n\n    constructor(private http: HttpClient, private providersConfigService: ProvidersConfigService) {\n    }\n\n    getAllProviders(): Observable<AttendingProvider[]> {\n        return this.http.get<AttendingProvider[]>(this.providersConfigService.getAllProvidersEndpoint());\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\nimport {FilterService} from '../filter.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgeGroupsService {\n\n  public readonly PEDIATRIC_GROUP = 'Pediatric';\n  public readonly ADULT_GROUP = 'Adult';\n  public readonly ALL_GROUP = 'All';\n\n  constructor(private filterService: FilterService) {\n  }\n\n  public unstageAgeGroups() {\n    this.filterService.unstageFilter(this.PEDIATRIC_GROUP);\n    this.filterService.unstageFilter(this.ADULT_GROUP);\n    this.filterService.unstageFilter(this.ALL_GROUP);\n  }\n\n  /**\n   * Always returns true because we want all the patients\n   * @param peragraph - peragraph to filter\n   */\n  public allFilterFunction(peragraph: PeraGraph): boolean {\n    return true;\n  }\n\n  /**\n   * Filter out any peragraphs with patients younger than 18\n   * @param peragraph - peragraph to be filtered\n   */\n  public adultFilterFunction(peragraph: PeraGraph): boolean {\n    const birthDate: Date = new Date();\n    birthDate.setMilliseconds(peragraph.patient.dob);\n    const currentDate: Date = new Date();\n    currentDate.setMilliseconds(Date.now());\n    const age = currentDate.getFullYear() - birthDate.getFullYear();\n    return age >= 18;\n  }\n\n  /**\n   * Filter out any peragraphs with patients older than 18\n   * @param peragraph - peragraph to be filtered\n   */\n  public pediatricFilterFunction(peragraph: PeraGraph): boolean {\n    const birthDate: Date = new Date();\n    birthDate.setMilliseconds(peragraph.patient.dob);\n    const currentDate: Date = new Date();\n    currentDate.setMilliseconds(Date.now());\n    const age = currentDate.getFullYear() - birthDate.getFullYear();\n    return age < 18;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarningsFilterService {\n\n  /** Warning levels that are selected. Start with all of them. */\n  public selectedWarnings = ['warning_v', 'warning_h', 'warning_m', 'warning_none', 'warning_no_ri'];\n\n  /**\n   * Configurations for warning level filter options.\n   *\n   * Contains a filter id, the color of the warning level and a filter function for filtering out\n   * the warning if NOT selected.\n   */\n  public filterOptions = [\n    {\n      filterID: 'warning_v', color: '#D51C19',\n      filterFunction: function (peragraph: PeraGraph) {\n        return !(peragraph.activeWarning && peragraph.activeWarning.category === 'V');\n      }\n    }\n    ,\n    {\n      filterID: 'warning_h', color: '#EE834C',\n      filterFunction: function (peragraph: PeraGraph) {\n        return !(peragraph.activeWarning && peragraph.activeWarning.category === 'H');\n      }\n    },\n    {\n      filterID: 'warning_m', color: '#F6CC5D',\n      filterFunction: function (peragraph: PeraGraph) {\n        return !(peragraph.activeWarning && peragraph.activeWarning.category === 'M');\n      }\n    },\n    {\n      filterID: 'warning_none', color: '#3185B8',\n      filterFunction: function (peragraph: PeraGraph) {\n        return !(!peragraph.activeWarning && !peragraph.discharged);\n      }\n    }\n  ];\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosisConfigService {\n\n  /**\n   * class for configuring the endpoint for retrieving all diagnoses\n   */\n\n  private diagnosesEndpoint = null;\n\n  public getDiagnosesEndpoint(): string {\n    if (!this.diagnosesEndpoint) {\n      console.warn('Diagnoses endpoint is not set!');\n    }\n    return this.diagnosesEndpoint;\n  }\n\n  public setDiagnosesEndpoint(value: string): void {\n    this.diagnosesEndpoint = value;\n  }\n}\n","import {EventEmitter, Injectable} from '@angular/core';\nimport {Diagnosis} from '../model/diagnosis';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosisFilterService {\n\n  // diagnoses currently selected in sidebar\n  public selectedDiagnoses = {};\n\n  // all diagnoses to choose from\n  public diagnoses: Diagnosis[] = [];\n\n  // lets sidebar know when diagnoses have been returned from REST call\n  public diagnosesLoaded$ = new EventEmitter<void>();\n\n  // event for changing all checkbox values\n  // true for select\n  // false for deselect\n  public toggleAll = new EventEmitter<boolean>();\n\n  constructor() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {Diagnosis} from '../model/diagnosis';\nimport {HttpClient} from '@angular/common/http';\nimport {DiagnosisConfigService} from './diagnosis-config.service';\nimport {Observable, timer} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosisRestService {\n\n  private pollInstanceDiagnoses$: Observable<any>;\n\n  constructor(private http: HttpClient, private diagnosisConfigService: DiagnosisConfigService) {\n    this.pollInstanceDiagnoses$ = timer(0, 90000);\n  }\n\n  /**\n   * returns an observable with all diagnoses\n   */\n  getAllDiagnoses(): Observable<Diagnosis[]> {\n    return this.http.get<Diagnosis[]>(this.diagnosisConfigService.getDiagnosesEndpoint() + '/all');\n  }\n\n  /**\n   * returns an observable that broadcasts all active diagnoses on an interval\n   */\n  getAllDiagnosisInterval(): Observable<any> {\n    return this.pollInstanceDiagnoses$.pipe(\n      switchMap(() => this.getAllDiagnoses())\n    );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarningTimeFrameFilterService {\n\n  constructor() { }\n\n  /**\n   * filters out graphs with warnings older than warning timeframe limit\n   * @param warningTimeFrame - # of hours to check back for warning activity\n   */\n  getFilterFunction(warningTimeFrame: number) {\n    const warningTimeFrameLocal = warningTimeFrame;\n    return function (peraGraph: PeraGraph): boolean {\n      if (peraGraph.activeWarning && peraGraph.activeWarning.createdDate) {\n        // check if date warning was created is older then the warning time frame limit\n        if (peraGraph.activeWarning.createdDate >= ((new Date()).getTime()) - (warningTimeFrameLocal * 3600000)) {\n          return true;\n        }\n      } else {\n        return false;\n      }\n    };\n  }\n}\n","export class Diagnosis {\n  public description: string;\n  public standard: string;\n  public code: string;\n}\n"],"names":["tslib_1.__values"],"mappings":"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"}
