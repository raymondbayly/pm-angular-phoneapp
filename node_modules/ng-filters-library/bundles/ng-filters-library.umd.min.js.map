{"version":3,"sources":["ng://ng-filters-library/lib/filters.module.ts","node_modules/tslib/tslib.es6.js","ng://ng-filters-library/lib/filter/locations/location-selector.service.ts","ng://ng-filters-library/lib/filter/model/locations.ts","ng://ng-filters-library/lib/filter/query-filters/filter-query-config.service.ts","ng://ng-filters-library/lib/filter/query-filters/filter-query-rest.service.ts","ng://ng-filters-library/lib/sort/SortEnum.ts","ng://ng-filters-library/lib/sort/sort.service.ts","ng://ng-filters-library/lib/group/warning-category-group.service.ts","ng://ng-filters-library/lib/group/hospital-los-group.service.ts","ng://ng-filters-library/lib/filter/providers/provider-filter.service.ts","ng://ng-filters-library/lib/group/provider-group.service.ts","ng://ng-filters-library/lib/group/unit-group.service.ts","ng://ng-filters-library/lib/group/facility-group.service.ts","ng://ng-filters-library/lib/group/group.service.ts","ng://ng-filters-library/lib/filter/filter.service.ts","ng://ng-filters-library/lib/filter/service-line/service-line-config.service.ts","ng://ng-filters-library/lib/filter/service-line/service-line-rest.service.ts","ng://ng-filters-library/lib/filter/service-line/service-line-filter.service.ts","ng://ng-filters-library/lib/filter/providers/providers-config.service.ts","ng://ng-filters-library/lib/filter/providers/providers-api.service.ts","ng://ng-filters-library/lib/filter/agegroups/age-groups.service.ts","ng://ng-filters-library/lib/filter/warnings/warnings-filter.service.ts","ng://ng-filters-library/lib/filter/diagnosis/diagnosis-config.service.ts","ng://ng-filters-library/lib/filter/diagnosis/diagnosis-filter.service.ts","ng://ng-filters-library/lib/filter/diagnosis/diagnosis-rest.service.ts","ng://ng-filters-library/lib/filter/warning-time-frame/warning-time-frame-filter.service.ts","ng://ng-filters-library/lib/filter/model/diagnosis.ts"],"names":["FiltersModule","NgModule","args","imports","MatCheckboxModule","BrowserModule","FormsModule","NgPipesModule","declarations","exports","__values","o","m","Symbol","iterator","i","call","next","length","value","done","LocationSelectorService","Subject","EventEmitter","prototype","checkUnitSelection","unitID","_a","tslib_1.__values","this","selectedUnits","_b","key","selectUnit","unit","indexOf","push","checkForIndeterminate","emit","facilityID","deselectUnit","index","splice","selectAllUnitsFromAFacility","facility","units","deselectAllUnitsFromAFacility","isLocationSelectionTheSame","previousUnits","found","_c","_d","u","_g","_h","_j","_k","getUnitCountForFacility","facilityId","unitCount","getLocationsToFilter","selectedLocations","facilities","foundIndeterminateFacility","_e","fId","indeterminateFacilities","setFacilityIndeterminateState","isIndeterminate","clearIndeterminateFacilities","Injectable","providedIn","Locations","FilterQueryConfigService","getFilterQueryEndPoint","filterQueryEndPoint","console","warn","setFilterQueryEndPoint","FilterQueryRestService","http","filterQueryConfig","pollInstance$","timer","getFilteredVisits","queryParamsGetter","serverFilterCriteria","get","params","getQueryParams","getFilteredVisitsInterval","pipe","switchMap","_this","Object","keys","HttpParams","hasOwnProperty","criteria","replace","append","HttpClient","RIScore","DisplayName","MedicalRecordNumber","VisitNumber","HospitalLOS","WarningSeverity","WarningDuration","SortService","sortName","SortChoices","transformer","peragraph","displayName","description","tooltip","patient","medicalRecordNumber","vnm","latestRi","admitDate","activeWarning","category","createdDate","stageSortFunction","choices","activeSortFunction","getStagedSortFunction","activeSortName","stagedSortName","_stagedSortFunction","clearSort","direction","createSortFunction","peraGraphA","peraGraphB","valueA","valueB","comparison","WarningCategoryGroupService","generateLanes","groupName","lanes","laneFunction","peraGraph","laneTitle","HospitalLosGroupService","option","losLaneMax","losIncrement","losLaneInfo","generateLosLaneFilterFunctionAndTitle","filterFunction","title","losLaneInfoFinal","minIndex","maxIndex","minVolume","min","Date","getTime","toString","maxVolume_1","current","max","ProviderFilterService","getFilterfunction","selectedProviders","prov","attendingProvider","firstName","lastName","ProviderGroupService","providerService","providersLoaded","subscribe","dependency","providers","provider","generateProviderLaneFilterFunction","UnitGroupService","locationSelectorService","loadedLocations","generateUnitLaneFilterFunction","unitName","unitId","FacilityGroupService","generateFacilitiyLaneFilterFunction","facilityName","GroupService","warningGroupService","hospitalLosGroupService","providerGroupService","facilityGroupService","unitGroupService","BehaviorSubject","groupOptions","dependencies","compileDependencies","setDefaults","combineLatest","generateGroupByOptions","options","options_1","options_1_1","options_2","options_2_1","groupsLoaded$","activeGroup","stagedGroup","groupSubject$","clearGroupBy","FilterService","filterRestService","sortService","groupService","locations","executeFilterQuery","activeFilters","stageFilter","filterName","stagingFilters","unstageFilter","getServerSideFilterFunction","thisRef","serverFilteredVisits","stageServerFilterCriteria","stagedServerFilterCriteria","serverFilterName","removeStagedServerCriteria","getStagedServerSideFilterCriteria","getActiveServerFilterCriteria","filterServiceRef","_activeServerFilterCriteria","clearAllFilters","filterSubject$","activateFilters","filter","changeGroupsClosed","executeQuery","visits","setTimeout","locationsChanged","ServiceLineConfigService","getServiceLineDescriptionsEndpoint","serviceLineDescriptionsEndpoint","setServiceLineDescriptionsEndpoint","ServiceLineRestService","serviceLineConfig","getAllServiceLineDescriptions","ServiceLineFilterService","ProvidersConfigService","getAllProvidersEndpoint","allProvidersEndpoint","setAllProvidersEndpoint","ProvidersApiService","providersConfigService","getAllProviders","AgeGroupsService","filterService","unstageAgeGroups","PEDIATRIC_GROUP","ADULT_GROUP","ALL_GROUP","allFilterFunction","adultFilterFunction","birthDate","setMilliseconds","dob","currentDate","now","getFullYear","pediatricFilterFunction","WarningsFilterService","filterID","color","discharged","DiagnosisConfigService","getDiagnosesEndpoint","diagnosesEndpoint","setDiagnosesEndpoint","DiagnosisFilterService","DiagnosisRestService","diagnosisConfigService","pollInstanceDiagnoses$","getAllDiagnoses","getAllDiagnosisInterval","WarningTimeFrameFilterService","getFilterFunction","warningTimeFrame","warningTimeFrameLocal","Diagnosis"],"mappings":"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","sourcesContent":["import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {MatCheckboxModule} from '@angular/material';\nimport {FormsModule} from '@angular/forms';\nimport {NgPipesModule} from 'ngx-pipes';\n\n@NgModule({\n  imports: [\n    MatCheckboxModule,\n    BrowserModule,\n    FormsModule,\n    NgPipesModule\n  ],\n  declarations: [\n  ],\n  exports: []\n})\nexport class FiltersModule {\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {EventEmitter, Injectable} from '@angular/core';\nimport {Facility} from 'ng-common-library/lib/model/Facility';\nimport {Unit} from 'ng-common-library/lib/model/Unit';\nimport {Locations} from '../model/locations';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationSelectorService {\n\n  public loadedLocations = new Subject<void>();\n\n  // Map of facility to indeterminate state\n  facilities: Facility[];\n  units: Unit[];\n  /** Facilities that do not have all of their units selected\n   *  This is useful when setting up the rest call\n   *  NOTE: I thought about making facilities a map and putting units\n   *       as the value, but the REST call just takes the list of facilities\n   *       and units.. so it really is all units or some units with the call.\n   */\n  indeterminateFacilities: string[];\n\n  selectAll = new EventEmitter<Facility>();\n\n  deselectAll = new EventEmitter<Facility>();\n\n  checkForIndeterminate = new EventEmitter<string>();\n\n  expandUnitsList = new EventEmitter<void>();\n\n  collapseUnitsList = new EventEmitter<void>();\n\n  selectedUnits: Unit[] = [];\n\n  previousUnits: Unit[] = [];\n\n  constructor() {\n  }\n\n  checkUnitSelection(unitID: string): boolean {\n    for (const unit of this.selectedUnits) {\n      if (unitID === unit.key.unitID) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  selectUnit(unit: Unit) {\n    if (this.selectedUnits.indexOf(unit) < 0) {\n      this.selectedUnits.push(unit);\n    }\n    this.checkForIndeterminate.emit(unit.key.facilityID);\n  }\n\n  deselectUnit(unit: Unit) {\n    const index = this.selectedUnits.indexOf(unit);\n    if (index !== -1) {\n      this.selectedUnits.splice(index, 1);\n    }\n    this.checkForIndeterminate.emit(unit.key.facilityID);\n  }\n\n  selectAllUnitsFromAFacility(facility: Facility) {\n    for (const unit of this.units) {\n      if (unit.key.facilityID === facility.facilityID && this.selectedUnits.indexOf(unit) < 0) {\n        this.selectedUnits.push(unit);\n      }\n    }\n  }\n\n  deselectAllUnitsFromAFacility(facility: Facility) {\n    for (const unit of this.units) {\n      if (unit.key.facilityID === facility.facilityID) {\n        const index = this.selectedUnits.indexOf(unit);\n        if (index !== -1) {\n          this.selectedUnits.splice(index, 1);\n        }\n      }\n    }\n  }\n\n  /** Check if previous units and selected units are the same */\n  isLocationSelectionTheSame(): boolean {\n    // quickest way to decide\n    if (this.selectedUnits.length !== this.previousUnits.length) {\n      return false;\n    }\n    // check if every unit from selected units exists in previous units\n    for (const unit of this.selectedUnits) {\n      // bool to track if a unit has been found in the other list\n      let found = false;\n      for (const u of this.previousUnits) {\n        // match on facility id and unit id\n        if (u.key.facilityID === unit.key.facilityID && u.key.unitID === unit.key.unitID) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        return false;\n      }\n    }\n    // check if every unit from previous units exists in selected units\n    for (const unit of this.previousUnits) {\n      // bool to track if a unit has been found in the other list\n      let found = false;\n      for (const u of this.selectedUnits) {\n        // match on facility id and unit id\n        if (u.key.facilityID === unit.key.facilityID && u.key.unitID === unit.key.unitID) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private getUnitCountForFacility(facilityId: string): number {\n    let unitCount = 0;\n    for (const u of this.units) {\n      if (u.key.facilityID === facilityId) {\n        unitCount++;\n      }\n    }\n    return unitCount;\n  }\n\n  /** Builds string []s for change of peragraph and FLC REST calls when filtering */\n  getLocationsToFilter(): Locations {\n\n    const selectedLocations: Locations = {facilities: [], units: []};\n    for (const u of this.selectedUnits) {\n      selectedLocations.units.push(u.key.unitID);\n      if (selectedLocations.facilities.indexOf(u.key.facilityID) < 0) {\n        selectedLocations.facilities.push(u.key.facilityID);\n      }\n    }\n\n    /**\n     * If any of the facilities in the selectedLocations are \"indeterminate\"\n     *  then we must supply the list of units. Otherwise we can specify \"*\"\n     *  for the units which makes the rest / sql calls run faster.\n     */\n    let foundIndeterminateFacility = false;\n    for (const fId of selectedLocations.facilities) {\n      if (this.indeterminateFacilities.indexOf(fId) >= 0) {\n        foundIndeterminateFacility = true;\n        // It only takes one...\n        break;\n      }\n    }\n    if (!foundIndeterminateFacility) {\n      selectedLocations.units = ['*'];\n    }\n    return selectedLocations;\n  }\n\n  public setFacilityIndeterminateState(facilityID: string, isIndeterminate: boolean): void {\n    if (isIndeterminate) {\n      this.indeterminateFacilities.push(facilityID);\n    } else {\n      if (this.indeterminateFacilities.indexOf(facilityID) >= 0) {\n        this.indeterminateFacilities.splice(this.indeterminateFacilities.indexOf(facilityID), 1);\n      }\n    }\n  }\n\n  public clearIndeterminateFacilities(): void {\n    this.indeterminateFacilities = [];\n  }\n}\n","export class Locations {\n  public facilities: string[];\n  public units: string[];\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilterQueryConfigService {\n\n  private filterQueryEndPoint = null;\n\n  getFilterQueryEndPoint(): any {\n    if (!this.filterQueryEndPoint) {\n      console.warn('Filter query endpoint is not set!');\n    }\n    return this.filterQueryEndPoint;\n  }\n\n  setFilterQueryEndPoint(value: any) {\n    this.filterQueryEndPoint = value;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {Observable, timer} from 'rxjs';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {FilterQueryConfigService} from './filter-query-config.service';\nimport {switchMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilterQueryRestService {\n\n  private pollInstance$: Observable<any>;\n\n  constructor(private http: HttpClient, private filterQueryConfig: FilterQueryConfigService) {\n    this.pollInstance$ = timer(0, 900000);\n\n  }\n\n  /**\n   * Rest call for getting filtered visits according to current criteria\n   */\n  public getFilteredVisits(queryParamsGetter: any): Observable<string[]> {\n    const serverFilterCriteria = queryParamsGetter();\n    return this.http.get<string[]>(this.filterQueryConfig.getFilterQueryEndPoint(), {params: this.getQueryParams(serverFilterCriteria)});\n  }\n\n  /**\n   * get updated filter criteria on an interval\n   */\n  public getFilteredVisitsInterval(queryParamsGetter: any) {\n    return this.pollInstance$.pipe(switchMap(\n      (() => this.getFilteredVisits(queryParamsGetter))\n    ));\n  }\n\n  /**\n   * returns the filter criteria in the form of a HttpParams object\n   */\n  getQueryParams(serverFilterCriteria: {}): HttpParams {\n    // check if object is empty\n    if (Object.keys(serverFilterCriteria).length === 0) {\n      return null;\n    } else {\n      // if not empty create params object\n      let params = new HttpParams();\n      // for every key in the object attach a list of params\n      for ( const key in serverFilterCriteria) {\n        if (serverFilterCriteria.hasOwnProperty(key)) {\n          // traverse the list of params for same key and add each one\n          for ( let criteria of serverFilterCriteria[key] ) {\n            criteria = criteria.replace(/,/g, '|');\n            params = params.append(key, criteria);\n          }\n        }\n      }\n      return params;\n    }\n  }\n\n}\n","export enum SortChoices {\n  RIScore = 'latestRi',\n  DisplayName = 'displayName',\n  MedicalRecordNumber = 'medicalRecordNumber',\n  VisitNumber = 'visitNumber',\n  HospitalLOS = 'hospitalLos',\n  WarningSeverity = 'warningSeverity',\n  WarningDuration = 'warningDuration'\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\nimport {SortChoices} from './SortEnum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SortService {\n  // sort currently applied to array view\n  public activeSortFunction: ((peraGraphA: PeraGraph, PeraGraphB: PeraGraph) => number) = null;\n\n  // sort function in sidebar -> not currently active in array view\n  private _stagedSortFunction: ((peraGraphA: PeraGraph, PeraGraphB: PeraGraph) => number) = null;\n\n  activeSortName: string = null;\n\n  stagedSortName: string = null;\n\n  nonStandardSortFunctionActive = false;\n\n  nonStandardSortFunction: ((peraGraphA: PeraGraph, PeraGraphB: PeraGraph) => number) = null;\n\n  // options of dropdown\n  choices: { value: { sortName: string, transformer: (peragraph: PeraGraph) => any }, description: string, tooltip: string }[] = [\n    {\n      value: {\n        sortName: SortChoices.DisplayName, transformer: (peragraph: PeraGraph) => {\n          return peragraph.displayName;\n        }\n      }, description: 'Patient Name', tooltip: 'Alphabetical sort by patient last name'\n    },\n    {\n      value: {\n        sortName: SortChoices.MedicalRecordNumber, transformer: (peragraph: PeraGraph) => {\n          return peragraph.patient.medicalRecordNumber;\n        }\n      }, description: 'MRN', tooltip: 'Sort graphs by the medical record number of the patient'\n    },\n    {\n      value: {\n        sortName: SortChoices.VisitNumber, transformer: (peragraph: PeraGraph) => {\n          return peragraph.vnm;\n        }\n      }, description: 'Visit Number', tooltip: 'Sort graphs by the visit number of the patient'\n    },\n    {\n      value: {\n        sortName: SortChoices.RIScore, transformer: (peragraph: PeraGraph) => {\n          return peragraph.latestRi;\n        }\n      }, description: 'RI Score', tooltip: 'Sort by Rothman Index score value'\n    },\n    {\n      value: {\n        sortName: SortChoices.HospitalLOS, transformer: (peragraph: PeraGraph) => {\n          return peragraph.admitDate;\n        }\n      }, description: 'Hospital LOS', tooltip: 'Sort by hospital length of stay'\n    },\n    {\n      value: {\n        sortName: SortChoices.WarningSeverity, transformer: (peragraph: PeraGraph) => {\n          if (peragraph.activeWarning) {\n            const category = peragraph.activeWarning.category;\n            if (category === 'V') {\n              return 4;\n            } else if (category === 'H') {\n              return 3;\n            } else if (category === 'M') {\n              return 2;\n            } else {\n              return 1;\n            }\n          }\n          return null;\n        }\n      }, description: 'Warning Severity', tooltip: 'Sort by the severity of patient warnings'\n    },\n    {\n      value: {\n        sortName: SortChoices.WarningDuration, transformer: (peragraph: PeraGraph) => {\n          if (peragraph.activeWarning) {\n            return peragraph.activeWarning.createdDate;\n          }\n          return null;\n        }\n      }, description: 'Warning Created Time', tooltip: 'Sort by warning created time'\n    }\n  ];\n\n  constructor() {\n    this.stageSortFunction(this.choices[0].value.transformer, 1, this.choices[0].value.sortName);\n    // set staged sort to active\n    this.activeSortFunction = this.getStagedSortFunction();\n    this.activeSortName = this.stagedSortName;\n  }\n\n\n  getStagedSortFunction(): (peraGraphA: PeraGraph, PeraGraphB: PeraGraph) => number {\n    return this._stagedSortFunction;\n  }\n\n  /**\n   * what to do if sidebar is destroyed\n   */\n  clearSort() {\n    this.activeSortName = null;\n    this.activeSortFunction = null;\n    this.stagedSortName = null;\n    this._stagedSortFunction = null;\n  }\n\n  /**\n   * stage sort function for application\n   */\n  stageSortFunction(transformer: (peraGraphA: PeraGraph) => any, direction: number, sortName: string) {\n    this.stagedSortName = sortName;\n    this._stagedSortFunction = this.createSortFunction(transformer, direction);\n  }\n\n  /**\n   * generates sort function from transformer function, direction, and sortName\n   * @param transformer - function to take peraGraph and return primitive value for sorting\n   * @param direction - direction of sort\n   */\n  createSortFunction(transformer: (peraGraphA: PeraGraph) => any, direction: number) {\n    return function (peraGraphA: PeraGraph, peraGraphB: PeraGraph): number {\n      // get comparable values from peragraphs to sort by\n      const valueA = transformer(peraGraphA);\n      const valueB = transformer(peraGraphB);\n      let comparison = 0;\n      // compare values and return\n      if (valueA && valueB) {\n        if (valueA > valueB) {\n          comparison = 1;\n        } if (valueA < valueB) {\n          comparison = -1;\n        }\n      } else {\n        if (valueA && !valueB) {\n          comparison = 1;\n        } else if (valueB && !valueA) {\n          comparison = -1;\n        }\n      }\n      return comparison * direction;\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {GroupOption} from './GroupOption';\nimport {PeraGraph} from 'ng-common-library';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarningCategoryGroupService implements GroupOption {\n\n  /**\n   * things that need to emit before generating the warning lanes\n   */\n  dependency = null;\n\n  constructor() { }\n\n  /**\n   * generate group choice object for facilities\n   */\n  generateLanes(): { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } {\n    return {\n      groupName: 'Warning Category',\n      lanes: [{\n        laneFunction: (peraGraph: PeraGraph) => peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'V',\n        laneTitle: 'Very High Warning'\n      },\n        {\n          laneFunction: (peraGraph: PeraGraph) => peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'H',\n          laneTitle: 'High Warning'\n        },\n        {\n          laneFunction: (peraGraph: PeraGraph) => peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'M',\n          laneTitle: 'Medium Warning'\n        },\n        {laneFunction: (peraGraph: PeraGraph) => peraGraph.activeWarning == null, laneTitle: 'No Warning'}]\n    };\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\nimport {GroupOption} from './GroupOption';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HospitalLosGroupService implements GroupOption {\n\n  /**\n   * size of LOS lane ranges\n   */\n  losIncrement = 1;\n\n  /**\n   * number of lanes LOS group by can have\n   */\n  losLaneMax = 5;\n\n  /**\n   * things that need to emit before generating the Hospital Los lanes\n   */\n  dependency = null;\n\n  constructor() { }\n\n  /**\n   * generate group choice object for facilities\n   */\n  generateLanes(): { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } {\n    const option: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } = {\n      groupName: 'Hospital LOS',\n      lanes: []\n    };\n    for (let i = 0; i < this.losLaneMax * this.losIncrement; i += this.losIncrement) {\n      const losLaneInfo = this.generateLosLaneFilterFunctionAndTitle(i, i + this.losIncrement);\n      option.lanes.push({laneFunction: losLaneInfo.filterFunction, laneTitle: losLaneInfo.title});\n    }\n    // generate catch all lane for visits older then max\n    const losLaneInfoFinal = this.generateLosLaneFilterFunctionAndTitle(this.losLaneMax * this.losIncrement);\n    option.lanes.push({laneFunction: losLaneInfoFinal.filterFunction, laneTitle: losLaneInfoFinal.title});\n    return option;\n  }\n\n  /**\n   * generate filter function and label for Hospital LOS group by\n   * @param minIndex - number of days before current time to start including graphs in this lane (inclusive)\n   * @param maxIndex - number of days before current time to stop including graphs (exclusive)\n   */\n  private generateLosLaneFilterFunctionAndTitle(minIndex: number, maxIndex: number = -1): { filterFunction: (peraGraph: PeraGraph) => boolean, title: string } {\n    const minVolume = minIndex * 86400000;\n    if (maxIndex !== -1) {\n      // if a max end of the range is included create a filtr for between max and min duration\n      const maxVolume = maxIndex * 86400000;\n      return {\n        filterFunction: function (peraGraph: PeraGraph): boolean {\n          const current = ((new Date()).getTime());\n          const min = current - minVolume;\n          const max = current - maxVolume;\n          return peraGraph.admitDate <= min && peraGraph.admitDate > max;\n        }, title: minIndex.toString() + ' - ' + maxIndex.toString() + ' days'\n      };\n    } else {\n      // create catch all if max is not included in function call\n      return {\n        filterFunction: function (peraGraph: PeraGraph): boolean {\n          const current = ((new Date()).getTime());\n          const min = current - minVolume;\n          return peraGraph.admitDate <= min;\n        }, title: minIndex.toString() + '+ days'\n      };\n    }\n  }\n\n}\n","import {EventEmitter, Injectable} from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\nimport {AttendingProvider} from 'ng-common-library/lib/model/AttendingProvider';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProviderFilterService {\n\n    // all providers\n    providers: AttendingProvider[] = [];\n\n    // dictionary of providers currently selected in sidebar\n    selectedProviders = {};\n\n    // event for letting provider filter know providers are ready\n    providersLoaded = new EventEmitter<void>();\n\n    // event for changing all checkbox values\n    // true for select\n    // false for deselect\n    toggleAll = new EventEmitter<boolean>();\n\n    constructor() {\n    }\n\n    /**\n     * closure which returns filter function\n     * had to use a closure to be able to pass in selectedProviders list into filter\n     */\n    getFilterfunction() {\n        const selectedProviders = {};\n        for (const prov in this.selectedProviders) {\n          if (prov) {\n            selectedProviders[prov] = this.selectedProviders[prov];\n          }\n        }\n        return function(peragraph: PeraGraph) {\n            return peragraph.attendingProvider && selectedProviders[peragraph.attendingProvider.firstName + peragraph.attendingProvider.lastName];\n        };\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {GroupOption} from './GroupOption';\nimport {PeraGraph} from 'ng-common-library';\nimport {AttendingProvider} from 'ng-common-library/lib/model/AttendingProvider';\nimport {ProviderFilterService} from '../filter/providers/provider-filter.service';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProviderGroupService implements GroupOption {\n\n  /**\n   * things that need to emit before generating the provider lanes\n   */\n  dependency = new Subject<void>();\n\n  constructor(private providerService: ProviderFilterService) {\n    this.providerService.providersLoaded.subscribe(() => {\n      this.dependency.next();\n    });\n  }\n\n  /**\n   * generate group choice object for facilities\n   */\n  generateLanes(): { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } {\n    const option: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } = {\n      groupName: 'Provider',\n      lanes: []\n    };\n    for (const provider of this.providerService.providers) {\n      option.lanes.push({\n        laneFunction: this.generateProviderLaneFilterFunction(provider),\n        laneTitle: provider.lastName + ', ' + provider.firstName\n      });\n    }\n    return option;\n  }\n\n  /**\n   * helper function for generating a filter function for provider groups given a provider\n   * @param provider - provider to filter for\n   */\n  private generateProviderLaneFilterFunction(provider: AttendingProvider): (peraGraph: PeraGraph) => boolean {\n    const firstName = provider.firstName;\n    const lastName = provider.lastName;\n    return function (peraGraph: PeraGraph): boolean {\n      return peraGraph.attendingProvider.firstName === firstName && peraGraph.attendingProvider.lastName === lastName;\n    };\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {GroupOption} from './GroupOption';\nimport {LocationSelectorService} from '../filter/locations/location-selector.service';\nimport {PeraGraph, Unit} from 'ng-common-library';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UnitGroupService implements GroupOption {\n\n  /**\n   * things that need to emit before generating the unit lanes\n   */\n  dependency = new Subject<void>();\n\n  constructor(private locationSelectorService: LocationSelectorService) {\n    this.locationSelectorService.loadedLocations.subscribe(() => {\n      this.dependency.next();\n    });\n  }\n\n  /**\n   * generate group choice object for facilities\n   */\n  generateLanes(): { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } {\n    const option: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } = {\n      groupName: 'Unit',\n      lanes: []\n    };\n    for (const unit of this.locationSelectorService.units) {\n      option.lanes.push({laneFunction: this.generateUnitLaneFilterFunction(unit), laneTitle: unit.displayName});\n    }\n    return option;\n  }\n\n  /**\n   * generate filter function for filtering out a group for a specific unit\n   * @param unit - unit to filter on\n   */\n  private generateUnitLaneFilterFunction(unit: Unit) {\n    const unitName = unit.displayName;\n    return function (peraGraph: PeraGraph): boolean {\n      return peraGraph.unitId === unitName;\n    };\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {GroupOption} from './GroupOption';\nimport {Facility, PeraGraph} from 'ng-common-library';\nimport {LocationSelectorService} from '../filter/locations/location-selector.service';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FacilityGroupService implements GroupOption {\n\n  /**\n   * things that need to emit before generating the facility lanes\n   */\n  dependency = new Subject<void>();\n\n  constructor(private locationSelectorService: LocationSelectorService) {\n    this.locationSelectorService.loadedLocations.subscribe(() => {\n      this.dependency.next();\n    });\n  }\n\n  /**\n   * generate group choice object for facilities\n   */\n  generateLanes(): { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } {\n    const option: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] } = {\n      groupName: 'Facility',\n      lanes: []\n    };\n    for (const facility of this.locationSelectorService.facilities) {\n      option.lanes.push({laneFunction: this.generateFacilitiyLaneFilterFunction(facility), laneTitle: facility.displayName});\n    }\n    return option;\n  }\n\n  /**\n   * generate filter function for grouping by facility\n   * @param facility - facility to filter for\n   */\n  private generateFacilitiyLaneFilterFunction(facility: Facility) {\n    const facilityName = facility.displayName;\n    return function (peraGraph: PeraGraph): boolean {\n      return peraGraph.facilityId === facilityName;\n    };\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {WarningCategoryGroupService} from './warning-category-group.service';\nimport {HospitalLosGroupService} from './hospital-los-group.service';\nimport {ProviderGroupService} from './provider-group.service';\nimport {UnitGroupService} from './unit-group.service';\nimport {FacilityGroupService} from './facility-group.service';\nimport {GroupOption} from './GroupOption';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GroupService {\n\n  /**\n   * subject used to change how many groups to be open initially after applying filtering, grouping and/or sorting\n   */\n  public changeNumberOfGroupsToShow$ = new BehaviorSubject<number>(4);\n\n  /**\n   * subject to expand groups if necessary\n   */\n  public expandGroups$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * switch to decide if it is necessary to recalculate how many groups should be closed\n   */\n  public changeGroupsClosed = false;\n\n  /**\n   * emits when it is okay to display group options\n   */\n  public groupsLoaded$ = new Subject<void>();\n\n  /**\n   * different options to group by and corresponding logic to divide graphs into groups\n   */\n  groupOptions: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] }[] = [];\n\n  /**\n   * tells the groups to update themselves\n   */\n  public groupSubject$: BehaviorSubject<{ laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] >;\n\n  /**\n   * groups active in the array view\n   */\n  activeGroup: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] };\n\n  /**\n   * groups currently selected in sidebar\n   */\n  stagedGroup: { groupName: string, lanes: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string }[] };\n\n  constructor(private warningGroupService: WarningCategoryGroupService,\n              private hospitalLosGroupService: HospitalLosGroupService,\n              private providerGroupService: ProviderGroupService,\n              private facilityGroupService: FacilityGroupService,\n              private unitGroupService: UnitGroupService) {\n    const groupOptions: GroupOption[] = [warningGroupService, hospitalLosGroupService, providerGroupService, facilityGroupService, unitGroupService];\n    const dependencies = this.compileDependencies(groupOptions);\n    // set default value of group by\n    this.setDefaults();\n    // wait for dependencies to load and then\n    combineLatest(dependencies).subscribe(() => this.generateGroupByOptions(groupOptions));\n  }\n\n  /**\n   * compiles a list of dependencies from all the Group Option classes\n   * @param options - list of Services to compile dependencies from\n   */\n  compileDependencies(options: GroupOption[]): Observable<any>[] {\n    const dependencies: Observable<any>[] = [];\n    for (const option of options) {\n        if (option.dependency && dependencies.indexOf(option.dependency) < 0) {\n          dependencies.push(option.dependency);\n        }\n    }\n    return dependencies;\n  }\n\n  /**\n   * generate filter functions and titles for all the group by options and add them to the options list\n   */\n  generateGroupByOptions(options: GroupOption[]) {\n    this.groupOptions = [];\n    for (const option of options) {\n      this.groupOptions.push(option.generateLanes());\n    }\n    this.groupsLoaded$.next();\n  }\n\n  /**\n   * set default value of group by\n   */\n  setDefaults() {\n    this.activeGroup = this.warningGroupService.generateLanes();\n    this.stagedGroup = this.warningGroupService.generateLanes();\n    this.groupSubject$ = new BehaviorSubject<{laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string}[]>(this.warningGroupService.generateLanes().lanes);\n  }\n\n  /**\n   * what to do if sidebar is destroyed\n   */\n  clearGroupBy() {\n    this.activeGroup = this.warningGroupService.generateLanes();\n    this.stagedGroup = this.warningGroupService.generateLanes();\n    this.groupSubject$.next(this.warningGroupService.generateLanes().lanes);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {PeraGraph} from 'ng-common-library';\nimport {LocationSelectorService} from './locations/location-selector.service';\nimport {Locations} from './model/locations';\nimport {FilterQueryRestService} from './query-filters/filter-query-rest.service';\nimport {SortService} from '../sort/sort.service';\nimport {SortChoices} from '../sort/SortEnum';\nimport {GroupService} from '../group/group.service';\n\n/**\n * Manages the staging filters object -> the current status of the sidebar,\n * the active filters object -> the filters currently being applied to the array view,\n * and the subject which is used to update the array view when filters are applied.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilterService {\n\n  /** BehaviorSubject for when selected locations change. */\n  public locationsChanged = new BehaviorSubject<{ locations: Locations, executeFilterQuery: boolean }>({\n    locations: new Locations(),\n    executeFilterQuery: false,\n  });\n\n  /** Filters actively applied to the array view. */\n  public activeFilters = {};\n\n  /** Filters currently selected in the sidebar but NOT applied. */\n  private stagingFilters = {};\n\n  /**\n   * visit numbers of patients filtered out by server side filters\n   */\n  public serverFilteredVisits: string[] = [];\n\n  /**\n   * name of filter for server side filters\n   */\n  private serverFilterName = 'query-filter';\n\n  /**\n   * criteria to build filter query from as currently represented in sidebar\n   */\n  private stagedServerFilterCriteria = {};\n\n  /**\n   * criteria for server side filtering currently ACTIVE in array view\n   */\n  private _activeServerFilterCriteria = {};\n\n  /** Subject which is updated when filters are applied. */\n  public filterSubject$ = new BehaviorSubject<any>(this.activeFilters);\n\n  constructor(private locationSelectorService: LocationSelectorService,\n              private filterRestService: FilterQueryRestService,\n              private sortService: SortService,\n              private groupService: GroupService) {\n  }\n\n  /**\n   * Adds a staged filter (prior to activating the filters)\n   * @param filterName Name of the filter to stage.\n   * @param filterFunction The filter function to stage.\n   */\n  stageFilter(filterName: string, filterFunction: (peragraph: PeraGraph) => boolean) {\n    this.stagingFilters[filterName] = filterFunction;\n  }\n\n  /**\n   * Removes a staged filter.\n   * @param filterName Name of filter to unstage.\n   */\n  unstageFilter(filterName: string) {\n    delete this.stagingFilters[filterName];\n  }\n\n  /**\n   * gets filter function that filters out patients based on criteria from conglomerated filter query\n   */\n  getServerSideFilterFunction() {\n    const thisRef = this;\n    return function (peragraph: PeraGraph): boolean {\n      for (const vnm of thisRef.serverFilteredVisits) {\n        if (vnm === peragraph.vnm) {\n          return true;\n        }\n      }\n      return false;\n    };\n  }\n\n  /**\n   * add filter criteria to criteria object\n   * @param criteria - array of criteria to add to filter\n   * @param title - property name of criteria on the filterCriteria object -> MUST match a\n   * QueryParam in the REST call located in common.FilterController or it won't be applied\n   */\n  stageServerFilterCriteria(criteria: Array<string>, title: string) {\n    this.stagedServerFilterCriteria[title] = criteria;\n    this.stageFilter(this.serverFilterName, this.getServerSideFilterFunction());\n  }\n\n  /**\n   * removes a criteria object from the filter criteria object\n   * if no criterion remain, the filter is removed from the staged filters\n   * @param title - name of the criteria to be removed\n   */\n  removeStagedServerCriteria(title: string) {\n    delete this.stagedServerFilterCriteria[title];\n    if (Object.keys(this.stagedServerFilterCriteria).length === 0) {\n      this.unstageFilter(this.serverFilterName);\n    }\n  }\n\n  /**\n   * return staged server side filter parameters\n   */\n  getStagedServerSideFilterCriteria() {\n    return this.stagedServerFilterCriteria;\n  }\n\n  /**\n   * returns a function which returns the current active filters at the given time\n   */\n  getActiveServerFilterCriteria(): {} {\n    const filterServiceRef = this;\n    return function (): {} {\n      return filterServiceRef._activeServerFilterCriteria;\n    };\n  }\n\n  /**\n   * what to do if sidebar is destroyed\n   */\n  clearAllFilters() {\n    this.activeFilters = {};\n    this.stagingFilters = {};\n    this.serverFilteredVisits = [];\n    this.stagedServerFilterCriteria = {};\n    this._activeServerFilterCriteria = {};\n    this.filterSubject$.next({});\n    this.groupService.clearGroupBy();\n    this.sortService.clearSort();\n  }\n\n  /**\n   * Activate the staged filters\n   *\n   * 2 seperate paths:\n   *      A. Location changes -> refresh graphs is called after changing the endpoint parameters and a variable is passed in\n   *                              to let refresh changes know if the server side filter needs to be refreshed\n   *      B. No location changes -> If the server side filtering needs to be refreshed, its REST call is initiated before client side filtering occurs,\n   *                              otherwise client side filtering occurs immediatley on existing graphs\n   */\n  activateFilters() {\n    // close appropriate groups if changing, filters, group by, or sort\n    this.groupService.changeGroupsClosed = true;\n    // set staged sort to active\n    this.sortService.activeSortFunction = this.sortService.getStagedSortFunction();\n    this.sortService.activeSortName = this.sortService.stagedSortName;\n\n    // set staged filters to active filters\n    this.activeFilters = {};\n    for (const filter in this.stagingFilters) {\n      if (this.stagingFilters.hasOwnProperty(filter)) {\n        this.activeFilters[filter] = this.stagingFilters[filter];\n      }\n    }\n    // set staged server side filtering query parameters to active\n    this._activeServerFilterCriteria = {};\n    for (const criteria in this.stagedServerFilterCriteria) {\n      if (this.stagedServerFilterCriteria.hasOwnProperty(criteria)) {\n        this._activeServerFilterCriteria[criteria] = this.stagedServerFilterCriteria[criteria];\n      }\n    }\n\n    // check if the filter query needs to be run\n    const executeQuery = this.activeFilters.hasOwnProperty(this.serverFilterName);\n\n    // Check if unit selection has changed\n    if (!this.locationSelectorService.isLocationSelectionTheSame() || this.sortService.activeSortName === SortChoices.RIScore || this.groupService.stagedGroup.groupName !== this.groupService.activeGroup.groupName) {\n      this.groupService.activeGroup = this.groupService.stagedGroup;\n      this.groupService.groupSubject$.next(this.groupService.activeGroup.lanes);\n      // get selected unit and facility ids\n      const selectedLocations: Locations = this.locationSelectorService.getLocationsToFilter();\n      // Signal that location selections have changed and whether or not to execute the filter query\n      this.locationsChanged.next({locations: selectedLocations, executeFilterQuery: executeQuery});\n    } else {\n      // if filter query needs to be executed, wait for it to return before filtering the graphs in the client\n      if (executeQuery) {\n        this.filterRestService.getFilteredVisits(this.getActiveServerFilterCriteria()).subscribe((visits: string[]) => {\n          this.serverFilteredVisits = visits;\n          this.filterSubject$.next(this.activeFilters);\n        });\n      } else {\n        // pass the filter subject with the updated filters\n        setTimeout(() => this.filterSubject$.next(this.activeFilters), 500);\n      }\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceLineConfigService {\n\n  private serviceLineDescriptionsEndpoint = null;\n\n  getServiceLineDescriptionsEndpoint(): any {\n    if (!this.serviceLineDescriptionsEndpoint) {\n      console.warn('Service Line Descriptions endpoint is not set!');\n    }\n    return this.serviceLineDescriptionsEndpoint;\n  }\n\n  setServiceLineDescriptionsEndpoint(value: any) {\n    this.serviceLineDescriptionsEndpoint = value;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {ServiceLineConfigService} from './service-line-config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceLineRestService {\n\n  constructor(private http: HttpClient, private serviceLineConfig: ServiceLineConfigService) { }\n\n  /**\n   * return all service line descriptions\n   */\n  getAllServiceLineDescriptions(): Observable<string[]> {\n    return this.http.get<string[]>(this.serviceLineConfig.getServiceLineDescriptionsEndpoint());\n  }\n}\n","import {EventEmitter, Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceLineFilterService {\n\n  toggleAll = new EventEmitter<boolean>();\n\n  constructor() { }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProvidersConfigService {\n\n  private allProvidersEndpoint = null;\n\n  public getAllProvidersEndpoint(): string {\n    if (!this.allProvidersEndpoint) {\n      console.warn('All Providers Endpoint is not set!');\n    }\n    return this.allProvidersEndpoint;\n  }\n\n  public setAllProvidersEndpoint(value: string): void {\n    this.allProvidersEndpoint = value;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {AttendingProvider} from \"ng-common-library/lib/model/AttendingProvider\";\nimport {Observable} from \"rxjs\";\nimport {ProvidersConfigService} from './providers-config.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProvidersApiService {\n\n    constructor(private http: HttpClient, private providersConfigService: ProvidersConfigService) {\n    }\n\n    getAllProviders(): Observable<AttendingProvider[]> {\n        return this.http.get<AttendingProvider[]>(this.providersConfigService.getAllProvidersEndpoint());\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\nimport {FilterService} from '../filter.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgeGroupsService {\n\n  public readonly PEDIATRIC_GROUP = 'Pediatric';\n  public readonly ADULT_GROUP = 'Adult';\n  public readonly ALL_GROUP = 'All';\n\n  constructor(private filterService: FilterService) {\n  }\n\n  public unstageAgeGroups() {\n    this.filterService.unstageFilter(this.PEDIATRIC_GROUP);\n    this.filterService.unstageFilter(this.ADULT_GROUP);\n    this.filterService.unstageFilter(this.ALL_GROUP);\n  }\n\n  /**\n   * Always returns true because we want all the patients\n   * @param peragraph - peragraph to filter\n   */\n  public allFilterFunction(peragraph: PeraGraph): boolean {\n    return true;\n  }\n\n  /**\n   * Filter out any peragraphs with patients younger than 18\n   * @param peragraph - peragraph to be filtered\n   */\n  public adultFilterFunction(peragraph: PeraGraph): boolean {\n    const birthDate: Date = new Date();\n    birthDate.setMilliseconds(peragraph.patient.dob);\n    const currentDate: Date = new Date();\n    currentDate.setMilliseconds(Date.now());\n    const age = currentDate.getFullYear() - birthDate.getFullYear();\n    return age >= 18;\n  }\n\n  /**\n   * Filter out any peragraphs with patients older than 18\n   * @param peragraph - peragraph to be filtered\n   */\n  public pediatricFilterFunction(peragraph: PeraGraph): boolean {\n    const birthDate: Date = new Date();\n    birthDate.setMilliseconds(peragraph.patient.dob);\n    const currentDate: Date = new Date();\n    currentDate.setMilliseconds(Date.now());\n    const age = currentDate.getFullYear() - birthDate.getFullYear();\n    return age < 18;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarningsFilterService {\n\n  /** Warning levels that are selected. Start with all of them. */\n  public selectedWarnings = ['warning_v', 'warning_h', 'warning_m', 'warning_none', 'warning_no_ri'];\n\n  /**\n   * Configurations for warning level filter options.\n   *\n   * Contains a filter id, the color of the warning level and a filter function for filtering out\n   * the warning if NOT selected.\n   */\n  public filterOptions = [\n    {\n      filterID: 'warning_v', color: '#D51C19',\n      filterFunction: function (peragraph: PeraGraph) {\n        return !(peragraph.activeWarning && peragraph.activeWarning.category === 'V');\n      }\n    }\n    ,\n    {\n      filterID: 'warning_h', color: '#EE834C',\n      filterFunction: function (peragraph: PeraGraph) {\n        return !(peragraph.activeWarning && peragraph.activeWarning.category === 'H');\n      }\n    },\n    {\n      filterID: 'warning_m', color: '#F6CC5D',\n      filterFunction: function (peragraph: PeraGraph) {\n        return !(peragraph.activeWarning && peragraph.activeWarning.category === 'M');\n      }\n    },\n    {\n      filterID: 'warning_none', color: '#3185B8',\n      filterFunction: function (peragraph: PeraGraph) {\n        return !(!peragraph.activeWarning && !peragraph.discharged);\n      }\n    }\n  ];\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosisConfigService {\n\n  /**\n   * class for configuring the endpoint for retrieving all diagnoses\n   */\n\n  private diagnosesEndpoint = null;\n\n  public getDiagnosesEndpoint(): string {\n    if (!this.diagnosesEndpoint) {\n      console.warn('Diagnoses endpoint is not set!');\n    }\n    return this.diagnosesEndpoint;\n  }\n\n  public setDiagnosesEndpoint(value: string): void {\n    this.diagnosesEndpoint = value;\n  }\n}\n","import {EventEmitter, Injectable} from '@angular/core';\nimport {Diagnosis} from '../model/diagnosis';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosisFilterService {\n\n  // diagnoses currently selected in sidebar\n  public selectedDiagnoses = {};\n\n  // all diagnoses to choose from\n  public diagnoses: Diagnosis[] = [];\n\n  // lets sidebar know when diagnoses have been returned from REST call\n  public diagnosesLoaded$ = new EventEmitter<void>();\n\n  // event for changing all checkbox values\n  // true for select\n  // false for deselect\n  public toggleAll = new EventEmitter<boolean>();\n\n  constructor() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {Diagnosis} from '../model/diagnosis';\nimport {HttpClient} from '@angular/common/http';\nimport {DiagnosisConfigService} from './diagnosis-config.service';\nimport {Observable, timer} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosisRestService {\n\n  private pollInstanceDiagnoses$: Observable<any>;\n\n  constructor(private http: HttpClient, private diagnosisConfigService: DiagnosisConfigService) {\n    this.pollInstanceDiagnoses$ = timer(0, 90000);\n  }\n\n  /**\n   * returns an observable with all diagnoses\n   */\n  getAllDiagnoses(): Observable<Diagnosis[]> {\n    return this.http.get<Diagnosis[]>(this.diagnosisConfigService.getDiagnosesEndpoint() + '/all');\n  }\n\n  /**\n   * returns an observable that broadcasts all active diagnoses on an interval\n   */\n  getAllDiagnosisInterval(): Observable<any> {\n    return this.pollInstanceDiagnoses$.pipe(\n      switchMap(() => this.getAllDiagnoses())\n    );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {PeraGraph} from 'ng-common-library';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarningTimeFrameFilterService {\n\n  constructor() { }\n\n  /**\n   * filters out graphs with warnings older than warning timeframe limit\n   * @param warningTimeFrame - # of hours to check back for warning activity\n   */\n  getFilterFunction(warningTimeFrame: number) {\n    const warningTimeFrameLocal = warningTimeFrame;\n    return function (peraGraph: PeraGraph): boolean {\n      if (peraGraph.activeWarning && peraGraph.activeWarning.createdDate) {\n        // check if date warning was created is older then the warning time frame limit\n        if (peraGraph.activeWarning.createdDate >= ((new Date()).getTime()) - (warningTimeFrameLocal * 3600000)) {\n          return true;\n        }\n      } else {\n        return false;\n      }\n    };\n  }\n}\n","export class Diagnosis {\n  public description: string;\n  public standard: string;\n  public code: string;\n}\n"]}