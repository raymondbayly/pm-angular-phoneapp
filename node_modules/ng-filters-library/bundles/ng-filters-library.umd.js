(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/material'), require('@angular/forms'), require('ngx-pipes'), require('@angular/common/http'), require('rxjs'), require('rxjs/operators'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ng-filters-library', ['exports', '@angular/platform-browser', '@angular/material', '@angular/forms', 'ngx-pipes', '@angular/common/http', 'rxjs', 'rxjs/operators', '@angular/core'], factory) :
    (factory((global['ng-filters-library'] = {}),global.ng.platformBrowser,global.ng.material,global.ng.forms,global.ngxPipes,global.ng.common.http,global.rxjs,global.rxjs.operators,global.ng.core));
}(this, (function (exports,platformBrowser,material,forms,ngxPipes,i1,rxjs,operators,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FiltersModule = (function () {
        function FiltersModule() {
        }
        FiltersModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            material.MatCheckboxModule,
                            platformBrowser.BrowserModule,
                            forms.FormsModule,
                            ngxPipes.NgPipesModule
                        ],
                        declarations: [],
                        exports: []
                    },] }
        ];
        return FiltersModule;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LocationSelectorService = (function () {
        function LocationSelectorService() {
            this.loadedLocations = new rxjs.Subject();
            this.selectAll = new i0.EventEmitter();
            this.deselectAll = new i0.EventEmitter();
            this.checkForIndeterminate = new i0.EventEmitter();
            this.expandUnitsList = new i0.EventEmitter();
            this.collapseUnitsList = new i0.EventEmitter();
            this.selectedUnits = [];
            this.previousUnits = [];
        }
        /**
         * @param {?} unitID
         * @return {?}
         */
        LocationSelectorService.prototype.checkUnitSelection = /**
         * @param {?} unitID
         * @return {?}
         */
            function (unitID) {
                try {
                    for (var _a = __values(this.selectedUnits), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var unit = _b.value;
                        if (unitID === unit.key.unitID) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _c;
            };
        /**
         * @param {?} unit
         * @return {?}
         */
        LocationSelectorService.prototype.selectUnit = /**
         * @param {?} unit
         * @return {?}
         */
            function (unit) {
                if (this.selectedUnits.indexOf(unit) < 0) {
                    this.selectedUnits.push(unit);
                }
                this.checkForIndeterminate.emit(unit.key.facilityID);
            };
        /**
         * @param {?} unit
         * @return {?}
         */
        LocationSelectorService.prototype.deselectUnit = /**
         * @param {?} unit
         * @return {?}
         */
            function (unit) {
                /** @type {?} */
                var index = this.selectedUnits.indexOf(unit);
                if (index !== -1) {
                    this.selectedUnits.splice(index, 1);
                }
                this.checkForIndeterminate.emit(unit.key.facilityID);
            };
        /**
         * @param {?} facility
         * @return {?}
         */
        LocationSelectorService.prototype.selectAllUnitsFromAFacility = /**
         * @param {?} facility
         * @return {?}
         */
            function (facility) {
                try {
                    for (var _a = __values(this.units), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var unit = _b.value;
                        if (unit.key.facilityID === facility.facilityID && this.selectedUnits.indexOf(unit) < 0) {
                            this.selectedUnits.push(unit);
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                var e_2, _c;
            };
        /**
         * @param {?} facility
         * @return {?}
         */
        LocationSelectorService.prototype.deselectAllUnitsFromAFacility = /**
         * @param {?} facility
         * @return {?}
         */
            function (facility) {
                try {
                    for (var _a = __values(this.units), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var unit = _b.value;
                        if (unit.key.facilityID === facility.facilityID) {
                            /** @type {?} */
                            var index = this.selectedUnits.indexOf(unit);
                            if (index !== -1) {
                                this.selectedUnits.splice(index, 1);
                            }
                        }
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                var e_3, _c;
            };
        /** Check if previous units and selected units are the same */
        /**
         * Check if previous units and selected units are the same
         * @return {?}
         */
        LocationSelectorService.prototype.isLocationSelectionTheSame = /**
         * Check if previous units and selected units are the same
         * @return {?}
         */
            function () {
                // quickest way to decide
                if (this.selectedUnits.length !== this.previousUnits.length) {
                    return false;
                }
                try {
                    // check if every unit from selected units exists in previous units
                    for (var _a = __values(this.selectedUnits), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var unit = _b.value;
                        /** @type {?} */
                        var found = false;
                        try {
                            for (var _c = __values(this.previousUnits), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var u = _d.value;
                                // match on facility id and unit id
                                if (u.key.facilityID === unit.key.facilityID && u.key.unitID === unit.key.unitID) {
                                    found = true;
                                    break;
                                }
                            }
                        }
                        catch (e_4_1) {
                            e_4 = { error: e_4_1 };
                        }
                        finally {
                            try {
                                if (_d && !_d.done && (_e = _c.return))
                                    _e.call(_c);
                            }
                            finally {
                                if (e_4)
                                    throw e_4.error;
                            }
                        }
                        if (!found) {
                            return false;
                        }
                    }
                }
                catch (e_5_1) {
                    e_5 = { error: e_5_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_f = _a.return))
                            _f.call(_a);
                    }
                    finally {
                        if (e_5)
                            throw e_5.error;
                    }
                }
                try {
                    // check if every unit from previous units exists in selected units
                    for (var _g = __values(this.previousUnits), _h = _g.next(); !_h.done; _h = _g.next()) {
                        var unit = _h.value;
                        /** @type {?} */
                        var found = false;
                        try {
                            for (var _j = __values(this.selectedUnits), _k = _j.next(); !_k.done; _k = _j.next()) {
                                var u = _k.value;
                                // match on facility id and unit id
                                if (u.key.facilityID === unit.key.facilityID && u.key.unitID === unit.key.unitID) {
                                    found = true;
                                    break;
                                }
                            }
                        }
                        catch (e_6_1) {
                            e_6 = { error: e_6_1 };
                        }
                        finally {
                            try {
                                if (_k && !_k.done && (_l = _j.return))
                                    _l.call(_j);
                            }
                            finally {
                                if (e_6)
                                    throw e_6.error;
                            }
                        }
                        if (!found) {
                            return false;
                        }
                    }
                }
                catch (e_7_1) {
                    e_7 = { error: e_7_1 };
                }
                finally {
                    try {
                        if (_h && !_h.done && (_m = _g.return))
                            _m.call(_g);
                    }
                    finally {
                        if (e_7)
                            throw e_7.error;
                    }
                }
                return true;
                var e_5, _f, e_4, _e, e_7, _m, e_6, _l;
            };
        /**
         * @param {?} facilityId
         * @return {?}
         */
        LocationSelectorService.prototype.getUnitCountForFacility = /**
         * @param {?} facilityId
         * @return {?}
         */
            function (facilityId) {
                /** @type {?} */
                var unitCount = 0;
                try {
                    for (var _a = __values(this.units), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var u = _b.value;
                        if (u.key.facilityID === facilityId) {
                            unitCount++;
                        }
                    }
                }
                catch (e_8_1) {
                    e_8 = { error: e_8_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_8)
                            throw e_8.error;
                    }
                }
                return unitCount;
                var e_8, _c;
            };
        /** Builds string []s for change of peragraph and FLC REST calls when filtering */
        /**
         * Builds string []s for change of peragraph and FLC REST calls when filtering
         * @return {?}
         */
        LocationSelectorService.prototype.getLocationsToFilter = /**
         * Builds string []s for change of peragraph and FLC REST calls when filtering
         * @return {?}
         */
            function () {
                /** @type {?} */
                var selectedLocations = { facilities: [], units: [] };
                try {
                    for (var _a = __values(this.selectedUnits), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var u = _b.value;
                        selectedLocations.units.push(u.key.unitID);
                        if (selectedLocations.facilities.indexOf(u.key.facilityID) < 0) {
                            selectedLocations.facilities.push(u.key.facilityID);
                        }
                    }
                }
                catch (e_9_1) {
                    e_9 = { error: e_9_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_9)
                            throw e_9.error;
                    }
                }
                /** *
                 * If any of the facilities in the selectedLocations are "indeterminate"
                 *  then we must supply the list of units. Otherwise we can specify "*"
                 *  for the units which makes the rest / sql calls run faster.
                  @type {?} */
                var foundIndeterminateFacility = false;
                try {
                    for (var _d = __values(selectedLocations.facilities), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var fId = _e.value;
                        if (this.indeterminateFacilities.indexOf(fId) >= 0) {
                            foundIndeterminateFacility = true;
                            // It only takes one...
                            break;
                        }
                    }
                }
                catch (e_10_1) {
                    e_10 = { error: e_10_1 };
                }
                finally {
                    try {
                        if (_e && !_e.done && (_f = _d.return))
                            _f.call(_d);
                    }
                    finally {
                        if (e_10)
                            throw e_10.error;
                    }
                }
                if (!foundIndeterminateFacility) {
                    selectedLocations.units = ['*'];
                }
                return selectedLocations;
                var e_9, _c, e_10, _f;
            };
        /**
         * @param {?} facilityID
         * @param {?} isIndeterminate
         * @return {?}
         */
        LocationSelectorService.prototype.setFacilityIndeterminateState = /**
         * @param {?} facilityID
         * @param {?} isIndeterminate
         * @return {?}
         */
            function (facilityID, isIndeterminate) {
                if (isIndeterminate) {
                    this.indeterminateFacilities.push(facilityID);
                }
                else {
                    if (this.indeterminateFacilities.indexOf(facilityID) >= 0) {
                        this.indeterminateFacilities.splice(this.indeterminateFacilities.indexOf(facilityID), 1);
                    }
                }
            };
        /**
         * @return {?}
         */
        LocationSelectorService.prototype.clearIndeterminateFacilities = /**
         * @return {?}
         */
            function () {
                this.indeterminateFacilities = [];
            };
        LocationSelectorService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LocationSelectorService.ctorParameters = function () { return []; };
        /** @nocollapse */ LocationSelectorService.ngInjectableDef = i0.defineInjectable({ factory: function LocationSelectorService_Factory() { return new LocationSelectorService(); }, token: LocationSelectorService, providedIn: "root" });
        return LocationSelectorService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Locations = (function () {
        function Locations() {
        }
        return Locations;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FilterQueryConfigService = (function () {
        function FilterQueryConfigService() {
            this.filterQueryEndPoint = null;
        }
        /**
         * @return {?}
         */
        FilterQueryConfigService.prototype.getFilterQueryEndPoint = /**
         * @return {?}
         */
            function () {
                if (!this.filterQueryEndPoint) {
                    console.warn('Filter query endpoint is not set!');
                }
                return this.filterQueryEndPoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FilterQueryConfigService.prototype.setFilterQueryEndPoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.filterQueryEndPoint = value;
            };
        FilterQueryConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ FilterQueryConfigService.ngInjectableDef = i0.defineInjectable({ factory: function FilterQueryConfigService_Factory() { return new FilterQueryConfigService(); }, token: FilterQueryConfigService, providedIn: "root" });
        return FilterQueryConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FilterQueryRestService = (function () {
        function FilterQueryRestService(http, filterQueryConfig) {
            this.http = http;
            this.filterQueryConfig = filterQueryConfig;
            this.pollInstance$ = rxjs.timer(0, 900000);
        }
        /**
         * Rest call for getting filtered visits according to current criteria
         * @param {?} queryParamsGetter
         * @return {?}
         */
        FilterQueryRestService.prototype.getFilteredVisits = /**
         * Rest call for getting filtered visits according to current criteria
         * @param {?} queryParamsGetter
         * @return {?}
         */
            function (queryParamsGetter) {
                /** @type {?} */
                var serverFilterCriteria = queryParamsGetter();
                return this.http.get(this.filterQueryConfig.getFilterQueryEndPoint(), { params: this.getQueryParams(serverFilterCriteria) });
            };
        /**
         * get updated filter criteria on an interval
         * @param {?} queryParamsGetter
         * @return {?}
         */
        FilterQueryRestService.prototype.getFilteredVisitsInterval = /**
         * get updated filter criteria on an interval
         * @param {?} queryParamsGetter
         * @return {?}
         */
            function (queryParamsGetter) {
                var _this = this;
                return this.pollInstance$.pipe(operators.switchMap((function () { return _this.getFilteredVisits(queryParamsGetter); })));
            };
        /**
         * returns the filter criteria in the form of a HttpParams object
         */
        /**
         * returns the filter criteria in the form of a HttpParams object
         * @param {?} serverFilterCriteria
         * @return {?}
         */
        FilterQueryRestService.prototype.getQueryParams = /**
         * returns the filter criteria in the form of a HttpParams object
         * @param {?} serverFilterCriteria
         * @return {?}
         */
            function (serverFilterCriteria) {
                // check if object is empty
                if (Object.keys(serverFilterCriteria).length === 0) {
                    return null;
                }
                else {
                    /** @type {?} */
                    var params = new i1.HttpParams();
                    // for every key in the object attach a list of params
                    for (var key in serverFilterCriteria) {
                        if (serverFilterCriteria.hasOwnProperty(key)) {
                            try {
                                // traverse the list of params for same key and add each one
                                for (var _a = __values(serverFilterCriteria[key]), _b = _a.next(); !_b.done; _b = _a.next()) {
                                    var criteria = _b.value;
                                    criteria = criteria.replace(/,/g, '|');
                                    params = params.append(key, criteria);
                                }
                            }
                            catch (e_1_1) {
                                e_1 = { error: e_1_1 };
                            }
                            finally {
                                try {
                                    if (_b && !_b.done && (_c = _a.return))
                                        _c.call(_a);
                                }
                                finally {
                                    if (e_1)
                                        throw e_1.error;
                                }
                            }
                        }
                    }
                    return params;
                }
                var e_1, _c;
            };
        FilterQueryRestService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FilterQueryRestService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: FilterQueryConfigService }
            ];
        };
        /** @nocollapse */ FilterQueryRestService.ngInjectableDef = i0.defineInjectable({ factory: function FilterQueryRestService_Factory() { return new FilterQueryRestService(i0.inject(i1.HttpClient), i0.inject(FilterQueryConfigService)); }, token: FilterQueryRestService, providedIn: "root" });
        return FilterQueryRestService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var SortChoices = {
        RIScore: 'latestRi',
        DisplayName: 'displayName',
        MedicalRecordNumber: 'medicalRecordNumber',
        VisitNumber: 'visitNumber',
        HospitalLOS: 'hospitalLos',
        WarningSeverity: 'warningSeverity',
        WarningDuration: 'warningDuration',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SortService = (function () {
        function SortService() {
            this.activeSortFunction = null;
            this._stagedSortFunction = null;
            this.activeSortName = null;
            this.stagedSortName = null;
            this.nonStandardSortFunctionActive = false;
            this.nonStandardSortFunction = null;
            // options of dropdown
            this.choices = [
                {
                    value: {
                        sortName: SortChoices.DisplayName, transformer: function (peragraph) {
                            return peragraph.displayName;
                        }
                    }, description: 'Patient Name', tooltip: 'Alphabetical sort by patient last name'
                },
                {
                    value: {
                        sortName: SortChoices.MedicalRecordNumber, transformer: function (peragraph) {
                            return peragraph.patient.medicalRecordNumber;
                        }
                    }, description: 'MRN', tooltip: 'Sort graphs by the medical record number of the patient'
                },
                {
                    value: {
                        sortName: SortChoices.VisitNumber, transformer: function (peragraph) {
                            return peragraph.vnm;
                        }
                    }, description: 'Visit Number', tooltip: 'Sort graphs by the visit number of the patient'
                },
                {
                    value: {
                        sortName: SortChoices.RIScore, transformer: function (peragraph) {
                            return peragraph.latestRi;
                        }
                    }, description: 'RI Score', tooltip: 'Sort by Rothman Index score value'
                },
                {
                    value: {
                        sortName: SortChoices.HospitalLOS, transformer: function (peragraph) {
                            return peragraph.admitDate;
                        }
                    }, description: 'Hospital LOS', tooltip: 'Sort by hospital length of stay'
                },
                {
                    value: {
                        sortName: SortChoices.WarningSeverity, transformer: function (peragraph) {
                            if (peragraph.activeWarning) {
                                /** @type {?} */
                                var category = peragraph.activeWarning.category;
                                if (category === 'V') {
                                    return 4;
                                }
                                else if (category === 'H') {
                                    return 3;
                                }
                                else if (category === 'M') {
                                    return 2;
                                }
                                else {
                                    return 1;
                                }
                            }
                            return null;
                        }
                    }, description: 'Warning Severity', tooltip: 'Sort by the severity of patient warnings'
                },
                {
                    value: {
                        sortName: SortChoices.WarningDuration, transformer: function (peragraph) {
                            if (peragraph.activeWarning) {
                                return peragraph.activeWarning.createdDate;
                            }
                            return null;
                        }
                    }, description: 'Warning Created Time', tooltip: 'Sort by warning created time'
                }
            ];
            this.stageSortFunction(this.choices[0].value.transformer, 1, this.choices[0].value.sortName);
            // set staged sort to active
            this.activeSortFunction = this.getStagedSortFunction();
            this.activeSortName = this.stagedSortName;
        }
        /**
         * @return {?}
         */
        SortService.prototype.getStagedSortFunction = /**
         * @return {?}
         */
            function () {
                return this._stagedSortFunction;
            };
        /**
         * what to do if sidebar is destroyed
         */
        /**
         * what to do if sidebar is destroyed
         * @return {?}
         */
        SortService.prototype.clearSort = /**
         * what to do if sidebar is destroyed
         * @return {?}
         */
            function () {
                this.activeSortName = null;
                this.activeSortFunction = null;
                this.stagedSortName = null;
                this._stagedSortFunction = null;
            };
        /**
         * stage sort function for application
         */
        /**
         * stage sort function for application
         * @param {?} transformer
         * @param {?} direction
         * @param {?} sortName
         * @return {?}
         */
        SortService.prototype.stageSortFunction = /**
         * stage sort function for application
         * @param {?} transformer
         * @param {?} direction
         * @param {?} sortName
         * @return {?}
         */
            function (transformer, direction, sortName) {
                this.stagedSortName = sortName;
                this._stagedSortFunction = this.createSortFunction(transformer, direction);
            };
        /**
         * generates sort function from transformer function, direction, and sortName
         * @param transformer - function to take peraGraph and return primitive value for sorting
         * @param direction - direction of sort
         */
        /**
         * generates sort function from transformer function, direction, and sortName
         * @param {?} transformer - function to take peraGraph and return primitive value for sorting
         * @param {?} direction - direction of sort
         * @return {?}
         */
        SortService.prototype.createSortFunction = /**
         * generates sort function from transformer function, direction, and sortName
         * @param {?} transformer - function to take peraGraph and return primitive value for sorting
         * @param {?} direction - direction of sort
         * @return {?}
         */
            function (transformer, direction) {
                return function (peraGraphA, peraGraphB) {
                    /** @type {?} */
                    var valueA = transformer(peraGraphA);
                    /** @type {?} */
                    var valueB = transformer(peraGraphB);
                    /** @type {?} */
                    var comparison = 0;
                    // compare values and return
                    if (valueA && valueB) {
                        if (valueA > valueB) {
                            comparison = 1;
                        }
                        if (valueA < valueB) {
                            comparison = -1;
                        }
                    }
                    else {
                        if (valueA && !valueB) {
                            comparison = 1;
                        }
                        else if (valueB && !valueA) {
                            comparison = -1;
                        }
                    }
                    return comparison * direction;
                };
            };
        SortService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        SortService.ctorParameters = function () { return []; };
        /** @nocollapse */ SortService.ngInjectableDef = i0.defineInjectable({ factory: function SortService_Factory() { return new SortService(); }, token: SortService, providedIn: "root" });
        return SortService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var WarningCategoryGroupService = (function () {
        function WarningCategoryGroupService() {
            /**
             * things that need to emit before generating the warning lanes
             */
            this.dependency = null;
        }
        /**
         * generate group choice object for facilities
         */
        /**
         * generate group choice object for facilities
         * @return {?}
         */
        WarningCategoryGroupService.prototype.generateLanes = /**
         * generate group choice object for facilities
         * @return {?}
         */
            function () {
                return {
                    groupName: 'Warning Category',
                    lanes: [{
                            laneFunction: function (peraGraph) { return peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'V'; },
                            laneTitle: 'Very High Warning'
                        },
                        {
                            laneFunction: function (peraGraph) { return peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'H'; },
                            laneTitle: 'High Warning'
                        },
                        {
                            laneFunction: function (peraGraph) { return peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'M'; },
                            laneTitle: 'Medium Warning'
                        },
                        { laneFunction: function (peraGraph) { return peraGraph.activeWarning == null; }, laneTitle: 'No Warning' }]
                };
            };
        WarningCategoryGroupService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        WarningCategoryGroupService.ctorParameters = function () { return []; };
        /** @nocollapse */ WarningCategoryGroupService.ngInjectableDef = i0.defineInjectable({ factory: function WarningCategoryGroupService_Factory() { return new WarningCategoryGroupService(); }, token: WarningCategoryGroupService, providedIn: "root" });
        return WarningCategoryGroupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var HospitalLosGroupService = (function () {
        function HospitalLosGroupService() {
            /**
             * size of LOS lane ranges
             */
            this.losIncrement = 1;
            /**
             * number of lanes LOS group by can have
             */
            this.losLaneMax = 5;
            /**
             * things that need to emit before generating the Hospital Los lanes
             */
            this.dependency = null;
        }
        /**
         * generate group choice object for facilities
         */
        /**
         * generate group choice object for facilities
         * @return {?}
         */
        HospitalLosGroupService.prototype.generateLanes = /**
         * generate group choice object for facilities
         * @return {?}
         */
            function () {
                /** @type {?} */
                var option = {
                    groupName: 'Hospital LOS',
                    lanes: []
                };
                for (var i = 0; i < this.losLaneMax * this.losIncrement; i += this.losIncrement) {
                    /** @type {?} */
                    var losLaneInfo = this.generateLosLaneFilterFunctionAndTitle(i, i + this.losIncrement);
                    option.lanes.push({ laneFunction: losLaneInfo.filterFunction, laneTitle: losLaneInfo.title });
                }
                /** @type {?} */
                var losLaneInfoFinal = this.generateLosLaneFilterFunctionAndTitle(this.losLaneMax * this.losIncrement);
                option.lanes.push({ laneFunction: losLaneInfoFinal.filterFunction, laneTitle: losLaneInfoFinal.title });
                return option;
            };
        /**
         * generate filter function and label for Hospital LOS group by
         * @param {?} minIndex - number of days before current time to start including graphs in this lane (inclusive)
         * @param {?=} maxIndex - number of days before current time to stop including graphs (exclusive)
         * @return {?}
         */
        HospitalLosGroupService.prototype.generateLosLaneFilterFunctionAndTitle = /**
         * generate filter function and label for Hospital LOS group by
         * @param {?} minIndex - number of days before current time to start including graphs in this lane (inclusive)
         * @param {?=} maxIndex - number of days before current time to stop including graphs (exclusive)
         * @return {?}
         */
            function (minIndex, maxIndex) {
                if (maxIndex === void 0) {
                    maxIndex = -1;
                }
                /** @type {?} */
                var minVolume = minIndex * 86400000;
                if (maxIndex !== -1) {
                    /** @type {?} */
                    var maxVolume_1 = maxIndex * 86400000;
                    return {
                        filterFunction: function (peraGraph) {
                            /** @type {?} */
                            var current = ((new Date()).getTime());
                            /** @type {?} */
                            var min = current - minVolume;
                            /** @type {?} */
                            var max = current - maxVolume_1;
                            return peraGraph.admitDate <= min && peraGraph.admitDate > max;
                        }, title: minIndex.toString() + ' - ' + maxIndex.toString() + ' days'
                    };
                }
                else {
                    // create catch all if max is not included in function call
                    return {
                        filterFunction: function (peraGraph) {
                            /** @type {?} */
                            var current = ((new Date()).getTime());
                            /** @type {?} */
                            var min = current - minVolume;
                            return peraGraph.admitDate <= min;
                        }, title: minIndex.toString() + '+ days'
                    };
                }
            };
        HospitalLosGroupService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        HospitalLosGroupService.ctorParameters = function () { return []; };
        /** @nocollapse */ HospitalLosGroupService.ngInjectableDef = i0.defineInjectable({ factory: function HospitalLosGroupService_Factory() { return new HospitalLosGroupService(); }, token: HospitalLosGroupService, providedIn: "root" });
        return HospitalLosGroupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ProviderFilterService = (function () {
        function ProviderFilterService() {
            // all providers
            this.providers = [];
            // dictionary of providers currently selected in sidebar
            this.selectedProviders = {};
            // event for letting provider filter know providers are ready
            this.providersLoaded = new i0.EventEmitter();
            // event for changing all checkbox values
            // true for select
            // false for deselect
            this.toggleAll = new i0.EventEmitter();
        }
        /**
         * closure which returns filter function
         * had to use a closure to be able to pass in selectedProviders list into filter
         */
        /**
         * closure which returns filter function
         * had to use a closure to be able to pass in selectedProviders list into filter
         * @return {?}
         */
        ProviderFilterService.prototype.getFilterfunction = /**
         * closure which returns filter function
         * had to use a closure to be able to pass in selectedProviders list into filter
         * @return {?}
         */
            function () {
                /** @type {?} */
                var selectedProviders = {};
                for (var prov in this.selectedProviders) {
                    if (prov) {
                        selectedProviders[prov] = this.selectedProviders[prov];
                    }
                }
                return function (peragraph) {
                    return peragraph.attendingProvider && selectedProviders[peragraph.attendingProvider.firstName + peragraph.attendingProvider.lastName];
                };
            };
        ProviderFilterService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ProviderFilterService.ctorParameters = function () { return []; };
        /** @nocollapse */ ProviderFilterService.ngInjectableDef = i0.defineInjectable({ factory: function ProviderFilterService_Factory() { return new ProviderFilterService(); }, token: ProviderFilterService, providedIn: "root" });
        return ProviderFilterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ProviderGroupService = (function () {
        function ProviderGroupService(providerService) {
            var _this = this;
            this.providerService = providerService;
            /**
             * things that need to emit before generating the provider lanes
             */
            this.dependency = new rxjs.Subject();
            this.providerService.providersLoaded.subscribe(function () {
                _this.dependency.next();
            });
        }
        /**
         * generate group choice object for facilities
         */
        /**
         * generate group choice object for facilities
         * @return {?}
         */
        ProviderGroupService.prototype.generateLanes = /**
         * generate group choice object for facilities
         * @return {?}
         */
            function () {
                /** @type {?} */
                var option = {
                    groupName: 'Provider',
                    lanes: []
                };
                try {
                    for (var _a = __values(this.providerService.providers), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var provider = _b.value;
                        option.lanes.push({
                            laneFunction: this.generateProviderLaneFilterFunction(provider),
                            laneTitle: provider.lastName + ', ' + provider.firstName
                        });
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return option;
                var e_1, _c;
            };
        /**
         * helper function for generating a filter function for provider groups given a provider
         * @param {?} provider - provider to filter for
         * @return {?}
         */
        ProviderGroupService.prototype.generateProviderLaneFilterFunction = /**
         * helper function for generating a filter function for provider groups given a provider
         * @param {?} provider - provider to filter for
         * @return {?}
         */
            function (provider) {
                /** @type {?} */
                var firstName = provider.firstName;
                /** @type {?} */
                var lastName = provider.lastName;
                return function (peraGraph) {
                    return peraGraph.attendingProvider.firstName === firstName && peraGraph.attendingProvider.lastName === lastName;
                };
            };
        ProviderGroupService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ProviderGroupService.ctorParameters = function () {
            return [
                { type: ProviderFilterService }
            ];
        };
        /** @nocollapse */ ProviderGroupService.ngInjectableDef = i0.defineInjectable({ factory: function ProviderGroupService_Factory() { return new ProviderGroupService(i0.inject(ProviderFilterService)); }, token: ProviderGroupService, providedIn: "root" });
        return ProviderGroupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var UnitGroupService = (function () {
        function UnitGroupService(locationSelectorService) {
            var _this = this;
            this.locationSelectorService = locationSelectorService;
            /**
             * things that need to emit before generating the unit lanes
             */
            this.dependency = new rxjs.Subject();
            this.locationSelectorService.loadedLocations.subscribe(function () {
                _this.dependency.next();
            });
        }
        /**
         * generate group choice object for facilities
         */
        /**
         * generate group choice object for facilities
         * @return {?}
         */
        UnitGroupService.prototype.generateLanes = /**
         * generate group choice object for facilities
         * @return {?}
         */
            function () {
                /** @type {?} */
                var option = {
                    groupName: 'Unit',
                    lanes: []
                };
                try {
                    for (var _a = __values(this.locationSelectorService.units), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var unit = _b.value;
                        option.lanes.push({ laneFunction: this.generateUnitLaneFilterFunction(unit), laneTitle: unit.displayName });
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return option;
                var e_1, _c;
            };
        /**
         * generate filter function for filtering out a group for a specific unit
         * @param {?} unit - unit to filter on
         * @return {?}
         */
        UnitGroupService.prototype.generateUnitLaneFilterFunction = /**
         * generate filter function for filtering out a group for a specific unit
         * @param {?} unit - unit to filter on
         * @return {?}
         */
            function (unit) {
                /** @type {?} */
                var unitName = unit.displayName;
                return function (peraGraph) {
                    return peraGraph.unitId === unitName;
                };
            };
        UnitGroupService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        UnitGroupService.ctorParameters = function () {
            return [
                { type: LocationSelectorService }
            ];
        };
        /** @nocollapse */ UnitGroupService.ngInjectableDef = i0.defineInjectable({ factory: function UnitGroupService_Factory() { return new UnitGroupService(i0.inject(LocationSelectorService)); }, token: UnitGroupService, providedIn: "root" });
        return UnitGroupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FacilityGroupService = (function () {
        function FacilityGroupService(locationSelectorService) {
            var _this = this;
            this.locationSelectorService = locationSelectorService;
            /**
             * things that need to emit before generating the facility lanes
             */
            this.dependency = new rxjs.Subject();
            this.locationSelectorService.loadedLocations.subscribe(function () {
                _this.dependency.next();
            });
        }
        /**
         * generate group choice object for facilities
         */
        /**
         * generate group choice object for facilities
         * @return {?}
         */
        FacilityGroupService.prototype.generateLanes = /**
         * generate group choice object for facilities
         * @return {?}
         */
            function () {
                /** @type {?} */
                var option = {
                    groupName: 'Facility',
                    lanes: []
                };
                try {
                    for (var _a = __values(this.locationSelectorService.facilities), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var facility = _b.value;
                        option.lanes.push({ laneFunction: this.generateFacilitiyLaneFilterFunction(facility), laneTitle: facility.displayName });
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return option;
                var e_1, _c;
            };
        /**
         * generate filter function for grouping by facility
         * @param {?} facility - facility to filter for
         * @return {?}
         */
        FacilityGroupService.prototype.generateFacilitiyLaneFilterFunction = /**
         * generate filter function for grouping by facility
         * @param {?} facility - facility to filter for
         * @return {?}
         */
            function (facility) {
                /** @type {?} */
                var facilityName = facility.displayName;
                return function (peraGraph) {
                    return peraGraph.facilityId === facilityName;
                };
            };
        FacilityGroupService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FacilityGroupService.ctorParameters = function () {
            return [
                { type: LocationSelectorService }
            ];
        };
        /** @nocollapse */ FacilityGroupService.ngInjectableDef = i0.defineInjectable({ factory: function FacilityGroupService_Factory() { return new FacilityGroupService(i0.inject(LocationSelectorService)); }, token: FacilityGroupService, providedIn: "root" });
        return FacilityGroupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var GroupService = (function () {
        function GroupService(warningGroupService, hospitalLosGroupService, providerGroupService, facilityGroupService, unitGroupService) {
            var _this = this;
            this.warningGroupService = warningGroupService;
            this.hospitalLosGroupService = hospitalLosGroupService;
            this.providerGroupService = providerGroupService;
            this.facilityGroupService = facilityGroupService;
            this.unitGroupService = unitGroupService;
            /**
             * subject used to change how many groups to be open initially after applying filtering, grouping and/or sorting
             */
            this.changeNumberOfGroupsToShow$ = new rxjs.BehaviorSubject(4);
            /**
             * subject to expand groups if necessary
             */
            this.expandGroups$ = new rxjs.BehaviorSubject(false);
            /**
             * switch to decide if it is necessary to recalculate how many groups should be closed
             */
            this.changeGroupsClosed = false;
            /**
             * emits when it is okay to display group options
             */
            this.groupsLoaded$ = new rxjs.Subject();
            /**
             * different options to group by and corresponding logic to divide graphs into groups
             */
            this.groupOptions = [];
            /** @type {?} */
            var groupOptions = [warningGroupService, hospitalLosGroupService, providerGroupService, facilityGroupService, unitGroupService];
            /** @type {?} */
            var dependencies = this.compileDependencies(groupOptions);
            // set default value of group by
            this.setDefaults();
            // wait for dependencies to load and then
            rxjs.combineLatest(dependencies).subscribe(function () { return _this.generateGroupByOptions(groupOptions); });
        }
        /**
         * compiles a list of dependencies from all the Group Option classes
         * @param options - list of Services to compile dependencies from
         */
        /**
         * compiles a list of dependencies from all the Group Option classes
         * @param {?} options - list of Services to compile dependencies from
         * @return {?}
         */
        GroupService.prototype.compileDependencies = /**
         * compiles a list of dependencies from all the Group Option classes
         * @param {?} options - list of Services to compile dependencies from
         * @return {?}
         */
            function (options) {
                /** @type {?} */
                var dependencies = [];
                try {
                    for (var options_1 = __values(options), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
                        var option = options_1_1.value;
                        if (option.dependency && dependencies.indexOf(option.dependency) < 0) {
                            dependencies.push(option.dependency);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (options_1_1 && !options_1_1.done && (_a = options_1.return))
                            _a.call(options_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return dependencies;
                var e_1, _a;
            };
        /**
         * generate filter functions and titles for all the group by options and add them to the options list
         */
        /**
         * generate filter functions and titles for all the group by options and add them to the options list
         * @param {?} options
         * @return {?}
         */
        GroupService.prototype.generateGroupByOptions = /**
         * generate filter functions and titles for all the group by options and add them to the options list
         * @param {?} options
         * @return {?}
         */
            function (options) {
                this.groupOptions = [];
                try {
                    for (var options_2 = __values(options), options_2_1 = options_2.next(); !options_2_1.done; options_2_1 = options_2.next()) {
                        var option = options_2_1.value;
                        this.groupOptions.push(option.generateLanes());
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (options_2_1 && !options_2_1.done && (_a = options_2.return))
                            _a.call(options_2);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                this.groupsLoaded$.next();
                var e_2, _a;
            };
        /**
         * set default value of group by
         */
        /**
         * set default value of group by
         * @return {?}
         */
        GroupService.prototype.setDefaults = /**
         * set default value of group by
         * @return {?}
         */
            function () {
                this.activeGroup = this.warningGroupService.generateLanes();
                this.stagedGroup = this.warningGroupService.generateLanes();
                this.groupSubject$ = new rxjs.BehaviorSubject(this.warningGroupService.generateLanes().lanes);
            };
        /**
         * what to do if sidebar is destroyed
         */
        /**
         * what to do if sidebar is destroyed
         * @return {?}
         */
        GroupService.prototype.clearGroupBy = /**
         * what to do if sidebar is destroyed
         * @return {?}
         */
            function () {
                this.activeGroup = this.warningGroupService.generateLanes();
                this.stagedGroup = this.warningGroupService.generateLanes();
                this.groupSubject$.next(this.warningGroupService.generateLanes().lanes);
            };
        GroupService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        GroupService.ctorParameters = function () {
            return [
                { type: WarningCategoryGroupService },
                { type: HospitalLosGroupService },
                { type: ProviderGroupService },
                { type: FacilityGroupService },
                { type: UnitGroupService }
            ];
        };
        /** @nocollapse */ GroupService.ngInjectableDef = i0.defineInjectable({ factory: function GroupService_Factory() { return new GroupService(i0.inject(WarningCategoryGroupService), i0.inject(HospitalLosGroupService), i0.inject(ProviderGroupService), i0.inject(FacilityGroupService), i0.inject(UnitGroupService)); }, token: GroupService, providedIn: "root" });
        return GroupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Manages the staging filters object -> the current status of the sidebar,
     * the active filters object -> the filters currently being applied to the array view,
     * and the subject which is used to update the array view when filters are applied.
     */
    var FilterService = (function () {
        function FilterService(locationSelectorService, filterRestService, sortService, groupService) {
            this.locationSelectorService = locationSelectorService;
            this.filterRestService = filterRestService;
            this.sortService = sortService;
            this.groupService = groupService;
            /**
             * BehaviorSubject for when selected locations change.
             */
            this.locationsChanged = new rxjs.BehaviorSubject({
                locations: new Locations(),
                executeFilterQuery: false,
            });
            /**
             * Filters actively applied to the array view.
             */
            this.activeFilters = {};
            /**
             * Filters currently selected in the sidebar but NOT applied.
             */
            this.stagingFilters = {};
            /**
             * visit numbers of patients filtered out by server side filters
             */
            this.serverFilteredVisits = [];
            /**
             * name of filter for server side filters
             */
            this.serverFilterName = 'query-filter';
            /**
             * criteria to build filter query from as currently represented in sidebar
             */
            this.stagedServerFilterCriteria = {};
            /**
             * criteria for server side filtering currently ACTIVE in array view
             */
            this._activeServerFilterCriteria = {};
            /**
             * Subject which is updated when filters are applied.
             */
            this.filterSubject$ = new rxjs.BehaviorSubject(this.activeFilters);
        }
        /**
         * Adds a staged filter (prior to activating the filters)
         * @param filterName Name of the filter to stage.
         * @param filterFunction The filter function to stage.
         */
        /**
         * Adds a staged filter (prior to activating the filters)
         * @param {?} filterName Name of the filter to stage.
         * @param {?} filterFunction The filter function to stage.
         * @return {?}
         */
        FilterService.prototype.stageFilter = /**
         * Adds a staged filter (prior to activating the filters)
         * @param {?} filterName Name of the filter to stage.
         * @param {?} filterFunction The filter function to stage.
         * @return {?}
         */
            function (filterName, filterFunction) {
                this.stagingFilters[filterName] = filterFunction;
            };
        /**
         * Removes a staged filter.
         * @param filterName Name of filter to unstage.
         */
        /**
         * Removes a staged filter.
         * @param {?} filterName Name of filter to unstage.
         * @return {?}
         */
        FilterService.prototype.unstageFilter = /**
         * Removes a staged filter.
         * @param {?} filterName Name of filter to unstage.
         * @return {?}
         */
            function (filterName) {
                delete this.stagingFilters[filterName];
            };
        /**
         * gets filter function that filters out patients based on criteria from conglomerated filter query
         */
        /**
         * gets filter function that filters out patients based on criteria from conglomerated filter query
         * @return {?}
         */
        FilterService.prototype.getServerSideFilterFunction = /**
         * gets filter function that filters out patients based on criteria from conglomerated filter query
         * @return {?}
         */
            function () {
                /** @type {?} */
                var thisRef = this;
                return function (peragraph) {
                    try {
                        for (var _a = __values(thisRef.serverFilteredVisits), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var vnm = _b.value;
                            if (vnm === peragraph.vnm) {
                                return true;
                            }
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return))
                                _c.call(_a);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                    return false;
                    var e_1, _c;
                };
            };
        /**
         * add filter criteria to criteria object
         * @param criteria - array of criteria to add to filter
         * @param title - property name of criteria on the filterCriteria object -> MUST match a
         * QueryParam in the REST call located in common.FilterController or it won't be applied
         */
        /**
         * add filter criteria to criteria object
         * @param {?} criteria - array of criteria to add to filter
         * @param {?} title - property name of criteria on the filterCriteria object -> MUST match a
         * QueryParam in the REST call located in common.FilterController or it won't be applied
         * @return {?}
         */
        FilterService.prototype.stageServerFilterCriteria = /**
         * add filter criteria to criteria object
         * @param {?} criteria - array of criteria to add to filter
         * @param {?} title - property name of criteria on the filterCriteria object -> MUST match a
         * QueryParam in the REST call located in common.FilterController or it won't be applied
         * @return {?}
         */
            function (criteria, title) {
                this.stagedServerFilterCriteria[title] = criteria;
                this.stageFilter(this.serverFilterName, this.getServerSideFilterFunction());
            };
        /**
         * removes a criteria object from the filter criteria object
         * if no criterion remain, the filter is removed from the staged filters
         * @param title - name of the criteria to be removed
         */
        /**
         * removes a criteria object from the filter criteria object
         * if no criterion remain, the filter is removed from the staged filters
         * @param {?} title - name of the criteria to be removed
         * @return {?}
         */
        FilterService.prototype.removeStagedServerCriteria = /**
         * removes a criteria object from the filter criteria object
         * if no criterion remain, the filter is removed from the staged filters
         * @param {?} title - name of the criteria to be removed
         * @return {?}
         */
            function (title) {
                delete this.stagedServerFilterCriteria[title];
                if (Object.keys(this.stagedServerFilterCriteria).length === 0) {
                    this.unstageFilter(this.serverFilterName);
                }
            };
        /**
         * return staged server side filter parameters
         */
        /**
         * return staged server side filter parameters
         * @return {?}
         */
        FilterService.prototype.getStagedServerSideFilterCriteria = /**
         * return staged server side filter parameters
         * @return {?}
         */
            function () {
                return this.stagedServerFilterCriteria;
            };
        /**
         * returns a function which returns the current active filters at the given time
         */
        /**
         * returns a function which returns the current active filters at the given time
         * @return {?}
         */
        FilterService.prototype.getActiveServerFilterCriteria = /**
         * returns a function which returns the current active filters at the given time
         * @return {?}
         */
            function () {
                /** @type {?} */
                var filterServiceRef = this;
                return function () {
                    return filterServiceRef._activeServerFilterCriteria;
                };
            };
        /**
         * what to do if sidebar is destroyed
         */
        /**
         * what to do if sidebar is destroyed
         * @return {?}
         */
        FilterService.prototype.clearAllFilters = /**
         * what to do if sidebar is destroyed
         * @return {?}
         */
            function () {
                this.activeFilters = {};
                this.stagingFilters = {};
                this.serverFilteredVisits = [];
                this.stagedServerFilterCriteria = {};
                this._activeServerFilterCriteria = {};
                this.filterSubject$.next({});
                this.groupService.clearGroupBy();
                this.sortService.clearSort();
            };
        /**
         * Activate the staged filters
         *
         * 2 seperate paths:
         *      A. Location changes -> refresh graphs is called after changing the endpoint parameters and a variable is passed in
         *                              to let refresh changes know if the server side filter needs to be refreshed
         *      B. No location changes -> If the server side filtering needs to be refreshed, its REST call is initiated before client side filtering occurs,
         *                              otherwise client side filtering occurs immediatley on existing graphs
         */
        /**
         * Activate the staged filters
         *
         * 2 seperate paths:
         *      A. Location changes -> refresh graphs is called after changing the endpoint parameters and a variable is passed in
         *                              to let refresh changes know if the server side filter needs to be refreshed
         *      B. No location changes -> If the server side filtering needs to be refreshed, its REST call is initiated before client side filtering occurs,
         *                              otherwise client side filtering occurs immediatley on existing graphs
         * @return {?}
         */
        FilterService.prototype.activateFilters = /**
         * Activate the staged filters
         *
         * 2 seperate paths:
         *      A. Location changes -> refresh graphs is called after changing the endpoint parameters and a variable is passed in
         *                              to let refresh changes know if the server side filter needs to be refreshed
         *      B. No location changes -> If the server side filtering needs to be refreshed, its REST call is initiated before client side filtering occurs,
         *                              otherwise client side filtering occurs immediatley on existing graphs
         * @return {?}
         */
            function () {
                var _this = this;
                // close appropriate groups if changing, filters, group by, or sort
                this.groupService.changeGroupsClosed = true;
                // set staged sort to active
                this.sortService.activeSortFunction = this.sortService.getStagedSortFunction();
                this.sortService.activeSortName = this.sortService.stagedSortName;
                // set staged filters to active filters
                this.activeFilters = {};
                for (var filter in this.stagingFilters) {
                    if (this.stagingFilters.hasOwnProperty(filter)) {
                        this.activeFilters[filter] = this.stagingFilters[filter];
                    }
                }
                // set staged server side filtering query parameters to active
                this._activeServerFilterCriteria = {};
                for (var criteria in this.stagedServerFilterCriteria) {
                    if (this.stagedServerFilterCriteria.hasOwnProperty(criteria)) {
                        this._activeServerFilterCriteria[criteria] = this.stagedServerFilterCriteria[criteria];
                    }
                }
                /** @type {?} */
                var executeQuery = this.activeFilters.hasOwnProperty(this.serverFilterName);
                // Check if unit selection has changed
                if (!this.locationSelectorService.isLocationSelectionTheSame() || this.sortService.activeSortName === SortChoices.RIScore || this.groupService.stagedGroup.groupName !== this.groupService.activeGroup.groupName) {
                    this.groupService.activeGroup = this.groupService.stagedGroup;
                    this.groupService.groupSubject$.next(this.groupService.activeGroup.lanes);
                    /** @type {?} */
                    var selectedLocations = this.locationSelectorService.getLocationsToFilter();
                    // Signal that location selections have changed and whether or not to execute the filter query
                    this.locationsChanged.next({ locations: selectedLocations, executeFilterQuery: executeQuery });
                }
                else {
                    // if filter query needs to be executed, wait for it to return before filtering the graphs in the client
                    if (executeQuery) {
                        this.filterRestService.getFilteredVisits(this.getActiveServerFilterCriteria()).subscribe(function (visits) {
                            _this.serverFilteredVisits = visits;
                            _this.filterSubject$.next(_this.activeFilters);
                        });
                    }
                    else {
                        // pass the filter subject with the updated filters
                        setTimeout(function () { return _this.filterSubject$.next(_this.activeFilters); }, 500);
                    }
                }
            };
        FilterService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FilterService.ctorParameters = function () {
            return [
                { type: LocationSelectorService },
                { type: FilterQueryRestService },
                { type: SortService },
                { type: GroupService }
            ];
        };
        /** @nocollapse */ FilterService.ngInjectableDef = i0.defineInjectable({ factory: function FilterService_Factory() { return new FilterService(i0.inject(LocationSelectorService), i0.inject(FilterQueryRestService), i0.inject(SortService), i0.inject(GroupService)); }, token: FilterService, providedIn: "root" });
        return FilterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ServiceLineConfigService = (function () {
        function ServiceLineConfigService() {
            this.serviceLineDescriptionsEndpoint = null;
        }
        /**
         * @return {?}
         */
        ServiceLineConfigService.prototype.getServiceLineDescriptionsEndpoint = /**
         * @return {?}
         */
            function () {
                if (!this.serviceLineDescriptionsEndpoint) {
                    console.warn('Service Line Descriptions endpoint is not set!');
                }
                return this.serviceLineDescriptionsEndpoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        ServiceLineConfigService.prototype.setServiceLineDescriptionsEndpoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.serviceLineDescriptionsEndpoint = value;
            };
        ServiceLineConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ ServiceLineConfigService.ngInjectableDef = i0.defineInjectable({ factory: function ServiceLineConfigService_Factory() { return new ServiceLineConfigService(); }, token: ServiceLineConfigService, providedIn: "root" });
        return ServiceLineConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ServiceLineRestService = (function () {
        function ServiceLineRestService(http, serviceLineConfig) {
            this.http = http;
            this.serviceLineConfig = serviceLineConfig;
        }
        /**
         * return all service line descriptions
         */
        /**
         * return all service line descriptions
         * @return {?}
         */
        ServiceLineRestService.prototype.getAllServiceLineDescriptions = /**
         * return all service line descriptions
         * @return {?}
         */
            function () {
                return this.http.get(this.serviceLineConfig.getServiceLineDescriptionsEndpoint());
            };
        ServiceLineRestService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ServiceLineRestService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: ServiceLineConfigService }
            ];
        };
        /** @nocollapse */ ServiceLineRestService.ngInjectableDef = i0.defineInjectable({ factory: function ServiceLineRestService_Factory() { return new ServiceLineRestService(i0.inject(i1.HttpClient), i0.inject(ServiceLineConfigService)); }, token: ServiceLineRestService, providedIn: "root" });
        return ServiceLineRestService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ServiceLineFilterService = (function () {
        function ServiceLineFilterService() {
            this.toggleAll = new i0.EventEmitter();
        }
        ServiceLineFilterService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ServiceLineFilterService.ctorParameters = function () { return []; };
        /** @nocollapse */ ServiceLineFilterService.ngInjectableDef = i0.defineInjectable({ factory: function ServiceLineFilterService_Factory() { return new ServiceLineFilterService(); }, token: ServiceLineFilterService, providedIn: "root" });
        return ServiceLineFilterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ProvidersConfigService = (function () {
        function ProvidersConfigService() {
            this.allProvidersEndpoint = null;
        }
        /**
         * @return {?}
         */
        ProvidersConfigService.prototype.getAllProvidersEndpoint = /**
         * @return {?}
         */
            function () {
                if (!this.allProvidersEndpoint) {
                    console.warn('All Providers Endpoint is not set!');
                }
                return this.allProvidersEndpoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        ProvidersConfigService.prototype.setAllProvidersEndpoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.allProvidersEndpoint = value;
            };
        ProvidersConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ ProvidersConfigService.ngInjectableDef = i0.defineInjectable({ factory: function ProvidersConfigService_Factory() { return new ProvidersConfigService(); }, token: ProvidersConfigService, providedIn: "root" });
        return ProvidersConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ProvidersApiService = (function () {
        function ProvidersApiService(http, providersConfigService) {
            this.http = http;
            this.providersConfigService = providersConfigService;
        }
        /**
         * @return {?}
         */
        ProvidersApiService.prototype.getAllProviders = /**
         * @return {?}
         */
            function () {
                return this.http.get(this.providersConfigService.getAllProvidersEndpoint());
            };
        ProvidersApiService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ProvidersApiService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: ProvidersConfigService }
            ];
        };
        /** @nocollapse */ ProvidersApiService.ngInjectableDef = i0.defineInjectable({ factory: function ProvidersApiService_Factory() { return new ProvidersApiService(i0.inject(i1.HttpClient), i0.inject(ProvidersConfigService)); }, token: ProvidersApiService, providedIn: "root" });
        return ProvidersApiService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AgeGroupsService = (function () {
        function AgeGroupsService(filterService) {
            this.filterService = filterService;
            this.PEDIATRIC_GROUP = 'Pediatric';
            this.ADULT_GROUP = 'Adult';
            this.ALL_GROUP = 'All';
        }
        /**
         * @return {?}
         */
        AgeGroupsService.prototype.unstageAgeGroups = /**
         * @return {?}
         */
            function () {
                this.filterService.unstageFilter(this.PEDIATRIC_GROUP);
                this.filterService.unstageFilter(this.ADULT_GROUP);
                this.filterService.unstageFilter(this.ALL_GROUP);
            };
        /**
         * Always returns true because we want all the patients
         * @param {?} peragraph - peragraph to filter
         * @return {?}
         */
        AgeGroupsService.prototype.allFilterFunction = /**
         * Always returns true because we want all the patients
         * @param {?} peragraph - peragraph to filter
         * @return {?}
         */
            function (peragraph) {
                return true;
            };
        /**
         * Filter out any peragraphs with patients younger than 18
         * @param {?} peragraph - peragraph to be filtered
         * @return {?}
         */
        AgeGroupsService.prototype.adultFilterFunction = /**
         * Filter out any peragraphs with patients younger than 18
         * @param {?} peragraph - peragraph to be filtered
         * @return {?}
         */
            function (peragraph) {
                /** @type {?} */
                var birthDate = new Date();
                birthDate.setMilliseconds(peragraph.patient.dob);
                /** @type {?} */
                var currentDate = new Date();
                currentDate.setMilliseconds(Date.now());
                /** @type {?} */
                var age = currentDate.getFullYear() - birthDate.getFullYear();
                return age >= 18;
            };
        /**
         * Filter out any peragraphs with patients older than 18
         * @param {?} peragraph - peragraph to be filtered
         * @return {?}
         */
        AgeGroupsService.prototype.pediatricFilterFunction = /**
         * Filter out any peragraphs with patients older than 18
         * @param {?} peragraph - peragraph to be filtered
         * @return {?}
         */
            function (peragraph) {
                /** @type {?} */
                var birthDate = new Date();
                birthDate.setMilliseconds(peragraph.patient.dob);
                /** @type {?} */
                var currentDate = new Date();
                currentDate.setMilliseconds(Date.now());
                /** @type {?} */
                var age = currentDate.getFullYear() - birthDate.getFullYear();
                return age < 18;
            };
        AgeGroupsService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        AgeGroupsService.ctorParameters = function () {
            return [
                { type: FilterService }
            ];
        };
        /** @nocollapse */ AgeGroupsService.ngInjectableDef = i0.defineInjectable({ factory: function AgeGroupsService_Factory() { return new AgeGroupsService(i0.inject(FilterService)); }, token: AgeGroupsService, providedIn: "root" });
        return AgeGroupsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var WarningsFilterService = (function () {
        function WarningsFilterService() {
            /**
             * Warning levels that are selected. Start with all of them.
             */
            this.selectedWarnings = ['warning_v', 'warning_h', 'warning_m', 'warning_none', 'warning_no_ri'];
            /**
             * Configurations for warning level filter options.
             *
             * Contains a filter id, the color of the warning level and a filter function for filtering out
             * the warning if NOT selected.
             */
            this.filterOptions = [
                {
                    filterID: 'warning_v', color: '#D51C19',
                    filterFunction: function (peragraph) {
                        return !(peragraph.activeWarning && peragraph.activeWarning.category === 'V');
                    }
                },
                {
                    filterID: 'warning_h', color: '#EE834C',
                    filterFunction: function (peragraph) {
                        return !(peragraph.activeWarning && peragraph.activeWarning.category === 'H');
                    }
                },
                {
                    filterID: 'warning_m', color: '#F6CC5D',
                    filterFunction: function (peragraph) {
                        return !(peragraph.activeWarning && peragraph.activeWarning.category === 'M');
                    }
                },
                {
                    filterID: 'warning_none', color: '#3185B8',
                    filterFunction: function (peragraph) {
                        return !(!peragraph.activeWarning && !peragraph.discharged);
                    }
                }
            ];
        }
        WarningsFilterService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ WarningsFilterService.ngInjectableDef = i0.defineInjectable({ factory: function WarningsFilterService_Factory() { return new WarningsFilterService(); }, token: WarningsFilterService, providedIn: "root" });
        return WarningsFilterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DiagnosisConfigService = (function () {
        function DiagnosisConfigService() {
            /**
             * class for configuring the endpoint for retrieving all diagnoses
             */
            this.diagnosesEndpoint = null;
        }
        /**
         * @return {?}
         */
        DiagnosisConfigService.prototype.getDiagnosesEndpoint = /**
         * @return {?}
         */
            function () {
                if (!this.diagnosesEndpoint) {
                    console.warn('Diagnoses endpoint is not set!');
                }
                return this.diagnosesEndpoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DiagnosisConfigService.prototype.setDiagnosesEndpoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.diagnosesEndpoint = value;
            };
        DiagnosisConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ DiagnosisConfigService.ngInjectableDef = i0.defineInjectable({ factory: function DiagnosisConfigService_Factory() { return new DiagnosisConfigService(); }, token: DiagnosisConfigService, providedIn: "root" });
        return DiagnosisConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DiagnosisFilterService = (function () {
        function DiagnosisFilterService() {
            this.selectedDiagnoses = {};
            this.diagnoses = [];
            this.diagnosesLoaded$ = new i0.EventEmitter();
            this.toggleAll = new i0.EventEmitter();
        }
        DiagnosisFilterService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        DiagnosisFilterService.ctorParameters = function () { return []; };
        /** @nocollapse */ DiagnosisFilterService.ngInjectableDef = i0.defineInjectable({ factory: function DiagnosisFilterService_Factory() { return new DiagnosisFilterService(); }, token: DiagnosisFilterService, providedIn: "root" });
        return DiagnosisFilterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DiagnosisRestService = (function () {
        function DiagnosisRestService(http, diagnosisConfigService) {
            this.http = http;
            this.diagnosisConfigService = diagnosisConfigService;
            this.pollInstanceDiagnoses$ = rxjs.timer(0, 90000);
        }
        /**
         * returns an observable with all diagnoses
         */
        /**
         * returns an observable with all diagnoses
         * @return {?}
         */
        DiagnosisRestService.prototype.getAllDiagnoses = /**
         * returns an observable with all diagnoses
         * @return {?}
         */
            function () {
                return this.http.get(this.diagnosisConfigService.getDiagnosesEndpoint() + '/all');
            };
        /**
         * returns an observable that broadcasts all active diagnoses on an interval
         */
        /**
         * returns an observable that broadcasts all active diagnoses on an interval
         * @return {?}
         */
        DiagnosisRestService.prototype.getAllDiagnosisInterval = /**
         * returns an observable that broadcasts all active diagnoses on an interval
         * @return {?}
         */
            function () {
                var _this = this;
                return this.pollInstanceDiagnoses$.pipe(operators.switchMap(function () { return _this.getAllDiagnoses(); }));
            };
        DiagnosisRestService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        DiagnosisRestService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: DiagnosisConfigService }
            ];
        };
        /** @nocollapse */ DiagnosisRestService.ngInjectableDef = i0.defineInjectable({ factory: function DiagnosisRestService_Factory() { return new DiagnosisRestService(i0.inject(i1.HttpClient), i0.inject(DiagnosisConfigService)); }, token: DiagnosisRestService, providedIn: "root" });
        return DiagnosisRestService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var WarningTimeFrameFilterService = (function () {
        function WarningTimeFrameFilterService() {
        }
        /**
         * filters out graphs with warnings older than warning timeframe limit
         * @param warningTimeFrame - # of hours to check back for warning activity
         */
        /**
         * filters out graphs with warnings older than warning timeframe limit
         * @param {?} warningTimeFrame - # of hours to check back for warning activity
         * @return {?}
         */
        WarningTimeFrameFilterService.prototype.getFilterFunction = /**
         * filters out graphs with warnings older than warning timeframe limit
         * @param {?} warningTimeFrame - # of hours to check back for warning activity
         * @return {?}
         */
            function (warningTimeFrame) {
                /** @type {?} */
                var warningTimeFrameLocal = warningTimeFrame;
                return function (peraGraph) {
                    if (peraGraph.activeWarning && peraGraph.activeWarning.createdDate) {
                        // check if date warning was created is older then the warning time frame limit
                        if (peraGraph.activeWarning.createdDate >= ((new Date()).getTime()) - (warningTimeFrameLocal * 3600000)) {
                            return true;
                        }
                    }
                    else {
                        return false;
                    }
                };
            };
        WarningTimeFrameFilterService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        WarningTimeFrameFilterService.ctorParameters = function () { return []; };
        /** @nocollapse */ WarningTimeFrameFilterService.ngInjectableDef = i0.defineInjectable({ factory: function WarningTimeFrameFilterService_Factory() { return new WarningTimeFrameFilterService(); }, token: WarningTimeFrameFilterService, providedIn: "root" });
        return WarningTimeFrameFilterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Diagnosis = (function () {
        function Diagnosis() {
        }
        return Diagnosis;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.FiltersModule = FiltersModule;
    exports.FilterService = FilterService;
    exports.ServiceLineConfigService = ServiceLineConfigService;
    exports.ServiceLineRestService = ServiceLineRestService;
    exports.ServiceLineFilterService = ServiceLineFilterService;
    exports.FilterQueryRestService = FilterQueryRestService;
    exports.FilterQueryConfigService = FilterQueryConfigService;
    exports.ProvidersConfigService = ProvidersConfigService;
    exports.ProviderFilterService = ProviderFilterService;
    exports.ProvidersApiService = ProvidersApiService;
    exports.LocationSelectorService = LocationSelectorService;
    exports.AgeGroupsService = AgeGroupsService;
    exports.WarningsFilterService = WarningsFilterService;
    exports.DiagnosisConfigService = DiagnosisConfigService;
    exports.DiagnosisFilterService = DiagnosisFilterService;
    exports.DiagnosisRestService = DiagnosisRestService;
    exports.WarningTimeFrameFilterService = WarningTimeFrameFilterService;
    exports.Diagnosis = Diagnosis;
    exports.Locations = Locations;
    exports.SortService = SortService;
    exports.SortChoices = SortChoices;
    exports.GroupService = GroupService;
    exports.ɵd = FacilityGroupService;
    exports.ɵb = HospitalLosGroupService;
    exports.ɵc = ProviderGroupService;
    exports.ɵe = UnitGroupService;
    exports.ɵa = WarningCategoryGroupService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-filters-library.umd.js.map