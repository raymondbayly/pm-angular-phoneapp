/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LocationSelectorService } from '../filter/locations/location-selector.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../filter/locations/location-selector.service";
export class UnitGroupService {
    /**
     * @param {?} locationSelectorService
     */
    constructor(locationSelectorService) {
        this.locationSelectorService = locationSelectorService;
        /**
         * things that need to emit before generating the unit lanes
         */
        this.dependency = new Subject();
        this.locationSelectorService.loadedLocations.subscribe(() => {
            this.dependency.next();
        });
    }
    /**
     * generate group choice object for facilities
     * @return {?}
     */
    generateLanes() {
        /** @type {?} */
        const option = {
            groupName: 'Unit',
            lanes: []
        };
        for (const unit of this.locationSelectorService.units) {
            option.lanes.push({ laneFunction: this.generateUnitLaneFilterFunction(unit), laneTitle: unit.displayName });
        }
        return option;
    }
    /**
     * generate filter function for filtering out a group for a specific unit
     * @param {?} unit - unit to filter on
     * @return {?}
     */
    generateUnitLaneFilterFunction(unit) {
        /** @type {?} */
        const unitName = unit.displayName;
        return function (peraGraph) {
            return peraGraph.unitId === unitName;
        };
    }
}
UnitGroupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UnitGroupService.ctorParameters = () => [
    { type: LocationSelectorService }
];
/** @nocollapse */ UnitGroupService.ngInjectableDef = i0.defineInjectable({ factory: function UnitGroupService_Factory() { return new UnitGroupService(i0.inject(i1.LocationSelectorService)); }, token: UnitGroupService, providedIn: "root" });
if (false) {
    /**
     * things that need to emit before generating the unit lanes
     * @type {?}
     */
    UnitGroupService.prototype.dependency;
    /** @type {?} */
    UnitGroupService.prototype.locationSelectorService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1ncm91cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctZmlsdGVycy1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2dyb3VwL3VuaXQtZ3JvdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwrQ0FBK0MsQ0FBQztBQUV0RixPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDOzs7QUFLN0IsTUFBTTs7OztJQU9KLFlBQW9CLHVCQUFnRDtRQUFoRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCOzs7OzBCQUZ2RCxJQUFJLE9BQU8sRUFBUTtRQUc5QixJQUFJLENBQUMsdUJBQXVCLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDMUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN4QixDQUFDLENBQUM7S0FDSjs7Ozs7SUFLRCxhQUFhOztRQUNYLE1BQU0sTUFBTSxHQUEyRztZQUNySCxTQUFTLEVBQUUsTUFBTTtZQUNqQixLQUFLLEVBQUUsRUFBRTtTQUNWLENBQUM7UUFDRixHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN0RCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO1NBQzNHO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztLQUNmOzs7Ozs7SUFNTyw4QkFBOEIsQ0FBQyxJQUFVOztRQUMvQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxVQUFVLFNBQW9CO1lBQ25DLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQztTQUN0QyxDQUFDOzs7O1lBdENMLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQU5PLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7R3JvdXBPcHRpb259IGZyb20gJy4vR3JvdXBPcHRpb24nO1xuaW1wb3J0IHtMb2NhdGlvblNlbGVjdG9yU2VydmljZX0gZnJvbSAnLi4vZmlsdGVyL2xvY2F0aW9ucy9sb2NhdGlvbi1zZWxlY3Rvci5zZXJ2aWNlJztcbmltcG9ydCB7UGVyYUdyYXBoLCBVbml0fSBmcm9tICduZy1jb21tb24tbGlicmFyeSc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBVbml0R3JvdXBTZXJ2aWNlIGltcGxlbWVudHMgR3JvdXBPcHRpb24ge1xuXG4gIC8qKlxuICAgKiB0aGluZ3MgdGhhdCBuZWVkIHRvIGVtaXQgYmVmb3JlIGdlbmVyYXRpbmcgdGhlIHVuaXQgbGFuZXNcbiAgICovXG4gIGRlcGVuZGVuY3kgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYXRpb25TZWxlY3RvclNlcnZpY2U6IExvY2F0aW9uU2VsZWN0b3JTZXJ2aWNlKSB7XG4gICAgdGhpcy5sb2NhdGlvblNlbGVjdG9yU2VydmljZS5sb2FkZWRMb2NhdGlvbnMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuZGVwZW5kZW5jeS5uZXh0KCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogZ2VuZXJhdGUgZ3JvdXAgY2hvaWNlIG9iamVjdCBmb3IgZmFjaWxpdGllc1xuICAgKi9cbiAgZ2VuZXJhdGVMYW5lcygpOiB7IGdyb3VwTmFtZTogc3RyaW5nLCBsYW5lczogeyBsYW5lRnVuY3Rpb246IChwZXJhR3JhcGg6IFBlcmFHcmFwaCkgPT4gYm9vbGVhbiwgbGFuZVRpdGxlOiBzdHJpbmcgfVtdIH0ge1xuICAgIGNvbnN0IG9wdGlvbjogeyBncm91cE5hbWU6IHN0cmluZywgbGFuZXM6IHsgbGFuZUZ1bmN0aW9uOiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpID0+IGJvb2xlYW4sIGxhbmVUaXRsZTogc3RyaW5nIH1bXSB9ID0ge1xuICAgICAgZ3JvdXBOYW1lOiAnVW5pdCcsXG4gICAgICBsYW5lczogW11cbiAgICB9O1xuICAgIGZvciAoY29uc3QgdW5pdCBvZiB0aGlzLmxvY2F0aW9uU2VsZWN0b3JTZXJ2aWNlLnVuaXRzKSB7XG4gICAgICBvcHRpb24ubGFuZXMucHVzaCh7bGFuZUZ1bmN0aW9uOiB0aGlzLmdlbmVyYXRlVW5pdExhbmVGaWx0ZXJGdW5jdGlvbih1bml0KSwgbGFuZVRpdGxlOiB1bml0LmRpc3BsYXlOYW1lfSk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb247XG4gIH1cblxuICAvKipcbiAgICogZ2VuZXJhdGUgZmlsdGVyIGZ1bmN0aW9uIGZvciBmaWx0ZXJpbmcgb3V0IGEgZ3JvdXAgZm9yIGEgc3BlY2lmaWMgdW5pdFxuICAgKiBAcGFyYW0gdW5pdCAtIHVuaXQgdG8gZmlsdGVyIG9uXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlVW5pdExhbmVGaWx0ZXJGdW5jdGlvbih1bml0OiBVbml0KSB7XG4gICAgY29uc3QgdW5pdE5hbWUgPSB1bml0LmRpc3BsYXlOYW1lO1xuICAgIHJldHVybiBmdW5jdGlvbiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBwZXJhR3JhcGgudW5pdElkID09PSB1bml0TmFtZTtcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==