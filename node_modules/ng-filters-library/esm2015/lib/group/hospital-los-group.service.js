/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class HospitalLosGroupService {
    constructor() {
        /**
         * size of LOS lane ranges
         */
        this.losIncrement = 1;
        /**
         * number of lanes LOS group by can have
         */
        this.losLaneMax = 5;
        /**
         * things that need to emit before generating the Hospital Los lanes
         */
        this.dependency = null;
    }
    /**
     * generate group choice object for facilities
     * @return {?}
     */
    generateLanes() {
        /** @type {?} */
        const option = {
            groupName: 'Hospital LOS',
            lanes: []
        };
        for (let i = 0; i < this.losLaneMax * this.losIncrement; i += this.losIncrement) {
            /** @type {?} */
            const losLaneInfo = this.generateLosLaneFilterFunctionAndTitle(i, i + this.losIncrement);
            option.lanes.push({ laneFunction: losLaneInfo.filterFunction, laneTitle: losLaneInfo.title });
        }
        /** @type {?} */
        const losLaneInfoFinal = this.generateLosLaneFilterFunctionAndTitle(this.losLaneMax * this.losIncrement);
        option.lanes.push({ laneFunction: losLaneInfoFinal.filterFunction, laneTitle: losLaneInfoFinal.title });
        return option;
    }
    /**
     * generate filter function and label for Hospital LOS group by
     * @param {?} minIndex - number of days before current time to start including graphs in this lane (inclusive)
     * @param {?=} maxIndex - number of days before current time to stop including graphs (exclusive)
     * @return {?}
     */
    generateLosLaneFilterFunctionAndTitle(minIndex, maxIndex = -1) {
        /** @type {?} */
        const minVolume = minIndex * 86400000;
        if (maxIndex !== -1) {
            /** @type {?} */
            const maxVolume = maxIndex * 86400000;
            return {
                filterFunction: function (peraGraph) {
                    /** @type {?} */
                    const current = ((new Date()).getTime());
                    /** @type {?} */
                    const min = current - minVolume;
                    /** @type {?} */
                    const max = current - maxVolume;
                    return peraGraph.admitDate <= min && peraGraph.admitDate > max;
                }, title: minIndex.toString() + ' - ' + maxIndex.toString() + ' days'
            };
        }
        else {
            // create catch all if max is not included in function call
            return {
                filterFunction: function (peraGraph) {
                    /** @type {?} */
                    const current = ((new Date()).getTime());
                    /** @type {?} */
                    const min = current - minVolume;
                    return peraGraph.admitDate <= min;
                }, title: minIndex.toString() + '+ days'
            };
        }
    }
}
HospitalLosGroupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
HospitalLosGroupService.ctorParameters = () => [];
/** @nocollapse */ HospitalLosGroupService.ngInjectableDef = i0.defineInjectable({ factory: function HospitalLosGroupService_Factory() { return new HospitalLosGroupService(); }, token: HospitalLosGroupService, providedIn: "root" });
if (false) {
    /**
     * size of LOS lane ranges
     * @type {?}
     */
    HospitalLosGroupService.prototype.losIncrement;
    /**
     * number of lanes LOS group by can have
     * @type {?}
     */
    HospitalLosGroupService.prototype.losLaneMax;
    /**
     * things that need to emit before generating the Hospital Los lanes
     * @type {?}
     */
    HospitalLosGroupService.prototype.dependency;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zcGl0YWwtbG9zLWdyb3VwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1maWx0ZXJzLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvZ3JvdXAvaG9zcGl0YWwtbG9zLWdyb3VwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTzNDLE1BQU07SUFpQko7Ozs7NEJBWmUsQ0FBQzs7OzswQkFLSCxDQUFDOzs7OzBCQUtELElBQUk7S0FFQTs7Ozs7SUFLakIsYUFBYTs7UUFDWCxNQUFNLE1BQU0sR0FBMkc7WUFDckgsU0FBUyxFQUFFLGNBQWM7WUFDekIsS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDO1FBQ0YsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7WUFDaEYsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLHFDQUFxQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3pGLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxjQUFjLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1NBQzdGOztRQUVELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHFDQUFxQyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUMsWUFBWSxFQUFFLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUN0RyxNQUFNLENBQUMsTUFBTSxDQUFDO0tBQ2Y7Ozs7Ozs7SUFPTyxxQ0FBcUMsQ0FBQyxRQUFnQixFQUFFLFdBQW1CLENBQUMsQ0FBQzs7UUFDbkYsTUFBTSxTQUFTLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN0QyxFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztZQUVwQixNQUFNLFNBQVMsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQztnQkFDTCxjQUFjLEVBQUUsVUFBVSxTQUFvQjs7b0JBQzVDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQzs7b0JBQ3pDLE1BQU0sR0FBRyxHQUFHLE9BQU8sR0FBRyxTQUFTLENBQUM7O29CQUNoQyxNQUFNLEdBQUcsR0FBRyxPQUFPLEdBQUcsU0FBUyxDQUFDO29CQUNoQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7aUJBQ2hFLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLE9BQU87YUFDdEUsQ0FBQztTQUNIO1FBQUMsSUFBSSxDQUFDLENBQUM7O1lBRU4sTUFBTSxDQUFDO2dCQUNMLGNBQWMsRUFBRSxVQUFVLFNBQW9COztvQkFDNUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDOztvQkFDekMsTUFBTSxHQUFHLEdBQUcsT0FBTyxHQUFHLFNBQVMsQ0FBQztvQkFDaEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLElBQUksR0FBRyxDQUFDO2lCQUNuQyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsUUFBUTthQUN6QyxDQUFDO1NBQ0g7Ozs7WUFuRUosVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQZXJhR3JhcGh9IGZyb20gJ25nLWNvbW1vbi1saWJyYXJ5JztcbmltcG9ydCB7R3JvdXBPcHRpb259IGZyb20gJy4vR3JvdXBPcHRpb24nO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBIb3NwaXRhbExvc0dyb3VwU2VydmljZSBpbXBsZW1lbnRzIEdyb3VwT3B0aW9uIHtcblxuICAvKipcbiAgICogc2l6ZSBvZiBMT1MgbGFuZSByYW5nZXNcbiAgICovXG4gIGxvc0luY3JlbWVudCA9IDE7XG5cbiAgLyoqXG4gICAqIG51bWJlciBvZiBsYW5lcyBMT1MgZ3JvdXAgYnkgY2FuIGhhdmVcbiAgICovXG4gIGxvc0xhbmVNYXggPSA1O1xuXG4gIC8qKlxuICAgKiB0aGluZ3MgdGhhdCBuZWVkIHRvIGVtaXQgYmVmb3JlIGdlbmVyYXRpbmcgdGhlIEhvc3BpdGFsIExvcyBsYW5lc1xuICAgKi9cbiAgZGVwZW5kZW5jeSA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAvKipcbiAgICogZ2VuZXJhdGUgZ3JvdXAgY2hvaWNlIG9iamVjdCBmb3IgZmFjaWxpdGllc1xuICAgKi9cbiAgZ2VuZXJhdGVMYW5lcygpOiB7IGdyb3VwTmFtZTogc3RyaW5nLCBsYW5lczogeyBsYW5lRnVuY3Rpb246IChwZXJhR3JhcGg6IFBlcmFHcmFwaCkgPT4gYm9vbGVhbiwgbGFuZVRpdGxlOiBzdHJpbmcgfVtdIH0ge1xuICAgIGNvbnN0IG9wdGlvbjogeyBncm91cE5hbWU6IHN0cmluZywgbGFuZXM6IHsgbGFuZUZ1bmN0aW9uOiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpID0+IGJvb2xlYW4sIGxhbmVUaXRsZTogc3RyaW5nIH1bXSB9ID0ge1xuICAgICAgZ3JvdXBOYW1lOiAnSG9zcGl0YWwgTE9TJyxcbiAgICAgIGxhbmVzOiBbXVxuICAgIH07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxvc0xhbmVNYXggKiB0aGlzLmxvc0luY3JlbWVudDsgaSArPSB0aGlzLmxvc0luY3JlbWVudCkge1xuICAgICAgY29uc3QgbG9zTGFuZUluZm8gPSB0aGlzLmdlbmVyYXRlTG9zTGFuZUZpbHRlckZ1bmN0aW9uQW5kVGl0bGUoaSwgaSArIHRoaXMubG9zSW5jcmVtZW50KTtcbiAgICAgIG9wdGlvbi5sYW5lcy5wdXNoKHtsYW5lRnVuY3Rpb246IGxvc0xhbmVJbmZvLmZpbHRlckZ1bmN0aW9uLCBsYW5lVGl0bGU6IGxvc0xhbmVJbmZvLnRpdGxlfSk7XG4gICAgfVxuICAgIC8vIGdlbmVyYXRlIGNhdGNoIGFsbCBsYW5lIGZvciB2aXNpdHMgb2xkZXIgdGhlbiBtYXhcbiAgICBjb25zdCBsb3NMYW5lSW5mb0ZpbmFsID0gdGhpcy5nZW5lcmF0ZUxvc0xhbmVGaWx0ZXJGdW5jdGlvbkFuZFRpdGxlKHRoaXMubG9zTGFuZU1heCAqIHRoaXMubG9zSW5jcmVtZW50KTtcbiAgICBvcHRpb24ubGFuZXMucHVzaCh7bGFuZUZ1bmN0aW9uOiBsb3NMYW5lSW5mb0ZpbmFsLmZpbHRlckZ1bmN0aW9uLCBsYW5lVGl0bGU6IGxvc0xhbmVJbmZvRmluYWwudGl0bGV9KTtcbiAgICByZXR1cm4gb3B0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIGdlbmVyYXRlIGZpbHRlciBmdW5jdGlvbiBhbmQgbGFiZWwgZm9yIEhvc3BpdGFsIExPUyBncm91cCBieVxuICAgKiBAcGFyYW0gbWluSW5kZXggLSBudW1iZXIgb2YgZGF5cyBiZWZvcmUgY3VycmVudCB0aW1lIHRvIHN0YXJ0IGluY2x1ZGluZyBncmFwaHMgaW4gdGhpcyBsYW5lIChpbmNsdXNpdmUpXG4gICAqIEBwYXJhbSBtYXhJbmRleCAtIG51bWJlciBvZiBkYXlzIGJlZm9yZSBjdXJyZW50IHRpbWUgdG8gc3RvcCBpbmNsdWRpbmcgZ3JhcGhzIChleGNsdXNpdmUpXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlTG9zTGFuZUZpbHRlckZ1bmN0aW9uQW5kVGl0bGUobWluSW5kZXg6IG51bWJlciwgbWF4SW5kZXg6IG51bWJlciA9IC0xKTogeyBmaWx0ZXJGdW5jdGlvbjogKHBlcmFHcmFwaDogUGVyYUdyYXBoKSA9PiBib29sZWFuLCB0aXRsZTogc3RyaW5nIH0ge1xuICAgIGNvbnN0IG1pblZvbHVtZSA9IG1pbkluZGV4ICogODY0MDAwMDA7XG4gICAgaWYgKG1heEluZGV4ICE9PSAtMSkge1xuICAgICAgLy8gaWYgYSBtYXggZW5kIG9mIHRoZSByYW5nZSBpcyBpbmNsdWRlZCBjcmVhdGUgYSBmaWx0ciBmb3IgYmV0d2VlbiBtYXggYW5kIG1pbiBkdXJhdGlvblxuICAgICAgY29uc3QgbWF4Vm9sdW1lID0gbWF4SW5kZXggKiA4NjQwMDAwMDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbHRlckZ1bmN0aW9uOiBmdW5jdGlvbiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpOiBib29sZWFuIHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50ID0gKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkpO1xuICAgICAgICAgIGNvbnN0IG1pbiA9IGN1cnJlbnQgLSBtaW5Wb2x1bWU7XG4gICAgICAgICAgY29uc3QgbWF4ID0gY3VycmVudCAtIG1heFZvbHVtZTtcbiAgICAgICAgICByZXR1cm4gcGVyYUdyYXBoLmFkbWl0RGF0ZSA8PSBtaW4gJiYgcGVyYUdyYXBoLmFkbWl0RGF0ZSA+IG1heDtcbiAgICAgICAgfSwgdGl0bGU6IG1pbkluZGV4LnRvU3RyaW5nKCkgKyAnIC0gJyArIG1heEluZGV4LnRvU3RyaW5nKCkgKyAnIGRheXMnXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjcmVhdGUgY2F0Y2ggYWxsIGlmIG1heCBpcyBub3QgaW5jbHVkZWQgaW4gZnVuY3Rpb24gY2FsbFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsdGVyRnVuY3Rpb246IGZ1bmN0aW9uIChwZXJhR3JhcGg6IFBlcmFHcmFwaCk6IGJvb2xlYW4ge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSAoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSk7XG4gICAgICAgICAgY29uc3QgbWluID0gY3VycmVudCAtIG1pblZvbHVtZTtcbiAgICAgICAgICByZXR1cm4gcGVyYUdyYXBoLmFkbWl0RGF0ZSA8PSBtaW47XG4gICAgICAgIH0sIHRpdGxlOiBtaW5JbmRleC50b1N0cmluZygpICsgJysgZGF5cydcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==