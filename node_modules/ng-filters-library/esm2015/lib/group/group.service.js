/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, Subject } from 'rxjs';
import { WarningCategoryGroupService } from './warning-category-group.service';
import { HospitalLosGroupService } from './hospital-los-group.service';
import { ProviderGroupService } from './provider-group.service';
import { UnitGroupService } from './unit-group.service';
import { FacilityGroupService } from './facility-group.service';
import * as i0 from "@angular/core";
import * as i1 from "./warning-category-group.service";
import * as i2 from "./hospital-los-group.service";
import * as i3 from "./provider-group.service";
import * as i4 from "./facility-group.service";
import * as i5 from "./unit-group.service";
export class GroupService {
    /**
     * @param {?} warningGroupService
     * @param {?} hospitalLosGroupService
     * @param {?} providerGroupService
     * @param {?} facilityGroupService
     * @param {?} unitGroupService
     */
    constructor(warningGroupService, hospitalLosGroupService, providerGroupService, facilityGroupService, unitGroupService) {
        this.warningGroupService = warningGroupService;
        this.hospitalLosGroupService = hospitalLosGroupService;
        this.providerGroupService = providerGroupService;
        this.facilityGroupService = facilityGroupService;
        this.unitGroupService = unitGroupService;
        /**
         * subject used to change how many groups to be open initially after applying filtering, grouping and/or sorting
         */
        this.changeNumberOfGroupsToShow$ = new BehaviorSubject(4);
        /**
         * subject to expand groups if necessary
         */
        this.expandGroups$ = new BehaviorSubject(false);
        /**
         * switch to decide if it is necessary to recalculate how many groups should be closed
         */
        this.changeGroupsClosed = false;
        /**
         * emits when it is okay to display group options
         */
        this.groupsLoaded$ = new Subject();
        /**
         * different options to group by and corresponding logic to divide graphs into groups
         */
        this.groupOptions = [];
        /** @type {?} */
        const groupOptions = [warningGroupService, hospitalLosGroupService, providerGroupService, facilityGroupService, unitGroupService];
        /** @type {?} */
        const dependencies = this.compileDependencies(groupOptions);
        // set default value of group by
        this.setDefaults();
        // wait for dependencies to load and then
        combineLatest(dependencies).subscribe(() => this.generateGroupByOptions(groupOptions));
    }
    /**
     * compiles a list of dependencies from all the Group Option classes
     * @param {?} options - list of Services to compile dependencies from
     * @return {?}
     */
    compileDependencies(options) {
        /** @type {?} */
        const dependencies = [];
        for (const option of options) {
            if (option.dependency && dependencies.indexOf(option.dependency) < 0) {
                dependencies.push(option.dependency);
            }
        }
        return dependencies;
    }
    /**
     * generate filter functions and titles for all the group by options and add them to the options list
     * @param {?} options
     * @return {?}
     */
    generateGroupByOptions(options) {
        this.groupOptions = [];
        for (const option of options) {
            this.groupOptions.push(option.generateLanes());
        }
        this.groupsLoaded$.next();
    }
    /**
     * set default value of group by
     * @return {?}
     */
    setDefaults() {
        this.activeGroup = this.warningGroupService.generateLanes();
        this.stagedGroup = this.warningGroupService.generateLanes();
        this.groupSubject$ = new BehaviorSubject(this.warningGroupService.generateLanes().lanes);
    }
    /**
     * what to do if sidebar is destroyed
     * @return {?}
     */
    clearGroupBy() {
        this.activeGroup = this.warningGroupService.generateLanes();
        this.stagedGroup = this.warningGroupService.generateLanes();
        this.groupSubject$.next(this.warningGroupService.generateLanes().lanes);
    }
}
GroupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
GroupService.ctorParameters = () => [
    { type: WarningCategoryGroupService },
    { type: HospitalLosGroupService },
    { type: ProviderGroupService },
    { type: FacilityGroupService },
    { type: UnitGroupService }
];
/** @nocollapse */ GroupService.ngInjectableDef = i0.defineInjectable({ factory: function GroupService_Factory() { return new GroupService(i0.inject(i1.WarningCategoryGroupService), i0.inject(i2.HospitalLosGroupService), i0.inject(i3.ProviderGroupService), i0.inject(i4.FacilityGroupService), i0.inject(i5.UnitGroupService)); }, token: GroupService, providedIn: "root" });
if (false) {
    /**
     * subject used to change how many groups to be open initially after applying filtering, grouping and/or sorting
     * @type {?}
     */
    GroupService.prototype.changeNumberOfGroupsToShow$;
    /**
     * subject to expand groups if necessary
     * @type {?}
     */
    GroupService.prototype.expandGroups$;
    /**
     * switch to decide if it is necessary to recalculate how many groups should be closed
     * @type {?}
     */
    GroupService.prototype.changeGroupsClosed;
    /**
     * emits when it is okay to display group options
     * @type {?}
     */
    GroupService.prototype.groupsLoaded$;
    /**
     * different options to group by and corresponding logic to divide graphs into groups
     * @type {?}
     */
    GroupService.prototype.groupOptions;
    /**
     * tells the groups to update themselves
     * @type {?}
     */
    GroupService.prototype.groupSubject$;
    /**
     * groups active in the array view
     * @type {?}
     */
    GroupService.prototype.activeGroup;
    /**
     * groups currently selected in sidebar
     * @type {?}
     */
    GroupService.prototype.stagedGroup;
    /** @type {?} */
    GroupService.prototype.warningGroupService;
    /** @type {?} */
    GroupService.prototype.hospitalLosGroupService;
    /** @type {?} */
    GroupService.prototype.providerGroupService;
    /** @type {?} */
    GroupService.prototype.facilityGroupService;
    /** @type {?} */
    GroupService.prototype.unitGroupService;
}

//# sourceMappingURL=data:application/json;base64,