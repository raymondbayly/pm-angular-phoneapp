/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LocationSelectorService } from '../filter/locations/location-selector.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../filter/locations/location-selector.service";
export class FacilityGroupService {
    /**
     * @param {?} locationSelectorService
     */
    constructor(locationSelectorService) {
        this.locationSelectorService = locationSelectorService;
        /**
         * things that need to emit before generating the facility lanes
         */
        this.dependency = new Subject();
        this.locationSelectorService.loadedLocations.subscribe(() => {
            this.dependency.next();
        });
    }
    /**
     * generate group choice object for facilities
     * @return {?}
     */
    generateLanes() {
        /** @type {?} */
        const option = {
            groupName: 'Facility',
            lanes: []
        };
        for (const facility of this.locationSelectorService.facilities) {
            option.lanes.push({ laneFunction: this.generateFacilitiyLaneFilterFunction(facility), laneTitle: facility.displayName });
        }
        return option;
    }
    /**
     * generate filter function for grouping by facility
     * @param {?} facility - facility to filter for
     * @return {?}
     */
    generateFacilitiyLaneFilterFunction(facility) {
        /** @type {?} */
        const facilityName = facility.displayName;
        return function (peraGraph) {
            return peraGraph.facilityId === facilityName;
        };
    }
}
FacilityGroupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FacilityGroupService.ctorParameters = () => [
    { type: LocationSelectorService }
];
/** @nocollapse */ FacilityGroupService.ngInjectableDef = i0.defineInjectable({ factory: function FacilityGroupService_Factory() { return new FacilityGroupService(i0.inject(i1.LocationSelectorService)); }, token: FacilityGroupService, providedIn: "root" });
if (false) {
    /**
     * things that need to emit before generating the facility lanes
     * @type {?}
     */
    FacilityGroupService.prototype.dependency;
    /** @type {?} */
    FacilityGroupService.prototype.locationSelectorService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjaWxpdHktZ3JvdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWZpbHRlcnMtbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9ncm91cC9mYWNpbGl0eS1ncm91cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLCtDQUErQyxDQUFDO0FBQ3RGLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7OztBQUs3QixNQUFNOzs7O0lBT0osWUFBb0IsdUJBQWdEO1FBQWhELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7Ozs7MEJBRnZELElBQUksT0FBTyxFQUFRO1FBRzlCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUMxRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3hCLENBQUMsQ0FBQztLQUNKOzs7OztJQUtELGFBQWE7O1FBQ1gsTUFBTSxNQUFNLEdBQTJHO1lBQ3JILFNBQVMsRUFBRSxVQUFVO1lBQ3JCLEtBQUssRUFBRSxFQUFFO1NBQ1YsQ0FBQztRQUNGLEdBQUcsQ0FBQyxDQUFDLE1BQU0sUUFBUSxJQUFJLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQy9ELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7U0FDeEg7UUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDO0tBQ2Y7Ozs7OztJQU1PLG1DQUFtQyxDQUFDLFFBQWtCOztRQUM1RCxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxVQUFVLFNBQW9CO1lBQ25DLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxLQUFLLFlBQVksQ0FBQztTQUM5QyxDQUFDOzs7O1lBdENMLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQUxPLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7R3JvdXBPcHRpb259IGZyb20gJy4vR3JvdXBPcHRpb24nO1xuaW1wb3J0IHtGYWNpbGl0eSwgUGVyYUdyYXBofSBmcm9tICduZy1jb21tb24tbGlicmFyeSc7XG5pbXBvcnQge0xvY2F0aW9uU2VsZWN0b3JTZXJ2aWNlfSBmcm9tICcuLi9maWx0ZXIvbG9jYXRpb25zL2xvY2F0aW9uLXNlbGVjdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRmFjaWxpdHlHcm91cFNlcnZpY2UgaW1wbGVtZW50cyBHcm91cE9wdGlvbiB7XG5cbiAgLyoqXG4gICAqIHRoaW5ncyB0aGF0IG5lZWQgdG8gZW1pdCBiZWZvcmUgZ2VuZXJhdGluZyB0aGUgZmFjaWxpdHkgbGFuZXNcbiAgICovXG4gIGRlcGVuZGVuY3kgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYXRpb25TZWxlY3RvclNlcnZpY2U6IExvY2F0aW9uU2VsZWN0b3JTZXJ2aWNlKSB7XG4gICAgdGhpcy5sb2NhdGlvblNlbGVjdG9yU2VydmljZS5sb2FkZWRMb2NhdGlvbnMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuZGVwZW5kZW5jeS5uZXh0KCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogZ2VuZXJhdGUgZ3JvdXAgY2hvaWNlIG9iamVjdCBmb3IgZmFjaWxpdGllc1xuICAgKi9cbiAgZ2VuZXJhdGVMYW5lcygpOiB7IGdyb3VwTmFtZTogc3RyaW5nLCBsYW5lczogeyBsYW5lRnVuY3Rpb246IChwZXJhR3JhcGg6IFBlcmFHcmFwaCkgPT4gYm9vbGVhbiwgbGFuZVRpdGxlOiBzdHJpbmcgfVtdIH0ge1xuICAgIGNvbnN0IG9wdGlvbjogeyBncm91cE5hbWU6IHN0cmluZywgbGFuZXM6IHsgbGFuZUZ1bmN0aW9uOiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpID0+IGJvb2xlYW4sIGxhbmVUaXRsZTogc3RyaW5nIH1bXSB9ID0ge1xuICAgICAgZ3JvdXBOYW1lOiAnRmFjaWxpdHknLFxuICAgICAgbGFuZXM6IFtdXG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IGZhY2lsaXR5IG9mIHRoaXMubG9jYXRpb25TZWxlY3RvclNlcnZpY2UuZmFjaWxpdGllcykge1xuICAgICAgb3B0aW9uLmxhbmVzLnB1c2goe2xhbmVGdW5jdGlvbjogdGhpcy5nZW5lcmF0ZUZhY2lsaXRpeUxhbmVGaWx0ZXJGdW5jdGlvbihmYWNpbGl0eSksIGxhbmVUaXRsZTogZmFjaWxpdHkuZGlzcGxheU5hbWV9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZW5lcmF0ZSBmaWx0ZXIgZnVuY3Rpb24gZm9yIGdyb3VwaW5nIGJ5IGZhY2lsaXR5XG4gICAqIEBwYXJhbSBmYWNpbGl0eSAtIGZhY2lsaXR5IHRvIGZpbHRlciBmb3JcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVGYWNpbGl0aXlMYW5lRmlsdGVyRnVuY3Rpb24oZmFjaWxpdHk6IEZhY2lsaXR5KSB7XG4gICAgY29uc3QgZmFjaWxpdHlOYW1lID0gZmFjaWxpdHkuZGlzcGxheU5hbWU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwZXJhR3JhcGg6IFBlcmFHcmFwaCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHBlcmFHcmFwaC5mYWNpbGl0eUlkID09PSBmYWNpbGl0eU5hbWU7XG4gICAgfTtcbiAgfVxufVxuIl19