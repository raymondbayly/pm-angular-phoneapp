/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FilterService } from '../filter.service';
import * as i0 from "@angular/core";
import * as i1 from "../filter.service";
export class AgeGroupsService {
    /**
     * @param {?} filterService
     */
    constructor(filterService) {
        this.filterService = filterService;
        this.PEDIATRIC_GROUP = 'Pediatric';
        this.ADULT_GROUP = 'Adult';
        this.ALL_GROUP = 'All';
    }
    /**
     * @return {?}
     */
    unstageAgeGroups() {
        this.filterService.unstageFilter(this.PEDIATRIC_GROUP);
        this.filterService.unstageFilter(this.ADULT_GROUP);
        this.filterService.unstageFilter(this.ALL_GROUP);
    }
    /**
     * Always returns true because we want all the patients
     * @param {?} peragraph - peragraph to filter
     * @return {?}
     */
    allFilterFunction(peragraph) {
        return true;
    }
    /**
     * Filter out any peragraphs with patients younger than 18
     * @param {?} peragraph - peragraph to be filtered
     * @return {?}
     */
    adultFilterFunction(peragraph) {
        /** @type {?} */
        const birthDate = new Date();
        birthDate.setMilliseconds(peragraph.patient.dob);
        /** @type {?} */
        const currentDate = new Date();
        currentDate.setMilliseconds(Date.now());
        /** @type {?} */
        const age = currentDate.getFullYear() - birthDate.getFullYear();
        return age >= 18;
    }
    /**
     * Filter out any peragraphs with patients older than 18
     * @param {?} peragraph - peragraph to be filtered
     * @return {?}
     */
    pediatricFilterFunction(peragraph) {
        /** @type {?} */
        const birthDate = new Date();
        birthDate.setMilliseconds(peragraph.patient.dob);
        /** @type {?} */
        const currentDate = new Date();
        currentDate.setMilliseconds(Date.now());
        /** @type {?} */
        const age = currentDate.getFullYear() - birthDate.getFullYear();
        return age < 18;
    }
}
AgeGroupsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AgeGroupsService.ctorParameters = () => [
    { type: FilterService }
];
/** @nocollapse */ AgeGroupsService.ngInjectableDef = i0.defineInjectable({ factory: function AgeGroupsService_Factory() { return new AgeGroupsService(i0.inject(i1.FilterService)); }, token: AgeGroupsService, providedIn: "root" });
if (false) {
    /** @type {?} */
    AgeGroupsService.prototype.PEDIATRIC_GROUP;
    /** @type {?} */
    AgeGroupsService.prototype.ADULT_GROUP;
    /** @type {?} */
    AgeGroupsService.prototype.ALL_GROUP;
    /** @type {?} */
    AgeGroupsService.prototype.filterService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdlLWdyb3Vwcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctZmlsdGVycy1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2ZpbHRlci9hZ2Vncm91cHMvYWdlLWdyb3Vwcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7O0FBS2hELE1BQU07Ozs7SUFNSixZQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTsrQkFKZCxXQUFXOzJCQUNmLE9BQU87eUJBQ1QsS0FBSztLQUdoQzs7OztJQUVNLGdCQUFnQjtRQUNyQixJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs7Ozs7OztJQU81QyxpQkFBaUIsQ0FBQyxTQUFvQjtRQUMzQyxNQUFNLENBQUMsSUFBSSxDQUFDOzs7Ozs7O0lBT1AsbUJBQW1CLENBQUMsU0FBb0I7O1FBQzdDLE1BQU0sU0FBUyxHQUFTLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbkMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztRQUNqRCxNQUFNLFdBQVcsR0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3JDLFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7O1FBQ3hDLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEUsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUM7Ozs7Ozs7SUFPWix1QkFBdUIsQ0FBQyxTQUFvQjs7UUFDakQsTUFBTSxTQUFTLEdBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNuQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7O1FBQ2pELE1BQU0sV0FBVyxHQUFTLElBQUksSUFBSSxFQUFFLENBQUM7UUFDckMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzs7UUFDeEMsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoRSxNQUFNLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQzs7OztZQWpEbkIsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBSk8sYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1BlcmFHcmFwaH0gZnJvbSAnbmctY29tbW9uLWxpYnJhcnknO1xuaW1wb3J0IHtGaWx0ZXJTZXJ2aWNlfSBmcm9tICcuLi9maWx0ZXIuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFnZUdyb3Vwc1NlcnZpY2Uge1xuXG4gIHB1YmxpYyByZWFkb25seSBQRURJQVRSSUNfR1JPVVAgPSAnUGVkaWF0cmljJztcbiAgcHVibGljIHJlYWRvbmx5IEFEVUxUX0dST1VQID0gJ0FkdWx0JztcbiAgcHVibGljIHJlYWRvbmx5IEFMTF9HUk9VUCA9ICdBbGwnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlsdGVyU2VydmljZTogRmlsdGVyU2VydmljZSkge1xuICB9XG5cbiAgcHVibGljIHVuc3RhZ2VBZ2VHcm91cHMoKSB7XG4gICAgdGhpcy5maWx0ZXJTZXJ2aWNlLnVuc3RhZ2VGaWx0ZXIodGhpcy5QRURJQVRSSUNfR1JPVVApO1xuICAgIHRoaXMuZmlsdGVyU2VydmljZS51bnN0YWdlRmlsdGVyKHRoaXMuQURVTFRfR1JPVVApO1xuICAgIHRoaXMuZmlsdGVyU2VydmljZS51bnN0YWdlRmlsdGVyKHRoaXMuQUxMX0dST1VQKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbHdheXMgcmV0dXJucyB0cnVlIGJlY2F1c2Ugd2Ugd2FudCBhbGwgdGhlIHBhdGllbnRzXG4gICAqIEBwYXJhbSBwZXJhZ3JhcGggLSBwZXJhZ3JhcGggdG8gZmlsdGVyXG4gICAqL1xuICBwdWJsaWMgYWxsRmlsdGVyRnVuY3Rpb24ocGVyYWdyYXBoOiBQZXJhR3JhcGgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWx0ZXIgb3V0IGFueSBwZXJhZ3JhcGhzIHdpdGggcGF0aWVudHMgeW91bmdlciB0aGFuIDE4XG4gICAqIEBwYXJhbSBwZXJhZ3JhcGggLSBwZXJhZ3JhcGggdG8gYmUgZmlsdGVyZWRcbiAgICovXG4gIHB1YmxpYyBhZHVsdEZpbHRlckZ1bmN0aW9uKHBlcmFncmFwaDogUGVyYUdyYXBoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgYmlydGhEYXRlOiBEYXRlID0gbmV3IERhdGUoKTtcbiAgICBiaXJ0aERhdGUuc2V0TWlsbGlzZWNvbmRzKHBlcmFncmFwaC5wYXRpZW50LmRvYik7XG4gICAgY29uc3QgY3VycmVudERhdGU6IERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGN1cnJlbnREYXRlLnNldE1pbGxpc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICBjb25zdCBhZ2UgPSBjdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpIC0gYmlydGhEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFnZSA+PSAxODtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWx0ZXIgb3V0IGFueSBwZXJhZ3JhcGhzIHdpdGggcGF0aWVudHMgb2xkZXIgdGhhbiAxOFxuICAgKiBAcGFyYW0gcGVyYWdyYXBoIC0gcGVyYWdyYXBoIHRvIGJlIGZpbHRlcmVkXG4gICAqL1xuICBwdWJsaWMgcGVkaWF0cmljRmlsdGVyRnVuY3Rpb24ocGVyYWdyYXBoOiBQZXJhR3JhcGgpOiBib29sZWFuIHtcbiAgICBjb25zdCBiaXJ0aERhdGU6IERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGJpcnRoRGF0ZS5zZXRNaWxsaXNlY29uZHMocGVyYWdyYXBoLnBhdGllbnQuZG9iKTtcbiAgICBjb25zdCBjdXJyZW50RGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgY3VycmVudERhdGUuc2V0TWlsbGlzZWNvbmRzKERhdGUubm93KCkpO1xuICAgIGNvbnN0IGFnZSA9IGN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCkgLSBiaXJ0aERhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICByZXR1cm4gYWdlIDwgMTg7XG4gIH1cbn1cbiJdfQ==