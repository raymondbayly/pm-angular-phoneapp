/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { timer } from 'rxjs';
import { HttpClient, HttpParams } from '@angular/common/http';
import { FilterQueryConfigService } from './filter-query-config.service';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./filter-query-config.service";
export class FilterQueryRestService {
    /**
     * @param {?} http
     * @param {?} filterQueryConfig
     */
    constructor(http, filterQueryConfig) {
        this.http = http;
        this.filterQueryConfig = filterQueryConfig;
        this.pollInstance$ = timer(0, 900000);
    }
    /**
     * Rest call for getting filtered visits according to current criteria
     * @param {?} queryParamsGetter
     * @return {?}
     */
    getFilteredVisits(queryParamsGetter) {
        /** @type {?} */
        const serverFilterCriteria = queryParamsGetter();
        return this.http.get(this.filterQueryConfig.getFilterQueryEndPoint(), { params: this.getQueryParams(serverFilterCriteria) });
    }
    /**
     * get updated filter criteria on an interval
     * @param {?} queryParamsGetter
     * @return {?}
     */
    getFilteredVisitsInterval(queryParamsGetter) {
        return this.pollInstance$.pipe(switchMap((() => this.getFilteredVisits(queryParamsGetter))));
    }
    /**
     * returns the filter criteria in the form of a HttpParams object
     * @param {?} serverFilterCriteria
     * @return {?}
     */
    getQueryParams(serverFilterCriteria) {
        // check if object is empty
        if (Object.keys(serverFilterCriteria).length === 0) {
            return null;
        }
        else {
            /** @type {?} */
            let params = new HttpParams();
            // for every key in the object attach a list of params
            for (const key in serverFilterCriteria) {
                if (serverFilterCriteria.hasOwnProperty(key)) {
                    // traverse the list of params for same key and add each one
                    for (let criteria of serverFilterCriteria[key]) {
                        criteria = criteria.replace(/,/g, '|');
                        params = params.append(key, criteria);
                    }
                }
            }
            return params;
        }
    }
}
FilterQueryRestService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FilterQueryRestService.ctorParameters = () => [
    { type: HttpClient },
    { type: FilterQueryConfigService }
];
/** @nocollapse */ FilterQueryRestService.ngInjectableDef = i0.defineInjectable({ factory: function FilterQueryRestService_Factory() { return new FilterQueryRestService(i0.inject(i1.HttpClient), i0.inject(i2.FilterQueryConfigService)); }, token: FilterQueryRestService, providedIn: "root" });
if (false) {
    /** @type {?} */
    FilterQueryRestService.prototype.pollInstance$;
    /** @type {?} */
    FilterQueryRestService.prototype.http;
    /** @type {?} */
    FilterQueryRestService.prototype.filterQueryConfig;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXF1ZXJ5LXJlc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWZpbHRlcnMtbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXIvcXVlcnktZmlsdGVycy9maWx0ZXItcXVlcnktcmVzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFLekMsTUFBTTs7Ozs7SUFJSixZQUFvQixJQUFnQixFQUFVLGlCQUEyQztRQUFyRSxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUN2RixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FFdkM7Ozs7OztJQUtNLGlCQUFpQixDQUFDLGlCQUFzQjs7UUFDN0MsTUFBTSxvQkFBb0IsR0FBRyxpQkFBaUIsRUFBRSxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBVyxJQUFJLENBQUMsaUJBQWlCLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFDLEVBQUMsQ0FBQyxDQUFDOzs7Ozs7O0lBTWhJLHlCQUF5QixDQUFDLGlCQUFzQjtRQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUN0QyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQ2xELENBQUMsQ0FBQzs7Ozs7OztJQU1MLGNBQWMsQ0FBQyxvQkFBd0I7O1FBRXJDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRCxNQUFNLENBQUMsSUFBSSxDQUFDO1NBQ2I7UUFBQyxJQUFJLENBQUMsQ0FBQzs7WUFFTixJQUFJLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDOztZQUU5QixHQUFHLENBQUMsQ0FBRSxNQUFNLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O29CQUU3QyxHQUFHLENBQUMsQ0FBRSxJQUFJLFFBQVEsSUFBSSxvQkFBb0IsQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQ2pELFFBQVEsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQzt3QkFDdkMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO3FCQUN2QztpQkFDRjthQUNGO1lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztTQUNmO0tBQ0Y7OztZQW5ERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFOTyxVQUFVO1lBQ1Ysd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCB0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0h0dHBDbGllbnQsIEh0dHBQYXJhbXN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7RmlsdGVyUXVlcnlDb25maWdTZXJ2aWNlfSBmcm9tICcuL2ZpbHRlci1xdWVyeS1jb25maWcuc2VydmljZSc7XG5pbXBvcnQge3N3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGaWx0ZXJRdWVyeVJlc3RTZXJ2aWNlIHtcblxuICBwcml2YXRlIHBvbGxJbnN0YW5jZSQ6IE9ic2VydmFibGU8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgZmlsdGVyUXVlcnlDb25maWc6IEZpbHRlclF1ZXJ5Q29uZmlnU2VydmljZSkge1xuICAgIHRoaXMucG9sbEluc3RhbmNlJCA9IHRpbWVyKDAsIDkwMDAwMCk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0IGNhbGwgZm9yIGdldHRpbmcgZmlsdGVyZWQgdmlzaXRzIGFjY29yZGluZyB0byBjdXJyZW50IGNyaXRlcmlhXG4gICAqL1xuICBwdWJsaWMgZ2V0RmlsdGVyZWRWaXNpdHMocXVlcnlQYXJhbXNHZXR0ZXI6IGFueSk6IE9ic2VydmFibGU8c3RyaW5nW10+IHtcbiAgICBjb25zdCBzZXJ2ZXJGaWx0ZXJDcml0ZXJpYSA9IHF1ZXJ5UGFyYW1zR2V0dGVyKCk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8c3RyaW5nW10+KHRoaXMuZmlsdGVyUXVlcnlDb25maWcuZ2V0RmlsdGVyUXVlcnlFbmRQb2ludCgpLCB7cGFyYW1zOiB0aGlzLmdldFF1ZXJ5UGFyYW1zKHNlcnZlckZpbHRlckNyaXRlcmlhKX0pO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCB1cGRhdGVkIGZpbHRlciBjcml0ZXJpYSBvbiBhbiBpbnRlcnZhbFxuICAgKi9cbiAgcHVibGljIGdldEZpbHRlcmVkVmlzaXRzSW50ZXJ2YWwocXVlcnlQYXJhbXNHZXR0ZXI6IGFueSkge1xuICAgIHJldHVybiB0aGlzLnBvbGxJbnN0YW5jZSQucGlwZShzd2l0Y2hNYXAoXG4gICAgICAoKCkgPT4gdGhpcy5nZXRGaWx0ZXJlZFZpc2l0cyhxdWVyeVBhcmFtc0dldHRlcikpXG4gICAgKSk7XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJucyB0aGUgZmlsdGVyIGNyaXRlcmlhIGluIHRoZSBmb3JtIG9mIGEgSHR0cFBhcmFtcyBvYmplY3RcbiAgICovXG4gIGdldFF1ZXJ5UGFyYW1zKHNlcnZlckZpbHRlckNyaXRlcmlhOiB7fSk6IEh0dHBQYXJhbXMge1xuICAgIC8vIGNoZWNrIGlmIG9iamVjdCBpcyBlbXB0eVxuICAgIGlmIChPYmplY3Qua2V5cyhzZXJ2ZXJGaWx0ZXJDcml0ZXJpYSkubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgbm90IGVtcHR5IGNyZWF0ZSBwYXJhbXMgb2JqZWN0XG4gICAgICBsZXQgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcbiAgICAgIC8vIGZvciBldmVyeSBrZXkgaW4gdGhlIG9iamVjdCBhdHRhY2ggYSBsaXN0IG9mIHBhcmFtc1xuICAgICAgZm9yICggY29uc3Qga2V5IGluIHNlcnZlckZpbHRlckNyaXRlcmlhKSB7XG4gICAgICAgIGlmIChzZXJ2ZXJGaWx0ZXJDcml0ZXJpYS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgLy8gdHJhdmVyc2UgdGhlIGxpc3Qgb2YgcGFyYW1zIGZvciBzYW1lIGtleSBhbmQgYWRkIGVhY2ggb25lXG4gICAgICAgICAgZm9yICggbGV0IGNyaXRlcmlhIG9mIHNlcnZlckZpbHRlckNyaXRlcmlhW2tleV0gKSB7XG4gICAgICAgICAgICBjcml0ZXJpYSA9IGNyaXRlcmlhLnJlcGxhY2UoLywvZywgJ3wnKTtcbiAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcy5hcHBlbmQoa2V5LCBjcml0ZXJpYSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=