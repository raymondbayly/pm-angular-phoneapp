/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { LocationSelectorService } from './locations/location-selector.service';
import { Locations } from './model/locations';
import { FilterQueryRestService } from './query-filters/filter-query-rest.service';
import { SortService } from '../sort/sort.service';
import { SortChoices } from '../sort/SortEnum';
import { GroupService } from '../group/group.service';
import * as i0 from "@angular/core";
import * as i1 from "./locations/location-selector.service";
import * as i2 from "./query-filters/filter-query-rest.service";
import * as i3 from "../sort/sort.service";
import * as i4 from "../group/group.service";
/**
 * Manages the staging filters object -> the current status of the sidebar,
 * the active filters object -> the filters currently being applied to the array view,
 * and the subject which is used to update the array view when filters are applied.
 */
export class FilterService {
    /**
     * @param {?} locationSelectorService
     * @param {?} filterRestService
     * @param {?} sortService
     * @param {?} groupService
     */
    constructor(locationSelectorService, filterRestService, sortService, groupService) {
        this.locationSelectorService = locationSelectorService;
        this.filterRestService = filterRestService;
        this.sortService = sortService;
        this.groupService = groupService;
        /**
         * BehaviorSubject for when selected locations change.
         */
        this.locationsChanged = new BehaviorSubject({
            locations: new Locations(),
            executeFilterQuery: false,
        });
        /**
         * Filters actively applied to the array view.
         */
        this.activeFilters = {};
        /**
         * Filters currently selected in the sidebar but NOT applied.
         */
        this.stagingFilters = {};
        /**
         * visit numbers of patients filtered out by server side filters
         */
        this.serverFilteredVisits = [];
        /**
         * name of filter for server side filters
         */
        this.serverFilterName = 'query-filter';
        /**
         * criteria to build filter query from as currently represented in sidebar
         */
        this.stagedServerFilterCriteria = {};
        /**
         * criteria for server side filtering currently ACTIVE in array view
         */
        this._activeServerFilterCriteria = {};
        /**
         * Subject which is updated when filters are applied.
         */
        this.filterSubject$ = new BehaviorSubject(this.activeFilters);
    }
    /**
     * Adds a staged filter (prior to activating the filters)
     * @param {?} filterName Name of the filter to stage.
     * @param {?} filterFunction The filter function to stage.
     * @return {?}
     */
    stageFilter(filterName, filterFunction) {
        this.stagingFilters[filterName] = filterFunction;
    }
    /**
     * Removes a staged filter.
     * @param {?} filterName Name of filter to unstage.
     * @return {?}
     */
    unstageFilter(filterName) {
        delete this.stagingFilters[filterName];
    }
    /**
     * gets filter function that filters out patients based on criteria from conglomerated filter query
     * @return {?}
     */
    getServerSideFilterFunction() {
        /** @type {?} */
        const thisRef = this;
        return function (peragraph) {
            for (const vnm of thisRef.serverFilteredVisits) {
                if (vnm === peragraph.vnm) {
                    return true;
                }
            }
            return false;
        };
    }
    /**
     * add filter criteria to criteria object
     * @param {?} criteria - array of criteria to add to filter
     * @param {?} title - property name of criteria on the filterCriteria object -> MUST match a
     * QueryParam in the REST call located in common.FilterController or it won't be applied
     * @return {?}
     */
    stageServerFilterCriteria(criteria, title) {
        this.stagedServerFilterCriteria[title] = criteria;
        this.stageFilter(this.serverFilterName, this.getServerSideFilterFunction());
    }
    /**
     * removes a criteria object from the filter criteria object
     * if no criterion remain, the filter is removed from the staged filters
     * @param {?} title - name of the criteria to be removed
     * @return {?}
     */
    removeStagedServerCriteria(title) {
        delete this.stagedServerFilterCriteria[title];
        if (Object.keys(this.stagedServerFilterCriteria).length === 0) {
            this.unstageFilter(this.serverFilterName);
        }
    }
    /**
     * return staged server side filter parameters
     * @return {?}
     */
    getStagedServerSideFilterCriteria() {
        return this.stagedServerFilterCriteria;
    }
    /**
     * returns a function which returns the current active filters at the given time
     * @return {?}
     */
    getActiveServerFilterCriteria() {
        /** @type {?} */
        const filterServiceRef = this;
        return function () {
            return filterServiceRef._activeServerFilterCriteria;
        };
    }
    /**
     * what to do if sidebar is destroyed
     * @return {?}
     */
    clearAllFilters() {
        this.activeFilters = {};
        this.stagingFilters = {};
        this.serverFilteredVisits = [];
        this.stagedServerFilterCriteria = {};
        this._activeServerFilterCriteria = {};
        this.filterSubject$.next({});
        this.groupService.clearGroupBy();
        this.sortService.clearSort();
    }
    /**
     * Activate the staged filters
     *
     * 2 seperate paths:
     *      A. Location changes -> refresh graphs is called after changing the endpoint parameters and a variable is passed in
     *                              to let refresh changes know if the server side filter needs to be refreshed
     *      B. No location changes -> If the server side filtering needs to be refreshed, its REST call is initiated before client side filtering occurs,
     *                              otherwise client side filtering occurs immediatley on existing graphs
     * @return {?}
     */
    activateFilters() {
        // close appropriate groups if changing, filters, group by, or sort
        this.groupService.changeGroupsClosed = true;
        // set staged sort to active
        this.sortService.activeSortFunction = this.sortService.getStagedSortFunction();
        this.sortService.activeSortName = this.sortService.stagedSortName;
        // set staged filters to active filters
        this.activeFilters = {};
        for (const filter in this.stagingFilters) {
            if (this.stagingFilters.hasOwnProperty(filter)) {
                this.activeFilters[filter] = this.stagingFilters[filter];
            }
        }
        // set staged server side filtering query parameters to active
        this._activeServerFilterCriteria = {};
        for (const criteria in this.stagedServerFilterCriteria) {
            if (this.stagedServerFilterCriteria.hasOwnProperty(criteria)) {
                this._activeServerFilterCriteria[criteria] = this.stagedServerFilterCriteria[criteria];
            }
        }
        /** @type {?} */
        const executeQuery = this.activeFilters.hasOwnProperty(this.serverFilterName);
        // Check if unit selection has changed
        if (!this.locationSelectorService.isLocationSelectionTheSame() || this.sortService.activeSortName === SortChoices.RIScore || this.groupService.stagedGroup.groupName !== this.groupService.activeGroup.groupName) {
            this.groupService.activeGroup = this.groupService.stagedGroup;
            this.groupService.groupSubject$.next(this.groupService.activeGroup.lanes);
            /** @type {?} */
            const selectedLocations = this.locationSelectorService.getLocationsToFilter();
            // Signal that location selections have changed and whether or not to execute the filter query
            this.locationsChanged.next({ locations: selectedLocations, executeFilterQuery: executeQuery });
        }
        else {
            // if filter query needs to be executed, wait for it to return before filtering the graphs in the client
            if (executeQuery) {
                this.filterRestService.getFilteredVisits(this.getActiveServerFilterCriteria()).subscribe((visits) => {
                    this.serverFilteredVisits = visits;
                    this.filterSubject$.next(this.activeFilters);
                });
            }
            else {
                // pass the filter subject with the updated filters
                setTimeout(() => this.filterSubject$.next(this.activeFilters), 500);
            }
        }
    }
}
FilterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FilterService.ctorParameters = () => [
    { type: LocationSelectorService },
    { type: FilterQueryRestService },
    { type: SortService },
    { type: GroupService }
];
/** @nocollapse */ FilterService.ngInjectableDef = i0.defineInjectable({ factory: function FilterService_Factory() { return new FilterService(i0.inject(i1.LocationSelectorService), i0.inject(i2.FilterQueryRestService), i0.inject(i3.SortService), i0.inject(i4.GroupService)); }, token: FilterService, providedIn: "root" });
if (false) {
    /**
     * BehaviorSubject for when selected locations change.
     * @type {?}
     */
    FilterService.prototype.locationsChanged;
    /**
     * Filters actively applied to the array view.
     * @type {?}
     */
    FilterService.prototype.activeFilters;
    /**
     * Filters currently selected in the sidebar but NOT applied.
     * @type {?}
     */
    FilterService.prototype.stagingFilters;
    /**
     * visit numbers of patients filtered out by server side filters
     * @type {?}
     */
    FilterService.prototype.serverFilteredVisits;
    /**
     * name of filter for server side filters
     * @type {?}
     */
    FilterService.prototype.serverFilterName;
    /**
     * criteria to build filter query from as currently represented in sidebar
     * @type {?}
     */
    FilterService.prototype.stagedServerFilterCriteria;
    /**
     * criteria for server side filtering currently ACTIVE in array view
     * @type {?}
     */
    FilterService.prototype._activeServerFilterCriteria;
    /**
     * Subject which is updated when filters are applied.
     * @type {?}
     */
    FilterService.prototype.filterSubject$;
    /** @type {?} */
    FilterService.prototype.locationSelectorService;
    /** @type {?} */
    FilterService.prototype.filterRestService;
    /** @type {?} */
    FilterService.prototype.sortService;
    /** @type {?} */
    FilterService.prototype.groupService;
}

//# sourceMappingURL=data:application/json;base64,