/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class WarningTimeFrameFilterService {
    constructor() { }
    /**
     * filters out graphs with warnings older than warning timeframe limit
     * @param {?} warningTimeFrame - # of hours to check back for warning activity
     * @return {?}
     */
    getFilterFunction(warningTimeFrame) {
        /** @type {?} */
        const warningTimeFrameLocal = warningTimeFrame;
        return function (peraGraph) {
            if (peraGraph.activeWarning && peraGraph.activeWarning.createdDate) {
                // check if date warning was created is older then the warning time frame limit
                if (peraGraph.activeWarning.createdDate >= ((new Date()).getTime()) - (warningTimeFrameLocal * 3600000)) {
                    return true;
                }
            }
            else {
                return false;
            }
        };
    }
}
WarningTimeFrameFilterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WarningTimeFrameFilterService.ctorParameters = () => [];
/** @nocollapse */ WarningTimeFrameFilterService.ngInjectableDef = i0.defineInjectable({ factory: function WarningTimeFrameFilterService_Factory() { return new WarningTimeFrameFilterService(); }, token: WarningTimeFrameFilterService, providedIn: "root" });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybmluZy10aW1lLWZyYW1lLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctZmlsdGVycy1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2ZpbHRlci93YXJuaW5nLXRpbWUtZnJhbWUvd2FybmluZy10aW1lLWZyYW1lLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0zQyxNQUFNO0lBRUosaUJBQWlCOzs7Ozs7SUFNakIsaUJBQWlCLENBQUMsZ0JBQXdCOztRQUN4QyxNQUFNLHFCQUFxQixHQUFHLGdCQUFnQixDQUFDO1FBQy9DLE1BQU0sQ0FBQyxVQUFVLFNBQW9CO1lBQ25DLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLElBQUksU0FBUyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDOztnQkFFbkUsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxXQUFXLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4RyxNQUFNLENBQUMsSUFBSSxDQUFDO2lCQUNiO2FBQ0Y7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ2Q7U0FDRixDQUFDO0tBQ0g7OztZQXZCRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1BlcmFHcmFwaH0gZnJvbSAnbmctY29tbW9uLWxpYnJhcnknO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBXYXJuaW5nVGltZUZyYW1lRmlsdGVyU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAvKipcbiAgICogZmlsdGVycyBvdXQgZ3JhcGhzIHdpdGggd2FybmluZ3Mgb2xkZXIgdGhhbiB3YXJuaW5nIHRpbWVmcmFtZSBsaW1pdFxuICAgKiBAcGFyYW0gd2FybmluZ1RpbWVGcmFtZSAtICMgb2YgaG91cnMgdG8gY2hlY2sgYmFjayBmb3Igd2FybmluZyBhY3Rpdml0eVxuICAgKi9cbiAgZ2V0RmlsdGVyRnVuY3Rpb24od2FybmluZ1RpbWVGcmFtZTogbnVtYmVyKSB7XG4gICAgY29uc3Qgd2FybmluZ1RpbWVGcmFtZUxvY2FsID0gd2FybmluZ1RpbWVGcmFtZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHBlcmFHcmFwaDogUGVyYUdyYXBoKTogYm9vbGVhbiB7XG4gICAgICBpZiAocGVyYUdyYXBoLmFjdGl2ZVdhcm5pbmcgJiYgcGVyYUdyYXBoLmFjdGl2ZVdhcm5pbmcuY3JlYXRlZERhdGUpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgZGF0ZSB3YXJuaW5nIHdhcyBjcmVhdGVkIGlzIG9sZGVyIHRoZW4gdGhlIHdhcm5pbmcgdGltZSBmcmFtZSBsaW1pdFxuICAgICAgICBpZiAocGVyYUdyYXBoLmFjdGl2ZVdhcm5pbmcuY3JlYXRlZERhdGUgPj0gKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkpIC0gKHdhcm5pbmdUaW1lRnJhbWVMb2NhbCAqIDM2MDAwMDApKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG4iXX0=