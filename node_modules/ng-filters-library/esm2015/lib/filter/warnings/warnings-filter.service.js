/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class WarningsFilterService {
    constructor() {
        /**
         * Warning levels that are selected. Start with all of them.
         */
        this.selectedWarnings = ['warning_v', 'warning_h', 'warning_m', 'warning_none', 'warning_no_ri'];
        /**
         * Configurations for warning level filter options.
         *
         * Contains a filter id, the color of the warning level and a filter function for filtering out
         * the warning if NOT selected.
         */
        this.filterOptions = [
            {
                filterID: 'warning_v', color: '#D51C19',
                filterFunction: function (peragraph) {
                    return !(peragraph.activeWarning && peragraph.activeWarning.category === 'V');
                }
            },
            {
                filterID: 'warning_h', color: '#EE834C',
                filterFunction: function (peragraph) {
                    return !(peragraph.activeWarning && peragraph.activeWarning.category === 'H');
                }
            },
            {
                filterID: 'warning_m', color: '#F6CC5D',
                filterFunction: function (peragraph) {
                    return !(peragraph.activeWarning && peragraph.activeWarning.category === 'M');
                }
            },
            {
                filterID: 'warning_none', color: '#3185B8',
                filterFunction: function (peragraph) {
                    return !(!peragraph.activeWarning && !peragraph.discharged);
                }
            }
        ];
    }
}
WarningsFilterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ WarningsFilterService.ngInjectableDef = i0.defineInjectable({ factory: function WarningsFilterService_Factory() { return new WarningsFilterService(); }, token: WarningsFilterService, providedIn: "root" });
if (false) {
    /**
     * Warning levels that are selected. Start with all of them.
     * @type {?}
     */
    WarningsFilterService.prototype.selectedWarnings;
    /**
     * Configurations for warning level filter options.
     *
     * Contains a filter id, the color of the warning level and a filter function for filtering out
     * the warning if NOT selected.
     * @type {?}
     */
    WarningsFilterService.prototype.filterOptions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybmluZ3MtZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1maWx0ZXJzLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvZmlsdGVyL3dhcm5pbmdzL3dhcm5pbmdzLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQU16QyxNQUFNOzs7OztnQ0FHc0IsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDOzs7Ozs7OzZCQVEzRTtZQUNyQjtnQkFDRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxTQUFTO2dCQUN2QyxjQUFjLEVBQUUsVUFBVSxTQUFvQjtvQkFDNUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsYUFBYSxJQUFJLFNBQVMsQ0FBQyxhQUFhLENBQUMsUUFBUSxLQUFLLEdBQUcsQ0FBQyxDQUFDO2lCQUMvRTthQUNGO1lBRUQ7Z0JBQ0UsUUFBUSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsU0FBUztnQkFDdkMsY0FBYyxFQUFFLFVBQVUsU0FBb0I7b0JBQzVDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQWEsSUFBSSxTQUFTLENBQUMsYUFBYSxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUMsQ0FBQztpQkFDL0U7YUFDRjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFNBQVM7Z0JBQ3ZDLGNBQWMsRUFBRSxVQUFVLFNBQW9CO29CQUM1QyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLElBQUksU0FBUyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLENBQUM7aUJBQy9FO2FBQ0Y7WUFDRDtnQkFDRSxRQUFRLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxTQUFTO2dCQUMxQyxjQUFjLEVBQUUsVUFBVSxTQUFvQjtvQkFDNUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQzdEO2FBQ0Y7U0FDRjs7OztZQXhDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQZXJhR3JhcGh9IGZyb20gJ25nLWNvbW1vbi1saWJyYXJ5JztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgV2FybmluZ3NGaWx0ZXJTZXJ2aWNlIHtcblxuICAvKiogV2FybmluZyBsZXZlbHMgdGhhdCBhcmUgc2VsZWN0ZWQuIFN0YXJ0IHdpdGggYWxsIG9mIHRoZW0uICovXG4gIHB1YmxpYyBzZWxlY3RlZFdhcm5pbmdzID0gWyd3YXJuaW5nX3YnLCAnd2FybmluZ19oJywgJ3dhcm5pbmdfbScsICd3YXJuaW5nX25vbmUnLCAnd2FybmluZ19ub19yaSddO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9ucyBmb3Igd2FybmluZyBsZXZlbCBmaWx0ZXIgb3B0aW9ucy5cbiAgICpcbiAgICogQ29udGFpbnMgYSBmaWx0ZXIgaWQsIHRoZSBjb2xvciBvZiB0aGUgd2FybmluZyBsZXZlbCBhbmQgYSBmaWx0ZXIgZnVuY3Rpb24gZm9yIGZpbHRlcmluZyBvdXRcbiAgICogdGhlIHdhcm5pbmcgaWYgTk9UIHNlbGVjdGVkLlxuICAgKi9cbiAgcHVibGljIGZpbHRlck9wdGlvbnMgPSBbXG4gICAge1xuICAgICAgZmlsdGVySUQ6ICd3YXJuaW5nX3YnLCBjb2xvcjogJyNENTFDMTknLFxuICAgICAgZmlsdGVyRnVuY3Rpb246IGZ1bmN0aW9uIChwZXJhZ3JhcGg6IFBlcmFHcmFwaCkge1xuICAgICAgICByZXR1cm4gIShwZXJhZ3JhcGguYWN0aXZlV2FybmluZyAmJiBwZXJhZ3JhcGguYWN0aXZlV2FybmluZy5jYXRlZ29yeSA9PT0gJ1YnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLFxuICAgIHtcbiAgICAgIGZpbHRlcklEOiAnd2FybmluZ19oJywgY29sb3I6ICcjRUU4MzRDJyxcbiAgICAgIGZpbHRlckZ1bmN0aW9uOiBmdW5jdGlvbiAocGVyYWdyYXBoOiBQZXJhR3JhcGgpIHtcbiAgICAgICAgcmV0dXJuICEocGVyYWdyYXBoLmFjdGl2ZVdhcm5pbmcgJiYgcGVyYWdyYXBoLmFjdGl2ZVdhcm5pbmcuY2F0ZWdvcnkgPT09ICdIJyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBmaWx0ZXJJRDogJ3dhcm5pbmdfbScsIGNvbG9yOiAnI0Y2Q0M1RCcsXG4gICAgICBmaWx0ZXJGdW5jdGlvbjogZnVuY3Rpb24gKHBlcmFncmFwaDogUGVyYUdyYXBoKSB7XG4gICAgICAgIHJldHVybiAhKHBlcmFncmFwaC5hY3RpdmVXYXJuaW5nICYmIHBlcmFncmFwaC5hY3RpdmVXYXJuaW5nLmNhdGVnb3J5ID09PSAnTScpO1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgZmlsdGVySUQ6ICd3YXJuaW5nX25vbmUnLCBjb2xvcjogJyMzMTg1QjgnLFxuICAgICAgZmlsdGVyRnVuY3Rpb246IGZ1bmN0aW9uIChwZXJhZ3JhcGg6IFBlcmFHcmFwaCkge1xuICAgICAgICByZXR1cm4gISghcGVyYWdyYXBoLmFjdGl2ZVdhcm5pbmcgJiYgIXBlcmFncmFwaC5kaXNjaGFyZ2VkKTtcbiAgICAgIH1cbiAgICB9XG4gIF07XG5cbn1cbiJdfQ==