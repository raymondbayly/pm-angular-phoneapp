/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class LocationSelectorService {
    constructor() {
        this.loadedLocations = new Subject();
        this.selectAll = new EventEmitter();
        this.deselectAll = new EventEmitter();
        this.checkForIndeterminate = new EventEmitter();
        this.expandUnitsList = new EventEmitter();
        this.collapseUnitsList = new EventEmitter();
        this.selectedUnits = [];
        this.previousUnits = [];
    }
    /**
     * @param {?} unitID
     * @return {?}
     */
    checkUnitSelection(unitID) {
        for (const unit of this.selectedUnits) {
            if (unitID === unit.key.unitID) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} unit
     * @return {?}
     */
    selectUnit(unit) {
        if (this.selectedUnits.indexOf(unit) < 0) {
            this.selectedUnits.push(unit);
        }
        this.checkForIndeterminate.emit(unit.key.facilityID);
    }
    /**
     * @param {?} unit
     * @return {?}
     */
    deselectUnit(unit) {
        /** @type {?} */
        const index = this.selectedUnits.indexOf(unit);
        if (index !== -1) {
            this.selectedUnits.splice(index, 1);
        }
        this.checkForIndeterminate.emit(unit.key.facilityID);
    }
    /**
     * @param {?} facility
     * @return {?}
     */
    selectAllUnitsFromAFacility(facility) {
        for (const unit of this.units) {
            if (unit.key.facilityID === facility.facilityID && this.selectedUnits.indexOf(unit) < 0) {
                this.selectedUnits.push(unit);
            }
        }
    }
    /**
     * @param {?} facility
     * @return {?}
     */
    deselectAllUnitsFromAFacility(facility) {
        for (const unit of this.units) {
            if (unit.key.facilityID === facility.facilityID) {
                /** @type {?} */
                const index = this.selectedUnits.indexOf(unit);
                if (index !== -1) {
                    this.selectedUnits.splice(index, 1);
                }
            }
        }
    }
    /**
     * Check if previous units and selected units are the same
     * @return {?}
     */
    isLocationSelectionTheSame() {
        // quickest way to decide
        if (this.selectedUnits.length !== this.previousUnits.length) {
            return false;
        }
        // check if every unit from selected units exists in previous units
        for (const unit of this.selectedUnits) {
            /** @type {?} */
            let found = false;
            for (const u of this.previousUnits) {
                // match on facility id and unit id
                if (u.key.facilityID === unit.key.facilityID && u.key.unitID === unit.key.unitID) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                return false;
            }
        }
        // check if every unit from previous units exists in selected units
        for (const unit of this.previousUnits) {
            /** @type {?} */
            let found = false;
            for (const u of this.selectedUnits) {
                // match on facility id and unit id
                if (u.key.facilityID === unit.key.facilityID && u.key.unitID === unit.key.unitID) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} facilityId
     * @return {?}
     */
    getUnitCountForFacility(facilityId) {
        /** @type {?} */
        let unitCount = 0;
        for (const u of this.units) {
            if (u.key.facilityID === facilityId) {
                unitCount++;
            }
        }
        return unitCount;
    }
    /**
     * Builds string []s for change of peragraph and FLC REST calls when filtering
     * @return {?}
     */
    getLocationsToFilter() {
        /** @type {?} */
        const selectedLocations = { facilities: [], units: [] };
        for (const u of this.selectedUnits) {
            selectedLocations.units.push(u.key.unitID);
            if (selectedLocations.facilities.indexOf(u.key.facilityID) < 0) {
                selectedLocations.facilities.push(u.key.facilityID);
            }
        }
        /** *
         * If any of the facilities in the selectedLocations are "indeterminate"
         *  then we must supply the list of units. Otherwise we can specify "*"
         *  for the units which makes the rest / sql calls run faster.
          @type {?} */
        let foundIndeterminateFacility = false;
        for (const fId of selectedLocations.facilities) {
            if (this.indeterminateFacilities.indexOf(fId) >= 0) {
                foundIndeterminateFacility = true;
                // It only takes one...
                break;
            }
        }
        if (!foundIndeterminateFacility) {
            selectedLocations.units = ['*'];
        }
        return selectedLocations;
    }
    /**
     * @param {?} facilityID
     * @param {?} isIndeterminate
     * @return {?}
     */
    setFacilityIndeterminateState(facilityID, isIndeterminate) {
        if (isIndeterminate) {
            this.indeterminateFacilities.push(facilityID);
        }
        else {
            if (this.indeterminateFacilities.indexOf(facilityID) >= 0) {
                this.indeterminateFacilities.splice(this.indeterminateFacilities.indexOf(facilityID), 1);
            }
        }
    }
    /**
     * @return {?}
     */
    clearIndeterminateFacilities() {
        this.indeterminateFacilities = [];
    }
}
LocationSelectorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LocationSelectorService.ctorParameters = () => [];
/** @nocollapse */ LocationSelectorService.ngInjectableDef = i0.defineInjectable({ factory: function LocationSelectorService_Factory() { return new LocationSelectorService(); }, token: LocationSelectorService, providedIn: "root" });
if (false) {
    /** @type {?} */
    LocationSelectorService.prototype.loadedLocations;
    /** @type {?} */
    LocationSelectorService.prototype.facilities;
    /** @type {?} */
    LocationSelectorService.prototype.units;
    /**
     * Facilities that do not have all of their units selected
     *  This is useful when setting up the rest call
     *  NOTE: I thought about making facilities a map and putting units
     *       as the value, but the REST call just takes the list of facilities
     *       and units.. so it really is all units or some units with the call.
     * @type {?}
     */
    LocationSelectorService.prototype.indeterminateFacilities;
    /** @type {?} */
    LocationSelectorService.prototype.selectAll;
    /** @type {?} */
    LocationSelectorService.prototype.deselectAll;
    /** @type {?} */
    LocationSelectorService.prototype.checkForIndeterminate;
    /** @type {?} */
    LocationSelectorService.prototype.expandUnitsList;
    /** @type {?} */
    LocationSelectorService.prototype.collapseUnitsList;
    /** @type {?} */
    LocationSelectorService.prototype.selectedUnits;
    /** @type {?} */
    LocationSelectorService.prototype.previousUnits;
}

//# sourceMappingURL=data:application/json;base64,