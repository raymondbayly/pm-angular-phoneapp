/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { DiagnosisConfigService } from './diagnosis-config.service';
import { timer } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./diagnosis-config.service";
export class DiagnosisRestService {
    /**
     * @param {?} http
     * @param {?} diagnosisConfigService
     */
    constructor(http, diagnosisConfigService) {
        this.http = http;
        this.diagnosisConfigService = diagnosisConfigService;
        this.pollInstanceDiagnoses$ = timer(0, 90000);
    }
    /**
     * returns an observable with all diagnoses
     * @return {?}
     */
    getAllDiagnoses() {
        return this.http.get(this.diagnosisConfigService.getDiagnosesEndpoint() + '/all');
    }
    /**
     * returns an observable that broadcasts all active diagnoses on an interval
     * @return {?}
     */
    getAllDiagnosisInterval() {
        return this.pollInstanceDiagnoses$.pipe(switchMap(() => this.getAllDiagnoses()));
    }
}
DiagnosisRestService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DiagnosisRestService.ctorParameters = () => [
    { type: HttpClient },
    { type: DiagnosisConfigService }
];
/** @nocollapse */ DiagnosisRestService.ngInjectableDef = i0.defineInjectable({ factory: function DiagnosisRestService_Factory() { return new DiagnosisRestService(i0.inject(i1.HttpClient), i0.inject(i2.DiagnosisConfigService)); }, token: DiagnosisRestService, providedIn: "root" });
if (false) {
    /** @type {?} */
    DiagnosisRestService.prototype.pollInstanceDiagnoses$;
    /** @type {?} */
    DiagnosisRestService.prototype.http;
    /** @type {?} */
    DiagnosisRestService.prototype.diagnosisConfigService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ25vc2lzLXJlc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWZpbHRlcnMtbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXIvZGlhZ25vc2lzL2RpYWdub3Npcy1yZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ2xFLE9BQU8sRUFBYSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7O0FBS3pDLE1BQU07Ozs7O0lBSUosWUFBb0IsSUFBZ0IsRUFBVSxzQkFBOEM7UUFBeEUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDMUYsSUFBSSxDQUFDLHNCQUFzQixHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDL0M7Ozs7O0lBS0QsZUFBZTtRQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBYyxJQUFJLENBQUMsc0JBQXNCLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQztLQUNoRzs7Ozs7SUFLRCx1QkFBdUI7UUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQ3JDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FDeEMsQ0FBQztLQUNIOzs7WUF6QkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBUE8sVUFBVTtZQUNWLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGlhZ25vc2lzfSBmcm9tICcuLi9tb2RlbC9kaWFnbm9zaXMnO1xuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge0RpYWdub3Npc0NvbmZpZ1NlcnZpY2V9IGZyb20gJy4vZGlhZ25vc2lzLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRGlhZ25vc2lzUmVzdFNlcnZpY2Uge1xuXG4gIHByaXZhdGUgcG9sbEluc3RhbmNlRGlhZ25vc2VzJDogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBkaWFnbm9zaXNDb25maWdTZXJ2aWNlOiBEaWFnbm9zaXNDb25maWdTZXJ2aWNlKSB7XG4gICAgdGhpcy5wb2xsSW5zdGFuY2VEaWFnbm9zZXMkID0gdGltZXIoMCwgOTAwMDApO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybnMgYW4gb2JzZXJ2YWJsZSB3aXRoIGFsbCBkaWFnbm9zZXNcbiAgICovXG4gIGdldEFsbERpYWdub3NlcygpOiBPYnNlcnZhYmxlPERpYWdub3Npc1tdPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8RGlhZ25vc2lzW10+KHRoaXMuZGlhZ25vc2lzQ29uZmlnU2VydmljZS5nZXREaWFnbm9zZXNFbmRwb2ludCgpICsgJy9hbGwnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBicm9hZGNhc3RzIGFsbCBhY3RpdmUgZGlhZ25vc2VzIG9uIGFuIGludGVydmFsXG4gICAqL1xuICBnZXRBbGxEaWFnbm9zaXNJbnRlcnZhbCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLnBvbGxJbnN0YW5jZURpYWdub3NlcyQucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLmdldEFsbERpYWdub3NlcygpKVxuICAgICk7XG4gIH1cblxufVxuIl19