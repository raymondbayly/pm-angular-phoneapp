import { BehaviorSubject } from 'rxjs';
import { PeraGraph } from 'ng-common-library';
import { LocationSelectorService } from './locations/location-selector.service';
import { Locations } from './model/locations';
import { FilterQueryRestService } from './query-filters/filter-query-rest.service';
import { SortService } from '../sort/sort.service';
import { GroupService } from '../group/group.service';
/**
 * Manages the staging filters object -> the current status of the sidebar,
 * the active filters object -> the filters currently being applied to the array view,
 * and the subject which is used to update the array view when filters are applied.
 */
export declare class FilterService {
    private locationSelectorService;
    private filterRestService;
    private sortService;
    private groupService;
    /** BehaviorSubject for when selected locations change. */
    locationsChanged: BehaviorSubject<{
        locations: Locations;
        executeFilterQuery: boolean;
    }>;
    /** Filters actively applied to the array view. */
    activeFilters: {};
    /** Filters currently selected in the sidebar but NOT applied. */
    private stagingFilters;
    /**
     * visit numbers of patients filtered out by server side filters
     */
    serverFilteredVisits: string[];
    /**
     * name of filter for server side filters
     */
    private serverFilterName;
    /**
     * criteria to build filter query from as currently represented in sidebar
     */
    private stagedServerFilterCriteria;
    /**
     * criteria for server side filtering currently ACTIVE in array view
     */
    private _activeServerFilterCriteria;
    /** Subject which is updated when filters are applied. */
    filterSubject$: BehaviorSubject<any>;
    constructor(locationSelectorService: LocationSelectorService, filterRestService: FilterQueryRestService, sortService: SortService, groupService: GroupService);
    /**
     * Adds a staged filter (prior to activating the filters)
     * @param filterName Name of the filter to stage.
     * @param filterFunction The filter function to stage.
     */
    stageFilter(filterName: string, filterFunction: (peragraph: PeraGraph) => boolean): void;
    /**
     * Removes a staged filter.
     * @param filterName Name of filter to unstage.
     */
    unstageFilter(filterName: string): void;
    /**
     * gets filter function that filters out patients based on criteria from conglomerated filter query
     */
    getServerSideFilterFunction(): (peragraph: PeraGraph) => boolean;
    /**
     * add filter criteria to criteria object
     * @param criteria - array of criteria to add to filter
     * @param title - property name of criteria on the filterCriteria object -> MUST match a
     * QueryParam in the REST call located in common.FilterController or it won't be applied
     */
    stageServerFilterCriteria(criteria: Array<string>, title: string): void;
    /**
     * removes a criteria object from the filter criteria object
     * if no criterion remain, the filter is removed from the staged filters
     * @param title - name of the criteria to be removed
     */
    removeStagedServerCriteria(title: string): void;
    /**
     * return staged server side filter parameters
     */
    getStagedServerSideFilterCriteria(): {};
    /**
     * returns a function which returns the current active filters at the given time
     */
    getActiveServerFilterCriteria(): {};
    /**
     * what to do if sidebar is destroyed
     */
    clearAllFilters(): void;
    /**
     * Activate the staged filters
     *
     * 2 seperate paths:
     *      A. Location changes -> refresh graphs is called after changing the endpoint parameters and a variable is passed in
     *                              to let refresh changes know if the server side filter needs to be refreshed
     *      B. No location changes -> If the server side filtering needs to be refreshed, its REST call is initiated before client side filtering occurs,
     *                              otherwise client side filtering occurs immediatley on existing graphs
     */
    activateFilters(): void;
}
