import { EventEmitter } from '@angular/core';
import { Facility } from 'ng-common-library/lib/model/Facility';
import { Unit } from 'ng-common-library/lib/model/Unit';
import { Locations } from '../model/locations';
import { Subject } from 'rxjs';
export declare class LocationSelectorService {
    loadedLocations: Subject<void>;
    facilities: Facility[];
    units: Unit[];
    /** Facilities that do not have all of their units selected
     *  This is useful when setting up the rest call
     *  NOTE: I thought about making facilities a map and putting units
     *       as the value, but the REST call just takes the list of facilities
     *       and units.. so it really is all units or some units with the call.
     */
    indeterminateFacilities: string[];
    selectAll: EventEmitter<Facility>;
    deselectAll: EventEmitter<Facility>;
    checkForIndeterminate: EventEmitter<string>;
    expandUnitsList: EventEmitter<void>;
    collapseUnitsList: EventEmitter<void>;
    selectedUnits: Unit[];
    previousUnits: Unit[];
    constructor();
    checkUnitSelection(unitID: string): boolean;
    selectUnit(unit: Unit): void;
    deselectUnit(unit: Unit): void;
    selectAllUnitsFromAFacility(facility: Facility): void;
    deselectAllUnitsFromAFacility(facility: Facility): void;
    /** Check if previous units and selected units are the same */
    isLocationSelectionTheSame(): boolean;
    private getUnitCountForFacility(facilityId);
    /** Builds string []s for change of peragraph and FLC REST calls when filtering */
    getLocationsToFilter(): Locations;
    setFacilityIndeterminateState(facilityID: string, isIndeterminate: boolean): void;
    clearIndeterminateFacilities(): void;
}
