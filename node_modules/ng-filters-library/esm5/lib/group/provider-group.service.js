/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ProviderFilterService } from '../filter/providers/provider-filter.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../filter/providers/provider-filter.service";
var ProviderGroupService = /** @class */ (function () {
    function ProviderGroupService(providerService) {
        var _this = this;
        this.providerService = providerService;
        /**
         * things that need to emit before generating the provider lanes
         */
        this.dependency = new Subject();
        this.providerService.providersLoaded.subscribe(function () {
            _this.dependency.next();
        });
    }
    /**
     * generate group choice object for facilities
     */
    /**
     * generate group choice object for facilities
     * @return {?}
     */
    ProviderGroupService.prototype.generateLanes = /**
     * generate group choice object for facilities
     * @return {?}
     */
    function () {
        /** @type {?} */
        var option = {
            groupName: 'Provider',
            lanes: []
        };
        try {
            for (var _a = tslib_1.__values(this.providerService.providers), _b = _a.next(); !_b.done; _b = _a.next()) {
                var provider = _b.value;
                option.lanes.push({
                    laneFunction: this.generateProviderLaneFilterFunction(provider),
                    laneTitle: provider.lastName + ', ' + provider.firstName
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return option;
        var e_1, _c;
    };
    /**
     * helper function for generating a filter function for provider groups given a provider
     * @param {?} provider - provider to filter for
     * @return {?}
     */
    ProviderGroupService.prototype.generateProviderLaneFilterFunction = /**
     * helper function for generating a filter function for provider groups given a provider
     * @param {?} provider - provider to filter for
     * @return {?}
     */
    function (provider) {
        /** @type {?} */
        var firstName = provider.firstName;
        /** @type {?} */
        var lastName = provider.lastName;
        return function (peraGraph) {
            return peraGraph.attendingProvider.firstName === firstName && peraGraph.attendingProvider.lastName === lastName;
        };
    };
    ProviderGroupService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ProviderGroupService.ctorParameters = function () { return [
        { type: ProviderFilterService }
    ]; };
    /** @nocollapse */ ProviderGroupService.ngInjectableDef = i0.defineInjectable({ factory: function ProviderGroupService_Factory() { return new ProviderGroupService(i0.inject(i1.ProviderFilterService)); }, token: ProviderGroupService, providedIn: "root" });
    return ProviderGroupService;
}());
export { ProviderGroupService };
if (false) {
    /**
     * things that need to emit before generating the provider lanes
     * @type {?}
     */
    ProviderGroupService.prototype.dependency;
    /** @type {?} */
    ProviderGroupService.prototype.providerService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItZ3JvdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWZpbHRlcnMtbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9ncm91cC9wcm92aWRlci1ncm91cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSw2Q0FBNkMsQ0FBQztBQUNsRixPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDOzs7O0lBWTNCLDhCQUFvQixlQUFzQztRQUExRCxpQkFJQztRQUptQixvQkFBZSxHQUFmLGVBQWUsQ0FBdUI7Ozs7MEJBRjdDLElBQUksT0FBTyxFQUFRO1FBRzlCLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQztZQUM3QyxLQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3hCLENBQUMsQ0FBQztLQUNKO0lBRUQ7O09BRUc7Ozs7O0lBQ0gsNENBQWE7Ozs7SUFBYjs7UUFDRSxJQUFNLE1BQU0sR0FBMkc7WUFDckgsU0FBUyxFQUFFLFVBQVU7WUFDckIsS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDOztZQUNGLEdBQUcsQ0FBQyxDQUFtQixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUEsZ0JBQUE7Z0JBQWhELElBQU0sUUFBUSxXQUFBO2dCQUNqQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFDaEIsWUFBWSxFQUFFLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxRQUFRLENBQUM7b0JBQy9ELFNBQVMsRUFBRSxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxRQUFRLENBQUMsU0FBUztpQkFDekQsQ0FBQyxDQUFDO2FBQ0o7Ozs7Ozs7OztRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7O0tBQ2Y7Ozs7OztJQU1PLGlFQUFrQzs7Ozs7Y0FBQyxRQUEyQjs7UUFDcEUsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQzs7UUFDckMsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNuQyxNQUFNLENBQUMsVUFBVSxTQUFvQjtZQUNuQyxNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsS0FBSyxTQUFTLElBQUksU0FBUyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUM7U0FDakgsQ0FBQzs7O2dCQTFDTCxVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQUxPLHFCQUFxQjs7OytCQUo3Qjs7U0FVYSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0dyb3VwT3B0aW9ufSBmcm9tICcuL0dyb3VwT3B0aW9uJztcbmltcG9ydCB7UGVyYUdyYXBofSBmcm9tICduZy1jb21tb24tbGlicmFyeSc7XG5pbXBvcnQge0F0dGVuZGluZ1Byb3ZpZGVyfSBmcm9tICduZy1jb21tb24tbGlicmFyeS9saWIvbW9kZWwvQXR0ZW5kaW5nUHJvdmlkZXInO1xuaW1wb3J0IHtQcm92aWRlckZpbHRlclNlcnZpY2V9IGZyb20gJy4uL2ZpbHRlci9wcm92aWRlcnMvcHJvdmlkZXItZmlsdGVyLnNlcnZpY2UnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJHcm91cFNlcnZpY2UgaW1wbGVtZW50cyBHcm91cE9wdGlvbiB7XG5cbiAgLyoqXG4gICAqIHRoaW5ncyB0aGF0IG5lZWQgdG8gZW1pdCBiZWZvcmUgZ2VuZXJhdGluZyB0aGUgcHJvdmlkZXIgbGFuZXNcbiAgICovXG4gIGRlcGVuZGVuY3kgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJvdmlkZXJTZXJ2aWNlOiBQcm92aWRlckZpbHRlclNlcnZpY2UpIHtcbiAgICB0aGlzLnByb3ZpZGVyU2VydmljZS5wcm92aWRlcnNMb2FkZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuZGVwZW5kZW5jeS5uZXh0KCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogZ2VuZXJhdGUgZ3JvdXAgY2hvaWNlIG9iamVjdCBmb3IgZmFjaWxpdGllc1xuICAgKi9cbiAgZ2VuZXJhdGVMYW5lcygpOiB7IGdyb3VwTmFtZTogc3RyaW5nLCBsYW5lczogeyBsYW5lRnVuY3Rpb246IChwZXJhR3JhcGg6IFBlcmFHcmFwaCkgPT4gYm9vbGVhbiwgbGFuZVRpdGxlOiBzdHJpbmcgfVtdIH0ge1xuICAgIGNvbnN0IG9wdGlvbjogeyBncm91cE5hbWU6IHN0cmluZywgbGFuZXM6IHsgbGFuZUZ1bmN0aW9uOiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpID0+IGJvb2xlYW4sIGxhbmVUaXRsZTogc3RyaW5nIH1bXSB9ID0ge1xuICAgICAgZ3JvdXBOYW1lOiAnUHJvdmlkZXInLFxuICAgICAgbGFuZXM6IFtdXG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHRoaXMucHJvdmlkZXJTZXJ2aWNlLnByb3ZpZGVycykge1xuICAgICAgb3B0aW9uLmxhbmVzLnB1c2goe1xuICAgICAgICBsYW5lRnVuY3Rpb246IHRoaXMuZ2VuZXJhdGVQcm92aWRlckxhbmVGaWx0ZXJGdW5jdGlvbihwcm92aWRlciksXG4gICAgICAgIGxhbmVUaXRsZTogcHJvdmlkZXIubGFzdE5hbWUgKyAnLCAnICsgcHJvdmlkZXIuZmlyc3ROYW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBoZWxwZXIgZnVuY3Rpb24gZm9yIGdlbmVyYXRpbmcgYSBmaWx0ZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGVyIGdyb3VwcyBnaXZlbiBhIHByb3ZpZGVyXG4gICAqIEBwYXJhbSBwcm92aWRlciAtIHByb3ZpZGVyIHRvIGZpbHRlciBmb3JcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVQcm92aWRlckxhbmVGaWx0ZXJGdW5jdGlvbihwcm92aWRlcjogQXR0ZW5kaW5nUHJvdmlkZXIpOiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpID0+IGJvb2xlYW4ge1xuICAgIGNvbnN0IGZpcnN0TmFtZSA9IHByb3ZpZGVyLmZpcnN0TmFtZTtcbiAgICBjb25zdCBsYXN0TmFtZSA9IHByb3ZpZGVyLmxhc3ROYW1lO1xuICAgIHJldHVybiBmdW5jdGlvbiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBwZXJhR3JhcGguYXR0ZW5kaW5nUHJvdmlkZXIuZmlyc3ROYW1lID09PSBmaXJzdE5hbWUgJiYgcGVyYUdyYXBoLmF0dGVuZGluZ1Byb3ZpZGVyLmxhc3ROYW1lID09PSBsYXN0TmFtZTtcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==