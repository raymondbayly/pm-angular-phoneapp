/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { LocationSelectorService } from '../filter/locations/location-selector.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../filter/locations/location-selector.service";
var UnitGroupService = /** @class */ (function () {
    function UnitGroupService(locationSelectorService) {
        var _this = this;
        this.locationSelectorService = locationSelectorService;
        /**
         * things that need to emit before generating the unit lanes
         */
        this.dependency = new Subject();
        this.locationSelectorService.loadedLocations.subscribe(function () {
            _this.dependency.next();
        });
    }
    /**
     * generate group choice object for facilities
     */
    /**
     * generate group choice object for facilities
     * @return {?}
     */
    UnitGroupService.prototype.generateLanes = /**
     * generate group choice object for facilities
     * @return {?}
     */
    function () {
        /** @type {?} */
        var option = {
            groupName: 'Unit',
            lanes: []
        };
        try {
            for (var _a = tslib_1.__values(this.locationSelectorService.units), _b = _a.next(); !_b.done; _b = _a.next()) {
                var unit = _b.value;
                option.lanes.push({ laneFunction: this.generateUnitLaneFilterFunction(unit), laneTitle: unit.displayName });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return option;
        var e_1, _c;
    };
    /**
     * generate filter function for filtering out a group for a specific unit
     * @param {?} unit - unit to filter on
     * @return {?}
     */
    UnitGroupService.prototype.generateUnitLaneFilterFunction = /**
     * generate filter function for filtering out a group for a specific unit
     * @param {?} unit - unit to filter on
     * @return {?}
     */
    function (unit) {
        /** @type {?} */
        var unitName = unit.displayName;
        return function (peraGraph) {
            return peraGraph.unitId === unitName;
        };
    };
    UnitGroupService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UnitGroupService.ctorParameters = function () { return [
        { type: LocationSelectorService }
    ]; };
    /** @nocollapse */ UnitGroupService.ngInjectableDef = i0.defineInjectable({ factory: function UnitGroupService_Factory() { return new UnitGroupService(i0.inject(i1.LocationSelectorService)); }, token: UnitGroupService, providedIn: "root" });
    return UnitGroupService;
}());
export { UnitGroupService };
if (false) {
    /**
     * things that need to emit before generating the unit lanes
     * @type {?}
     */
    UnitGroupService.prototype.dependency;
    /** @type {?} */
    UnitGroupService.prototype.locationSelectorService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1ncm91cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctZmlsdGVycy1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2dyb3VwL3VuaXQtZ3JvdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sK0NBQStDLENBQUM7QUFFdEYsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQzs7OztJQVkzQiwwQkFBb0IsdUJBQWdEO1FBQXBFLGlCQUlDO1FBSm1CLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7Ozs7MEJBRnZELElBQUksT0FBTyxFQUFRO1FBRzlCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDO1lBQ3JELEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDeEIsQ0FBQyxDQUFDO0tBQ0o7SUFFRDs7T0FFRzs7Ozs7SUFDSCx3Q0FBYTs7OztJQUFiOztRQUNFLElBQU0sTUFBTSxHQUEyRztZQUNySCxTQUFTLEVBQUUsTUFBTTtZQUNqQixLQUFLLEVBQUUsRUFBRTtTQUNWLENBQUM7O1lBQ0YsR0FBRyxDQUFDLENBQWUsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUEsZ0JBQUE7Z0JBQWhELElBQU0sSUFBSSxXQUFBO2dCQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7YUFDM0c7Ozs7Ozs7OztRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7O0tBQ2Y7Ozs7OztJQU1PLHlEQUE4Qjs7Ozs7Y0FBQyxJQUFVOztRQUMvQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxVQUFVLFNBQW9CO1lBQ25DLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQztTQUN0QyxDQUFDOzs7Z0JBdENMLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBTk8sdUJBQXVCOzs7MkJBRi9COztTQVNhLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7R3JvdXBPcHRpb259IGZyb20gJy4vR3JvdXBPcHRpb24nO1xuaW1wb3J0IHtMb2NhdGlvblNlbGVjdG9yU2VydmljZX0gZnJvbSAnLi4vZmlsdGVyL2xvY2F0aW9ucy9sb2NhdGlvbi1zZWxlY3Rvci5zZXJ2aWNlJztcbmltcG9ydCB7UGVyYUdyYXBoLCBVbml0fSBmcm9tICduZy1jb21tb24tbGlicmFyeSc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBVbml0R3JvdXBTZXJ2aWNlIGltcGxlbWVudHMgR3JvdXBPcHRpb24ge1xuXG4gIC8qKlxuICAgKiB0aGluZ3MgdGhhdCBuZWVkIHRvIGVtaXQgYmVmb3JlIGdlbmVyYXRpbmcgdGhlIHVuaXQgbGFuZXNcbiAgICovXG4gIGRlcGVuZGVuY3kgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYXRpb25TZWxlY3RvclNlcnZpY2U6IExvY2F0aW9uU2VsZWN0b3JTZXJ2aWNlKSB7XG4gICAgdGhpcy5sb2NhdGlvblNlbGVjdG9yU2VydmljZS5sb2FkZWRMb2NhdGlvbnMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuZGVwZW5kZW5jeS5uZXh0KCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogZ2VuZXJhdGUgZ3JvdXAgY2hvaWNlIG9iamVjdCBmb3IgZmFjaWxpdGllc1xuICAgKi9cbiAgZ2VuZXJhdGVMYW5lcygpOiB7IGdyb3VwTmFtZTogc3RyaW5nLCBsYW5lczogeyBsYW5lRnVuY3Rpb246IChwZXJhR3JhcGg6IFBlcmFHcmFwaCkgPT4gYm9vbGVhbiwgbGFuZVRpdGxlOiBzdHJpbmcgfVtdIH0ge1xuICAgIGNvbnN0IG9wdGlvbjogeyBncm91cE5hbWU6IHN0cmluZywgbGFuZXM6IHsgbGFuZUZ1bmN0aW9uOiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpID0+IGJvb2xlYW4sIGxhbmVUaXRsZTogc3RyaW5nIH1bXSB9ID0ge1xuICAgICAgZ3JvdXBOYW1lOiAnVW5pdCcsXG4gICAgICBsYW5lczogW11cbiAgICB9O1xuICAgIGZvciAoY29uc3QgdW5pdCBvZiB0aGlzLmxvY2F0aW9uU2VsZWN0b3JTZXJ2aWNlLnVuaXRzKSB7XG4gICAgICBvcHRpb24ubGFuZXMucHVzaCh7bGFuZUZ1bmN0aW9uOiB0aGlzLmdlbmVyYXRlVW5pdExhbmVGaWx0ZXJGdW5jdGlvbih1bml0KSwgbGFuZVRpdGxlOiB1bml0LmRpc3BsYXlOYW1lfSk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb247XG4gIH1cblxuICAvKipcbiAgICogZ2VuZXJhdGUgZmlsdGVyIGZ1bmN0aW9uIGZvciBmaWx0ZXJpbmcgb3V0IGEgZ3JvdXAgZm9yIGEgc3BlY2lmaWMgdW5pdFxuICAgKiBAcGFyYW0gdW5pdCAtIHVuaXQgdG8gZmlsdGVyIG9uXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlVW5pdExhbmVGaWx0ZXJGdW5jdGlvbih1bml0OiBVbml0KSB7XG4gICAgY29uc3QgdW5pdE5hbWUgPSB1bml0LmRpc3BsYXlOYW1lO1xuICAgIHJldHVybiBmdW5jdGlvbiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBwZXJhR3JhcGgudW5pdElkID09PSB1bml0TmFtZTtcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==