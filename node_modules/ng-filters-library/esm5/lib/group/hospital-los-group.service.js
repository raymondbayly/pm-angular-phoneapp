/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var HospitalLosGroupService = /** @class */ (function () {
    function HospitalLosGroupService() {
        /**
         * size of LOS lane ranges
         */
        this.losIncrement = 1;
        /**
         * number of lanes LOS group by can have
         */
        this.losLaneMax = 5;
        /**
         * things that need to emit before generating the Hospital Los lanes
         */
        this.dependency = null;
    }
    /**
     * generate group choice object for facilities
     */
    /**
     * generate group choice object for facilities
     * @return {?}
     */
    HospitalLosGroupService.prototype.generateLanes = /**
     * generate group choice object for facilities
     * @return {?}
     */
    function () {
        /** @type {?} */
        var option = {
            groupName: 'Hospital LOS',
            lanes: []
        };
        for (var i = 0; i < this.losLaneMax * this.losIncrement; i += this.losIncrement) {
            /** @type {?} */
            var losLaneInfo = this.generateLosLaneFilterFunctionAndTitle(i, i + this.losIncrement);
            option.lanes.push({ laneFunction: losLaneInfo.filterFunction, laneTitle: losLaneInfo.title });
        }
        /** @type {?} */
        var losLaneInfoFinal = this.generateLosLaneFilterFunctionAndTitle(this.losLaneMax * this.losIncrement);
        option.lanes.push({ laneFunction: losLaneInfoFinal.filterFunction, laneTitle: losLaneInfoFinal.title });
        return option;
    };
    /**
     * generate filter function and label for Hospital LOS group by
     * @param {?} minIndex - number of days before current time to start including graphs in this lane (inclusive)
     * @param {?=} maxIndex - number of days before current time to stop including graphs (exclusive)
     * @return {?}
     */
    HospitalLosGroupService.prototype.generateLosLaneFilterFunctionAndTitle = /**
     * generate filter function and label for Hospital LOS group by
     * @param {?} minIndex - number of days before current time to start including graphs in this lane (inclusive)
     * @param {?=} maxIndex - number of days before current time to stop including graphs (exclusive)
     * @return {?}
     */
    function (minIndex, maxIndex) {
        if (maxIndex === void 0) { maxIndex = -1; }
        /** @type {?} */
        var minVolume = minIndex * 86400000;
        if (maxIndex !== -1) {
            /** @type {?} */
            var maxVolume_1 = maxIndex * 86400000;
            return {
                filterFunction: function (peraGraph) {
                    /** @type {?} */
                    var current = ((new Date()).getTime());
                    /** @type {?} */
                    var min = current - minVolume;
                    /** @type {?} */
                    var max = current - maxVolume_1;
                    return peraGraph.admitDate <= min && peraGraph.admitDate > max;
                }, title: minIndex.toString() + ' - ' + maxIndex.toString() + ' days'
            };
        }
        else {
            // create catch all if max is not included in function call
            return {
                filterFunction: function (peraGraph) {
                    /** @type {?} */
                    var current = ((new Date()).getTime());
                    /** @type {?} */
                    var min = current - minVolume;
                    return peraGraph.admitDate <= min;
                }, title: minIndex.toString() + '+ days'
            };
        }
    };
    HospitalLosGroupService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    HospitalLosGroupService.ctorParameters = function () { return []; };
    /** @nocollapse */ HospitalLosGroupService.ngInjectableDef = i0.defineInjectable({ factory: function HospitalLosGroupService_Factory() { return new HospitalLosGroupService(); }, token: HospitalLosGroupService, providedIn: "root" });
    return HospitalLosGroupService;
}());
export { HospitalLosGroupService };
if (false) {
    /**
     * size of LOS lane ranges
     * @type {?}
     */
    HospitalLosGroupService.prototype.losIncrement;
    /**
     * number of lanes LOS group by can have
     * @type {?}
     */
    HospitalLosGroupService.prototype.losLaneMax;
    /**
     * things that need to emit before generating the Hospital Los lanes
     * @type {?}
     */
    HospitalLosGroupService.prototype.dependency;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zcGl0YWwtbG9zLWdyb3VwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1maWx0ZXJzLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvZ3JvdXAvaG9zcGl0YWwtbG9zLWdyb3VwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztJQXdCekM7Ozs7NEJBWmUsQ0FBQzs7OzswQkFLSCxDQUFDOzs7OzBCQUtELElBQUk7S0FFQTtJQUVqQjs7T0FFRzs7Ozs7SUFDSCwrQ0FBYTs7OztJQUFiOztRQUNFLElBQU0sTUFBTSxHQUEyRztZQUNySCxTQUFTLEVBQUUsY0FBYztZQUN6QixLQUFLLEVBQUUsRUFBRTtTQUNWLENBQUM7UUFDRixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDOztZQUNoRixJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMscUNBQXFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDekYsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLGNBQWMsRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7U0FDN0Y7O1FBRUQsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMscUNBQXFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDekcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBQ3RHLE1BQU0sQ0FBQyxNQUFNLENBQUM7S0FDZjs7Ozs7OztJQU9PLHVFQUFxQzs7Ozs7O2NBQUMsUUFBZ0IsRUFBRSxRQUFxQjtRQUFyQix5QkFBQSxFQUFBLFlBQW9CLENBQUM7O1FBQ25GLElBQU0sU0FBUyxHQUFHLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDdEMsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7WUFFcEIsSUFBTSxXQUFTLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQztZQUN0QyxNQUFNLENBQUM7Z0JBQ0wsY0FBYyxFQUFFLFVBQVUsU0FBb0I7O29CQUM1QyxJQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7O29CQUN6QyxJQUFNLEdBQUcsR0FBRyxPQUFPLEdBQUcsU0FBUyxDQUFDOztvQkFDaEMsSUFBTSxHQUFHLEdBQUcsT0FBTyxHQUFHLFdBQVMsQ0FBQztvQkFDaEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO2lCQUNoRSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxPQUFPO2FBQ3RFLENBQUM7U0FDSDtRQUFDLElBQUksQ0FBQyxDQUFDOztZQUVOLE1BQU0sQ0FBQztnQkFDTCxjQUFjLEVBQUUsVUFBVSxTQUFvQjs7b0JBQzVDLElBQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQzs7b0JBQ3pDLElBQU0sR0FBRyxHQUFHLE9BQU8sR0FBRyxTQUFTLENBQUM7b0JBQ2hDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxJQUFJLEdBQUcsQ0FBQztpQkFDbkMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLFFBQVE7YUFDekMsQ0FBQztTQUNIOzs7Z0JBbkVKLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7O2tDQU5EOztTQU9hLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UGVyYUdyYXBofSBmcm9tICduZy1jb21tb24tbGlicmFyeSc7XG5pbXBvcnQge0dyb3VwT3B0aW9ufSBmcm9tICcuL0dyb3VwT3B0aW9uJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSG9zcGl0YWxMb3NHcm91cFNlcnZpY2UgaW1wbGVtZW50cyBHcm91cE9wdGlvbiB7XG5cbiAgLyoqXG4gICAqIHNpemUgb2YgTE9TIGxhbmUgcmFuZ2VzXG4gICAqL1xuICBsb3NJbmNyZW1lbnQgPSAxO1xuXG4gIC8qKlxuICAgKiBudW1iZXIgb2YgbGFuZXMgTE9TIGdyb3VwIGJ5IGNhbiBoYXZlXG4gICAqL1xuICBsb3NMYW5lTWF4ID0gNTtcblxuICAvKipcbiAgICogdGhpbmdzIHRoYXQgbmVlZCB0byBlbWl0IGJlZm9yZSBnZW5lcmF0aW5nIHRoZSBIb3NwaXRhbCBMb3MgbGFuZXNcbiAgICovXG4gIGRlcGVuZGVuY3kgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgLyoqXG4gICAqIGdlbmVyYXRlIGdyb3VwIGNob2ljZSBvYmplY3QgZm9yIGZhY2lsaXRpZXNcbiAgICovXG4gIGdlbmVyYXRlTGFuZXMoKTogeyBncm91cE5hbWU6IHN0cmluZywgbGFuZXM6IHsgbGFuZUZ1bmN0aW9uOiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpID0+IGJvb2xlYW4sIGxhbmVUaXRsZTogc3RyaW5nIH1bXSB9IHtcbiAgICBjb25zdCBvcHRpb246IHsgZ3JvdXBOYW1lOiBzdHJpbmcsIGxhbmVzOiB7IGxhbmVGdW5jdGlvbjogKHBlcmFHcmFwaDogUGVyYUdyYXBoKSA9PiBib29sZWFuLCBsYW5lVGl0bGU6IHN0cmluZyB9W10gfSA9IHtcbiAgICAgIGdyb3VwTmFtZTogJ0hvc3BpdGFsIExPUycsXG4gICAgICBsYW5lczogW11cbiAgICB9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sb3NMYW5lTWF4ICogdGhpcy5sb3NJbmNyZW1lbnQ7IGkgKz0gdGhpcy5sb3NJbmNyZW1lbnQpIHtcbiAgICAgIGNvbnN0IGxvc0xhbmVJbmZvID0gdGhpcy5nZW5lcmF0ZUxvc0xhbmVGaWx0ZXJGdW5jdGlvbkFuZFRpdGxlKGksIGkgKyB0aGlzLmxvc0luY3JlbWVudCk7XG4gICAgICBvcHRpb24ubGFuZXMucHVzaCh7bGFuZUZ1bmN0aW9uOiBsb3NMYW5lSW5mby5maWx0ZXJGdW5jdGlvbiwgbGFuZVRpdGxlOiBsb3NMYW5lSW5mby50aXRsZX0pO1xuICAgIH1cbiAgICAvLyBnZW5lcmF0ZSBjYXRjaCBhbGwgbGFuZSBmb3IgdmlzaXRzIG9sZGVyIHRoZW4gbWF4XG4gICAgY29uc3QgbG9zTGFuZUluZm9GaW5hbCA9IHRoaXMuZ2VuZXJhdGVMb3NMYW5lRmlsdGVyRnVuY3Rpb25BbmRUaXRsZSh0aGlzLmxvc0xhbmVNYXggKiB0aGlzLmxvc0luY3JlbWVudCk7XG4gICAgb3B0aW9uLmxhbmVzLnB1c2goe2xhbmVGdW5jdGlvbjogbG9zTGFuZUluZm9GaW5hbC5maWx0ZXJGdW5jdGlvbiwgbGFuZVRpdGxlOiBsb3NMYW5lSW5mb0ZpbmFsLnRpdGxlfSk7XG4gICAgcmV0dXJuIG9wdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZW5lcmF0ZSBmaWx0ZXIgZnVuY3Rpb24gYW5kIGxhYmVsIGZvciBIb3NwaXRhbCBMT1MgZ3JvdXAgYnlcbiAgICogQHBhcmFtIG1pbkluZGV4IC0gbnVtYmVyIG9mIGRheXMgYmVmb3JlIGN1cnJlbnQgdGltZSB0byBzdGFydCBpbmNsdWRpbmcgZ3JhcGhzIGluIHRoaXMgbGFuZSAoaW5jbHVzaXZlKVxuICAgKiBAcGFyYW0gbWF4SW5kZXggLSBudW1iZXIgb2YgZGF5cyBiZWZvcmUgY3VycmVudCB0aW1lIHRvIHN0b3AgaW5jbHVkaW5nIGdyYXBocyAoZXhjbHVzaXZlKVxuICAgKi9cbiAgcHJpdmF0ZSBnZW5lcmF0ZUxvc0xhbmVGaWx0ZXJGdW5jdGlvbkFuZFRpdGxlKG1pbkluZGV4OiBudW1iZXIsIG1heEluZGV4OiBudW1iZXIgPSAtMSk6IHsgZmlsdGVyRnVuY3Rpb246IChwZXJhR3JhcGg6IFBlcmFHcmFwaCkgPT4gYm9vbGVhbiwgdGl0bGU6IHN0cmluZyB9IHtcbiAgICBjb25zdCBtaW5Wb2x1bWUgPSBtaW5JbmRleCAqIDg2NDAwMDAwO1xuICAgIGlmIChtYXhJbmRleCAhPT0gLTEpIHtcbiAgICAgIC8vIGlmIGEgbWF4IGVuZCBvZiB0aGUgcmFuZ2UgaXMgaW5jbHVkZWQgY3JlYXRlIGEgZmlsdHIgZm9yIGJldHdlZW4gbWF4IGFuZCBtaW4gZHVyYXRpb25cbiAgICAgIGNvbnN0IG1heFZvbHVtZSA9IG1heEluZGV4ICogODY0MDAwMDA7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWx0ZXJGdW5jdGlvbjogZnVuY3Rpb24gKHBlcmFHcmFwaDogUGVyYUdyYXBoKTogYm9vbGVhbiB7XG4gICAgICAgICAgY29uc3QgY3VycmVudCA9ICgobmV3IERhdGUoKSkuZ2V0VGltZSgpKTtcbiAgICAgICAgICBjb25zdCBtaW4gPSBjdXJyZW50IC0gbWluVm9sdW1lO1xuICAgICAgICAgIGNvbnN0IG1heCA9IGN1cnJlbnQgLSBtYXhWb2x1bWU7XG4gICAgICAgICAgcmV0dXJuIHBlcmFHcmFwaC5hZG1pdERhdGUgPD0gbWluICYmIHBlcmFHcmFwaC5hZG1pdERhdGUgPiBtYXg7XG4gICAgICAgIH0sIHRpdGxlOiBtaW5JbmRleC50b1N0cmluZygpICsgJyAtICcgKyBtYXhJbmRleC50b1N0cmluZygpICsgJyBkYXlzJ1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY3JlYXRlIGNhdGNoIGFsbCBpZiBtYXggaXMgbm90IGluY2x1ZGVkIGluIGZ1bmN0aW9uIGNhbGxcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbHRlckZ1bmN0aW9uOiBmdW5jdGlvbiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpOiBib29sZWFuIHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50ID0gKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkpO1xuICAgICAgICAgIGNvbnN0IG1pbiA9IGN1cnJlbnQgLSBtaW5Wb2x1bWU7XG4gICAgICAgICAgcmV0dXJuIHBlcmFHcmFwaC5hZG1pdERhdGUgPD0gbWluO1xuICAgICAgICB9LCB0aXRsZTogbWluSW5kZXgudG9TdHJpbmcoKSArICcrIGRheXMnXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG59XG4iXX0=