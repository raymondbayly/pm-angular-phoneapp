/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { LocationSelectorService } from '../filter/locations/location-selector.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../filter/locations/location-selector.service";
var FacilityGroupService = /** @class */ (function () {
    function FacilityGroupService(locationSelectorService) {
        var _this = this;
        this.locationSelectorService = locationSelectorService;
        /**
         * things that need to emit before generating the facility lanes
         */
        this.dependency = new Subject();
        this.locationSelectorService.loadedLocations.subscribe(function () {
            _this.dependency.next();
        });
    }
    /**
     * generate group choice object for facilities
     */
    /**
     * generate group choice object for facilities
     * @return {?}
     */
    FacilityGroupService.prototype.generateLanes = /**
     * generate group choice object for facilities
     * @return {?}
     */
    function () {
        /** @type {?} */
        var option = {
            groupName: 'Facility',
            lanes: []
        };
        try {
            for (var _a = tslib_1.__values(this.locationSelectorService.facilities), _b = _a.next(); !_b.done; _b = _a.next()) {
                var facility = _b.value;
                option.lanes.push({ laneFunction: this.generateFacilitiyLaneFilterFunction(facility), laneTitle: facility.displayName });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return option;
        var e_1, _c;
    };
    /**
     * generate filter function for grouping by facility
     * @param {?} facility - facility to filter for
     * @return {?}
     */
    FacilityGroupService.prototype.generateFacilitiyLaneFilterFunction = /**
     * generate filter function for grouping by facility
     * @param {?} facility - facility to filter for
     * @return {?}
     */
    function (facility) {
        /** @type {?} */
        var facilityName = facility.displayName;
        return function (peraGraph) {
            return peraGraph.facilityId === facilityName;
        };
    };
    FacilityGroupService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FacilityGroupService.ctorParameters = function () { return [
        { type: LocationSelectorService }
    ]; };
    /** @nocollapse */ FacilityGroupService.ngInjectableDef = i0.defineInjectable({ factory: function FacilityGroupService_Factory() { return new FacilityGroupService(i0.inject(i1.LocationSelectorService)); }, token: FacilityGroupService, providedIn: "root" });
    return FacilityGroupService;
}());
export { FacilityGroupService };
if (false) {
    /**
     * things that need to emit before generating the facility lanes
     * @type {?}
     */
    FacilityGroupService.prototype.dependency;
    /** @type {?} */
    FacilityGroupService.prototype.locationSelectorService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjaWxpdHktZ3JvdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWZpbHRlcnMtbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9ncm91cC9mYWNpbGl0eS1ncm91cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwrQ0FBK0MsQ0FBQztBQUN0RixPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDOzs7O0lBWTNCLDhCQUFvQix1QkFBZ0Q7UUFBcEUsaUJBSUM7UUFKbUIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5Qjs7OzswQkFGdkQsSUFBSSxPQUFPLEVBQVE7UUFHOUIsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUM7WUFDckQsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN4QixDQUFDLENBQUM7S0FDSjtJQUVEOztPQUVHOzs7OztJQUNILDRDQUFhOzs7O0lBQWI7O1FBQ0UsSUFBTSxNQUFNLEdBQTJHO1lBQ3JILFNBQVMsRUFBRSxVQUFVO1lBQ3JCLEtBQUssRUFBRSxFQUFFO1NBQ1YsQ0FBQzs7WUFDRixHQUFHLENBQUMsQ0FBbUIsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUEsZ0JBQUE7Z0JBQXpELElBQU0sUUFBUSxXQUFBO2dCQUNqQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsbUNBQW1DLENBQUMsUUFBUSxDQUFDLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO2FBQ3hIOzs7Ozs7Ozs7UUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDOztLQUNmOzs7Ozs7SUFNTyxrRUFBbUM7Ozs7O2NBQUMsUUFBa0I7O1FBQzVELElBQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDMUMsTUFBTSxDQUFDLFVBQVUsU0FBb0I7WUFDbkMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEtBQUssWUFBWSxDQUFDO1NBQzlDLENBQUM7OztnQkF0Q0wsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFMTyx1QkFBdUI7OzsrQkFIL0I7O1NBU2Esb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtHcm91cE9wdGlvbn0gZnJvbSAnLi9Hcm91cE9wdGlvbic7XG5pbXBvcnQge0ZhY2lsaXR5LCBQZXJhR3JhcGh9IGZyb20gJ25nLWNvbW1vbi1saWJyYXJ5JztcbmltcG9ydCB7TG9jYXRpb25TZWxlY3RvclNlcnZpY2V9IGZyb20gJy4uL2ZpbHRlci9sb2NhdGlvbnMvbG9jYXRpb24tc2VsZWN0b3Iuc2VydmljZSc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGYWNpbGl0eUdyb3VwU2VydmljZSBpbXBsZW1lbnRzIEdyb3VwT3B0aW9uIHtcblxuICAvKipcbiAgICogdGhpbmdzIHRoYXQgbmVlZCB0byBlbWl0IGJlZm9yZSBnZW5lcmF0aW5nIHRoZSBmYWNpbGl0eSBsYW5lc1xuICAgKi9cbiAgZGVwZW5kZW5jeSA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2NhdGlvblNlbGVjdG9yU2VydmljZTogTG9jYXRpb25TZWxlY3RvclNlcnZpY2UpIHtcbiAgICB0aGlzLmxvY2F0aW9uU2VsZWN0b3JTZXJ2aWNlLmxvYWRlZExvY2F0aW9ucy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5kZXBlbmRlbmN5Lm5leHQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZW5lcmF0ZSBncm91cCBjaG9pY2Ugb2JqZWN0IGZvciBmYWNpbGl0aWVzXG4gICAqL1xuICBnZW5lcmF0ZUxhbmVzKCk6IHsgZ3JvdXBOYW1lOiBzdHJpbmcsIGxhbmVzOiB7IGxhbmVGdW5jdGlvbjogKHBlcmFHcmFwaDogUGVyYUdyYXBoKSA9PiBib29sZWFuLCBsYW5lVGl0bGU6IHN0cmluZyB9W10gfSB7XG4gICAgY29uc3Qgb3B0aW9uOiB7IGdyb3VwTmFtZTogc3RyaW5nLCBsYW5lczogeyBsYW5lRnVuY3Rpb246IChwZXJhR3JhcGg6IFBlcmFHcmFwaCkgPT4gYm9vbGVhbiwgbGFuZVRpdGxlOiBzdHJpbmcgfVtdIH0gPSB7XG4gICAgICBncm91cE5hbWU6ICdGYWNpbGl0eScsXG4gICAgICBsYW5lczogW11cbiAgICB9O1xuICAgIGZvciAoY29uc3QgZmFjaWxpdHkgb2YgdGhpcy5sb2NhdGlvblNlbGVjdG9yU2VydmljZS5mYWNpbGl0aWVzKSB7XG4gICAgICBvcHRpb24ubGFuZXMucHVzaCh7bGFuZUZ1bmN0aW9uOiB0aGlzLmdlbmVyYXRlRmFjaWxpdGl5TGFuZUZpbHRlckZ1bmN0aW9uKGZhY2lsaXR5KSwgbGFuZVRpdGxlOiBmYWNpbGl0eS5kaXNwbGF5TmFtZX0pO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIGdlbmVyYXRlIGZpbHRlciBmdW5jdGlvbiBmb3IgZ3JvdXBpbmcgYnkgZmFjaWxpdHlcbiAgICogQHBhcmFtIGZhY2lsaXR5IC0gZmFjaWxpdHkgdG8gZmlsdGVyIGZvclxuICAgKi9cbiAgcHJpdmF0ZSBnZW5lcmF0ZUZhY2lsaXRpeUxhbmVGaWx0ZXJGdW5jdGlvbihmYWNpbGl0eTogRmFjaWxpdHkpIHtcbiAgICBjb25zdCBmYWNpbGl0eU5hbWUgPSBmYWNpbGl0eS5kaXNwbGF5TmFtZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHBlcmFHcmFwaDogUGVyYUdyYXBoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gcGVyYUdyYXBoLmZhY2lsaXR5SWQgPT09IGZhY2lsaXR5TmFtZTtcbiAgICB9O1xuICB9XG59XG4iXX0=