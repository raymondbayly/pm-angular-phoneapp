/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var WarningCategoryGroupService = /** @class */ (function () {
    function WarningCategoryGroupService() {
        /**
         * things that need to emit before generating the warning lanes
         */
        this.dependency = null;
    }
    /**
     * generate group choice object for facilities
     */
    /**
     * generate group choice object for facilities
     * @return {?}
     */
    WarningCategoryGroupService.prototype.generateLanes = /**
     * generate group choice object for facilities
     * @return {?}
     */
    function () {
        return {
            groupName: 'Warning Category',
            lanes: [{
                    laneFunction: function (peraGraph) { return peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'V'; },
                    laneTitle: 'Very High Warning'
                },
                {
                    laneFunction: function (peraGraph) { return peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'H'; },
                    laneTitle: 'High Warning'
                },
                {
                    laneFunction: function (peraGraph) { return peraGraph.activeWarning != null && peraGraph.activeWarning.category === 'M'; },
                    laneTitle: 'Medium Warning'
                },
                { laneFunction: function (peraGraph) { return peraGraph.activeWarning == null; }, laneTitle: 'No Warning' }]
        };
    };
    WarningCategoryGroupService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WarningCategoryGroupService.ctorParameters = function () { return []; };
    /** @nocollapse */ WarningCategoryGroupService.ngInjectableDef = i0.defineInjectable({ factory: function WarningCategoryGroupService_Factory() { return new WarningCategoryGroupService(); }, token: WarningCategoryGroupService, providedIn: "root" });
    return WarningCategoryGroupService;
}());
export { WarningCategoryGroupService };
if (false) {
    /**
     * things that need to emit before generating the warning lanes
     * @type {?}
     */
    WarningCategoryGroupService.prototype.dependency;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybmluZy1jYXRlZ29yeS1ncm91cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctZmlsdGVycy1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2dyb3VwL3dhcm5pbmctY2F0ZWdvcnktZ3JvdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0lBY3pDOzs7OzBCQUZhLElBQUk7S0FFQTtJQUVqQjs7T0FFRzs7Ozs7SUFDSCxtREFBYTs7OztJQUFiO1FBQ0UsTUFBTSxDQUFDO1lBQ0wsU0FBUyxFQUFFLGtCQUFrQjtZQUM3QixLQUFLLEVBQUUsQ0FBQztvQkFDTixZQUFZLEVBQUUsVUFBQyxTQUFvQixJQUFLLE9BQUEsU0FBUyxDQUFDLGFBQWEsSUFBSSxJQUFJLElBQUksU0FBUyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEtBQUssR0FBRyxFQUEzRSxDQUEyRTtvQkFDbkgsU0FBUyxFQUFFLG1CQUFtQjtpQkFDL0I7Z0JBQ0M7b0JBQ0UsWUFBWSxFQUFFLFVBQUMsU0FBb0IsSUFBSyxPQUFBLFNBQVMsQ0FBQyxhQUFhLElBQUksSUFBSSxJQUFJLFNBQVMsQ0FBQyxhQUFhLENBQUMsUUFBUSxLQUFLLEdBQUcsRUFBM0UsQ0FBMkU7b0JBQ25ILFNBQVMsRUFBRSxjQUFjO2lCQUMxQjtnQkFDRDtvQkFDRSxZQUFZLEVBQUUsVUFBQyxTQUFvQixJQUFLLE9BQUEsU0FBUyxDQUFDLGFBQWEsSUFBSSxJQUFJLElBQUksU0FBUyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEtBQUssR0FBRyxFQUEzRSxDQUEyRTtvQkFDbkgsU0FBUyxFQUFFLGdCQUFnQjtpQkFDNUI7Z0JBQ0QsRUFBQyxZQUFZLEVBQUUsVUFBQyxTQUFvQixJQUFLLE9BQUEsU0FBUyxDQUFDLGFBQWEsSUFBSSxJQUFJLEVBQS9CLENBQStCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBQyxDQUFDO1NBQ3RHLENBQUM7S0FFSDs7Z0JBakNGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7O3NDQU5EOztTQU9hLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7R3JvdXBPcHRpb259IGZyb20gJy4vR3JvdXBPcHRpb24nO1xuaW1wb3J0IHtQZXJhR3JhcGh9IGZyb20gJ25nLWNvbW1vbi1saWJyYXJ5JztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgV2FybmluZ0NhdGVnb3J5R3JvdXBTZXJ2aWNlIGltcGxlbWVudHMgR3JvdXBPcHRpb24ge1xuXG4gIC8qKlxuICAgKiB0aGluZ3MgdGhhdCBuZWVkIHRvIGVtaXQgYmVmb3JlIGdlbmVyYXRpbmcgdGhlIHdhcm5pbmcgbGFuZXNcbiAgICovXG4gIGRlcGVuZGVuY3kgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgLyoqXG4gICAqIGdlbmVyYXRlIGdyb3VwIGNob2ljZSBvYmplY3QgZm9yIGZhY2lsaXRpZXNcbiAgICovXG4gIGdlbmVyYXRlTGFuZXMoKTogeyBncm91cE5hbWU6IHN0cmluZywgbGFuZXM6IHsgbGFuZUZ1bmN0aW9uOiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpID0+IGJvb2xlYW4sIGxhbmVUaXRsZTogc3RyaW5nIH1bXSB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgZ3JvdXBOYW1lOiAnV2FybmluZyBDYXRlZ29yeScsXG4gICAgICBsYW5lczogW3tcbiAgICAgICAgbGFuZUZ1bmN0aW9uOiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpID0+IHBlcmFHcmFwaC5hY3RpdmVXYXJuaW5nICE9IG51bGwgJiYgcGVyYUdyYXBoLmFjdGl2ZVdhcm5pbmcuY2F0ZWdvcnkgPT09ICdWJyxcbiAgICAgICAgbGFuZVRpdGxlOiAnVmVyeSBIaWdoIFdhcm5pbmcnXG4gICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbGFuZUZ1bmN0aW9uOiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpID0+IHBlcmFHcmFwaC5hY3RpdmVXYXJuaW5nICE9IG51bGwgJiYgcGVyYUdyYXBoLmFjdGl2ZVdhcm5pbmcuY2F0ZWdvcnkgPT09ICdIJyxcbiAgICAgICAgICBsYW5lVGl0bGU6ICdIaWdoIFdhcm5pbmcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBsYW5lRnVuY3Rpb246IChwZXJhR3JhcGg6IFBlcmFHcmFwaCkgPT4gcGVyYUdyYXBoLmFjdGl2ZVdhcm5pbmcgIT0gbnVsbCAmJiBwZXJhR3JhcGguYWN0aXZlV2FybmluZy5jYXRlZ29yeSA9PT0gJ00nLFxuICAgICAgICAgIGxhbmVUaXRsZTogJ01lZGl1bSBXYXJuaW5nJ1xuICAgICAgICB9LFxuICAgICAgICB7bGFuZUZ1bmN0aW9uOiAocGVyYUdyYXBoOiBQZXJhR3JhcGgpID0+IHBlcmFHcmFwaC5hY3RpdmVXYXJuaW5nID09IG51bGwsIGxhbmVUaXRsZTogJ05vIFdhcm5pbmcnfV1cbiAgICB9O1xuXG4gIH1cbn1cbiJdfQ==