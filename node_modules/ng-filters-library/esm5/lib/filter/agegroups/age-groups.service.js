/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FilterService } from '../filter.service';
import * as i0 from "@angular/core";
import * as i1 from "../filter.service";
var AgeGroupsService = /** @class */ (function () {
    function AgeGroupsService(filterService) {
        this.filterService = filterService;
        this.PEDIATRIC_GROUP = 'Pediatric';
        this.ADULT_GROUP = 'Adult';
        this.ALL_GROUP = 'All';
    }
    /**
     * @return {?}
     */
    AgeGroupsService.prototype.unstageAgeGroups = /**
     * @return {?}
     */
    function () {
        this.filterService.unstageFilter(this.PEDIATRIC_GROUP);
        this.filterService.unstageFilter(this.ADULT_GROUP);
        this.filterService.unstageFilter(this.ALL_GROUP);
    };
    /**
     * Always returns true because we want all the patients
     * @param {?} peragraph - peragraph to filter
     * @return {?}
     */
    AgeGroupsService.prototype.allFilterFunction = /**
     * Always returns true because we want all the patients
     * @param {?} peragraph - peragraph to filter
     * @return {?}
     */
    function (peragraph) {
        return true;
    };
    /**
     * Filter out any peragraphs with patients younger than 18
     * @param {?} peragraph - peragraph to be filtered
     * @return {?}
     */
    AgeGroupsService.prototype.adultFilterFunction = /**
     * Filter out any peragraphs with patients younger than 18
     * @param {?} peragraph - peragraph to be filtered
     * @return {?}
     */
    function (peragraph) {
        /** @type {?} */
        var birthDate = new Date();
        birthDate.setMilliseconds(peragraph.patient.dob);
        /** @type {?} */
        var currentDate = new Date();
        currentDate.setMilliseconds(Date.now());
        /** @type {?} */
        var age = currentDate.getFullYear() - birthDate.getFullYear();
        return age >= 18;
    };
    /**
     * Filter out any peragraphs with patients older than 18
     * @param {?} peragraph - peragraph to be filtered
     * @return {?}
     */
    AgeGroupsService.prototype.pediatricFilterFunction = /**
     * Filter out any peragraphs with patients older than 18
     * @param {?} peragraph - peragraph to be filtered
     * @return {?}
     */
    function (peragraph) {
        /** @type {?} */
        var birthDate = new Date();
        birthDate.setMilliseconds(peragraph.patient.dob);
        /** @type {?} */
        var currentDate = new Date();
        currentDate.setMilliseconds(Date.now());
        /** @type {?} */
        var age = currentDate.getFullYear() - birthDate.getFullYear();
        return age < 18;
    };
    AgeGroupsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AgeGroupsService.ctorParameters = function () { return [
        { type: FilterService }
    ]; };
    /** @nocollapse */ AgeGroupsService.ngInjectableDef = i0.defineInjectable({ factory: function AgeGroupsService_Factory() { return new AgeGroupsService(i0.inject(i1.FilterService)); }, token: AgeGroupsService, providedIn: "root" });
    return AgeGroupsService;
}());
export { AgeGroupsService };
if (false) {
    /** @type {?} */
    AgeGroupsService.prototype.PEDIATRIC_GROUP;
    /** @type {?} */
    AgeGroupsService.prototype.ADULT_GROUP;
    /** @type {?} */
    AgeGroupsService.prototype.ALL_GROUP;
    /** @type {?} */
    AgeGroupsService.prototype.filterService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdlLWdyb3Vwcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctZmlsdGVycy1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2ZpbHRlci9hZ2Vncm91cHMvYWdlLWdyb3Vwcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7OztJQVc5QywwQkFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7K0JBSmQsV0FBVzsyQkFDZixPQUFPO3lCQUNULEtBQUs7S0FHaEM7Ozs7SUFFTSwyQ0FBZ0I7Ozs7UUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Ozs7Ozs7SUFPNUMsNENBQWlCOzs7OztjQUFDLFNBQW9CO1FBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7SUFPUCw4Q0FBbUI7Ozs7O2NBQUMsU0FBb0I7O1FBQzdDLElBQU0sU0FBUyxHQUFTLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbkMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztRQUNqRCxJQUFNLFdBQVcsR0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3JDLFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7O1FBQ3hDLElBQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEUsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUM7Ozs7Ozs7SUFPWixrREFBdUI7Ozs7O2NBQUMsU0FBb0I7O1FBQ2pELElBQU0sU0FBUyxHQUFTLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbkMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztRQUNqRCxJQUFNLFdBQVcsR0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3JDLFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7O1FBQ3hDLElBQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEUsTUFBTSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7OztnQkFqRG5CLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBSk8sYUFBYTs7OzJCQUZyQjs7U0FPYSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQZXJhR3JhcGh9IGZyb20gJ25nLWNvbW1vbi1saWJyYXJ5JztcbmltcG9ydCB7RmlsdGVyU2VydmljZX0gZnJvbSAnLi4vZmlsdGVyLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBZ2VHcm91cHNTZXJ2aWNlIHtcblxuICBwdWJsaWMgcmVhZG9ubHkgUEVESUFUUklDX0dST1VQID0gJ1BlZGlhdHJpYyc7XG4gIHB1YmxpYyByZWFkb25seSBBRFVMVF9HUk9VUCA9ICdBZHVsdCc7XG4gIHB1YmxpYyByZWFkb25seSBBTExfR1JPVVAgPSAnQWxsJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpbHRlclNlcnZpY2U6IEZpbHRlclNlcnZpY2UpIHtcbiAgfVxuXG4gIHB1YmxpYyB1bnN0YWdlQWdlR3JvdXBzKCkge1xuICAgIHRoaXMuZmlsdGVyU2VydmljZS51bnN0YWdlRmlsdGVyKHRoaXMuUEVESUFUUklDX0dST1VQKTtcbiAgICB0aGlzLmZpbHRlclNlcnZpY2UudW5zdGFnZUZpbHRlcih0aGlzLkFEVUxUX0dST1VQKTtcbiAgICB0aGlzLmZpbHRlclNlcnZpY2UudW5zdGFnZUZpbHRlcih0aGlzLkFMTF9HUk9VUCk7XG4gIH1cblxuICAvKipcbiAgICogQWx3YXlzIHJldHVybnMgdHJ1ZSBiZWNhdXNlIHdlIHdhbnQgYWxsIHRoZSBwYXRpZW50c1xuICAgKiBAcGFyYW0gcGVyYWdyYXBoIC0gcGVyYWdyYXBoIHRvIGZpbHRlclxuICAgKi9cbiAgcHVibGljIGFsbEZpbHRlckZ1bmN0aW9uKHBlcmFncmFwaDogUGVyYUdyYXBoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRmlsdGVyIG91dCBhbnkgcGVyYWdyYXBocyB3aXRoIHBhdGllbnRzIHlvdW5nZXIgdGhhbiAxOFxuICAgKiBAcGFyYW0gcGVyYWdyYXBoIC0gcGVyYWdyYXBoIHRvIGJlIGZpbHRlcmVkXG4gICAqL1xuICBwdWJsaWMgYWR1bHRGaWx0ZXJGdW5jdGlvbihwZXJhZ3JhcGg6IFBlcmFHcmFwaCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGJpcnRoRGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgYmlydGhEYXRlLnNldE1pbGxpc2Vjb25kcyhwZXJhZ3JhcGgucGF0aWVudC5kb2IpO1xuICAgIGNvbnN0IGN1cnJlbnREYXRlOiBEYXRlID0gbmV3IERhdGUoKTtcbiAgICBjdXJyZW50RGF0ZS5zZXRNaWxsaXNlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgY29uc3QgYWdlID0gY3VycmVudERhdGUuZ2V0RnVsbFllYXIoKSAtIGJpcnRoRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZ2UgPj0gMTg7XG4gIH1cblxuICAvKipcbiAgICogRmlsdGVyIG91dCBhbnkgcGVyYWdyYXBocyB3aXRoIHBhdGllbnRzIG9sZGVyIHRoYW4gMThcbiAgICogQHBhcmFtIHBlcmFncmFwaCAtIHBlcmFncmFwaCB0byBiZSBmaWx0ZXJlZFxuICAgKi9cbiAgcHVibGljIHBlZGlhdHJpY0ZpbHRlckZ1bmN0aW9uKHBlcmFncmFwaDogUGVyYUdyYXBoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgYmlydGhEYXRlOiBEYXRlID0gbmV3IERhdGUoKTtcbiAgICBiaXJ0aERhdGUuc2V0TWlsbGlzZWNvbmRzKHBlcmFncmFwaC5wYXRpZW50LmRvYik7XG4gICAgY29uc3QgY3VycmVudERhdGU6IERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGN1cnJlbnREYXRlLnNldE1pbGxpc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICBjb25zdCBhZ2UgPSBjdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpIC0gYmlydGhEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFnZSA8IDE4O1xuICB9XG59XG4iXX0=