/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var WarningsFilterService = /** @class */ (function () {
    function WarningsFilterService() {
        /**
         * Warning levels that are selected. Start with all of them.
         */
        this.selectedWarnings = ['warning_v', 'warning_h', 'warning_m', 'warning_none', 'warning_no_ri'];
        /**
         * Configurations for warning level filter options.
         *
         * Contains a filter id, the color of the warning level and a filter function for filtering out
         * the warning if NOT selected.
         */
        this.filterOptions = [
            {
                filterID: 'warning_v', color: '#D51C19',
                filterFunction: function (peragraph) {
                    return !(peragraph.activeWarning && peragraph.activeWarning.category === 'V');
                }
            },
            {
                filterID: 'warning_h', color: '#EE834C',
                filterFunction: function (peragraph) {
                    return !(peragraph.activeWarning && peragraph.activeWarning.category === 'H');
                }
            },
            {
                filterID: 'warning_m', color: '#F6CC5D',
                filterFunction: function (peragraph) {
                    return !(peragraph.activeWarning && peragraph.activeWarning.category === 'M');
                }
            },
            {
                filterID: 'warning_none', color: '#3185B8',
                filterFunction: function (peragraph) {
                    return !(!peragraph.activeWarning && !peragraph.discharged);
                }
            }
        ];
    }
    WarningsFilterService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ WarningsFilterService.ngInjectableDef = i0.defineInjectable({ factory: function WarningsFilterService_Factory() { return new WarningsFilterService(); }, token: WarningsFilterService, providedIn: "root" });
    return WarningsFilterService;
}());
export { WarningsFilterService };
if (false) {
    /**
     * Warning levels that are selected. Start with all of them.
     * @type {?}
     */
    WarningsFilterService.prototype.selectedWarnings;
    /**
     * Configurations for warning level filter options.
     *
     * Contains a filter id, the color of the warning level and a filter function for filtering out
     * the warning if NOT selected.
     * @type {?}
     */
    WarningsFilterService.prototype.filterOptions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybmluZ3MtZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1maWx0ZXJzLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvZmlsdGVyL3dhcm5pbmdzL3dhcm5pbmdzLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7Ozs7O2dDQVNiLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLGVBQWUsQ0FBQzs7Ozs7Ozs2QkFRM0U7WUFDckI7Z0JBQ0UsUUFBUSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsU0FBUztnQkFDdkMsY0FBYyxFQUFFLFVBQVUsU0FBb0I7b0JBQzVDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQWEsSUFBSSxTQUFTLENBQUMsYUFBYSxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUMsQ0FBQztpQkFDL0U7YUFDRjtZQUVEO2dCQUNFLFFBQVEsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFNBQVM7Z0JBQ3ZDLGNBQWMsRUFBRSxVQUFVLFNBQW9CO29CQUM1QyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLElBQUksU0FBUyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLENBQUM7aUJBQy9FO2FBQ0Y7WUFDRDtnQkFDRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxTQUFTO2dCQUN2QyxjQUFjLEVBQUUsVUFBVSxTQUFvQjtvQkFDNUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsYUFBYSxJQUFJLFNBQVMsQ0FBQyxhQUFhLENBQUMsUUFBUSxLQUFLLEdBQUcsQ0FBQyxDQUFDO2lCQUMvRTthQUNGO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsU0FBUztnQkFDMUMsY0FBYyxFQUFFLFVBQVUsU0FBb0I7b0JBQzVDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsYUFBYSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUM3RDthQUNGO1NBQ0Y7OztnQkF4Q0YsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7O2dDQUxEOztTQU1hLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1BlcmFHcmFwaH0gZnJvbSAnbmctY29tbW9uLWxpYnJhcnknO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBXYXJuaW5nc0ZpbHRlclNlcnZpY2Uge1xuXG4gIC8qKiBXYXJuaW5nIGxldmVscyB0aGF0IGFyZSBzZWxlY3RlZC4gU3RhcnQgd2l0aCBhbGwgb2YgdGhlbS4gKi9cbiAgcHVibGljIHNlbGVjdGVkV2FybmluZ3MgPSBbJ3dhcm5pbmdfdicsICd3YXJuaW5nX2gnLCAnd2FybmluZ19tJywgJ3dhcm5pbmdfbm9uZScsICd3YXJuaW5nX25vX3JpJ107XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb25zIGZvciB3YXJuaW5nIGxldmVsIGZpbHRlciBvcHRpb25zLlxuICAgKlxuICAgKiBDb250YWlucyBhIGZpbHRlciBpZCwgdGhlIGNvbG9yIG9mIHRoZSB3YXJuaW5nIGxldmVsIGFuZCBhIGZpbHRlciBmdW5jdGlvbiBmb3IgZmlsdGVyaW5nIG91dFxuICAgKiB0aGUgd2FybmluZyBpZiBOT1Qgc2VsZWN0ZWQuXG4gICAqL1xuICBwdWJsaWMgZmlsdGVyT3B0aW9ucyA9IFtcbiAgICB7XG4gICAgICBmaWx0ZXJJRDogJ3dhcm5pbmdfdicsIGNvbG9yOiAnI0Q1MUMxOScsXG4gICAgICBmaWx0ZXJGdW5jdGlvbjogZnVuY3Rpb24gKHBlcmFncmFwaDogUGVyYUdyYXBoKSB7XG4gICAgICAgIHJldHVybiAhKHBlcmFncmFwaC5hY3RpdmVXYXJuaW5nICYmIHBlcmFncmFwaC5hY3RpdmVXYXJuaW5nLmNhdGVnb3J5ID09PSAnVicpO1xuICAgICAgfVxuICAgIH1cbiAgICAsXG4gICAge1xuICAgICAgZmlsdGVySUQ6ICd3YXJuaW5nX2gnLCBjb2xvcjogJyNFRTgzNEMnLFxuICAgICAgZmlsdGVyRnVuY3Rpb246IGZ1bmN0aW9uIChwZXJhZ3JhcGg6IFBlcmFHcmFwaCkge1xuICAgICAgICByZXR1cm4gIShwZXJhZ3JhcGguYWN0aXZlV2FybmluZyAmJiBwZXJhZ3JhcGguYWN0aXZlV2FybmluZy5jYXRlZ29yeSA9PT0gJ0gnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIGZpbHRlcklEOiAnd2FybmluZ19tJywgY29sb3I6ICcjRjZDQzVEJyxcbiAgICAgIGZpbHRlckZ1bmN0aW9uOiBmdW5jdGlvbiAocGVyYWdyYXBoOiBQZXJhR3JhcGgpIHtcbiAgICAgICAgcmV0dXJuICEocGVyYWdyYXBoLmFjdGl2ZVdhcm5pbmcgJiYgcGVyYWdyYXBoLmFjdGl2ZVdhcm5pbmcuY2F0ZWdvcnkgPT09ICdNJyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBmaWx0ZXJJRDogJ3dhcm5pbmdfbm9uZScsIGNvbG9yOiAnIzMxODVCOCcsXG4gICAgICBmaWx0ZXJGdW5jdGlvbjogZnVuY3Rpb24gKHBlcmFncmFwaDogUGVyYUdyYXBoKSB7XG4gICAgICAgIHJldHVybiAhKCFwZXJhZ3JhcGguYWN0aXZlV2FybmluZyAmJiAhcGVyYWdyYXBoLmRpc2NoYXJnZWQpO1xuICAgICAgfVxuICAgIH1cbiAgXTtcblxufVxuIl19