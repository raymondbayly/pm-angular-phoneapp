/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { DiagnosisConfigService } from './diagnosis-config.service';
import { timer } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./diagnosis-config.service";
var DiagnosisRestService = /** @class */ (function () {
    function DiagnosisRestService(http, diagnosisConfigService) {
        this.http = http;
        this.diagnosisConfigService = diagnosisConfigService;
        this.pollInstanceDiagnoses$ = timer(0, 90000);
    }
    /**
     * returns an observable with all diagnoses
     */
    /**
     * returns an observable with all diagnoses
     * @return {?}
     */
    DiagnosisRestService.prototype.getAllDiagnoses = /**
     * returns an observable with all diagnoses
     * @return {?}
     */
    function () {
        return this.http.get(this.diagnosisConfigService.getDiagnosesEndpoint() + '/all');
    };
    /**
     * returns an observable that broadcasts all active diagnoses on an interval
     */
    /**
     * returns an observable that broadcasts all active diagnoses on an interval
     * @return {?}
     */
    DiagnosisRestService.prototype.getAllDiagnosisInterval = /**
     * returns an observable that broadcasts all active diagnoses on an interval
     * @return {?}
     */
    function () {
        var _this = this;
        return this.pollInstanceDiagnoses$.pipe(switchMap(function () { return _this.getAllDiagnoses(); }));
    };
    DiagnosisRestService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DiagnosisRestService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: DiagnosisConfigService }
    ]; };
    /** @nocollapse */ DiagnosisRestService.ngInjectableDef = i0.defineInjectable({ factory: function DiagnosisRestService_Factory() { return new DiagnosisRestService(i0.inject(i1.HttpClient), i0.inject(i2.DiagnosisConfigService)); }, token: DiagnosisRestService, providedIn: "root" });
    return DiagnosisRestService;
}());
export { DiagnosisRestService };
if (false) {
    /** @type {?} */
    DiagnosisRestService.prototype.pollInstanceDiagnoses$;
    /** @type {?} */
    DiagnosisRestService.prototype.http;
    /** @type {?} */
    DiagnosisRestService.prototype.diagnosisConfigService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ25vc2lzLXJlc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWZpbHRlcnMtbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXIvZGlhZ25vc2lzL2RpYWdub3Npcy1yZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ2xFLE9BQU8sRUFBYSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7OztJQVN2Qyw4QkFBb0IsSUFBZ0IsRUFBVSxzQkFBOEM7UUFBeEUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDMUYsSUFBSSxDQUFDLHNCQUFzQixHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDL0M7SUFFRDs7T0FFRzs7Ozs7SUFDSCw4Q0FBZTs7OztJQUFmO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFjLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0tBQ2hHO0lBRUQ7O09BRUc7Ozs7O0lBQ0gsc0RBQXVCOzs7O0lBQXZCO1FBQUEsaUJBSUM7UUFIQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FDckMsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsZUFBZSxFQUFFLEVBQXRCLENBQXNCLENBQUMsQ0FDeEMsQ0FBQztLQUNIOztnQkF6QkYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFQTyxVQUFVO2dCQUNWLHNCQUFzQjs7OytCQUg5Qjs7U0FVYSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RpYWdub3Npc30gZnJvbSAnLi4vbW9kZWwvZGlhZ25vc2lzJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtEaWFnbm9zaXNDb25maWdTZXJ2aWNlfSBmcm9tICcuL2RpYWdub3Npcy1jb25maWcuc2VydmljZSc7XG5pbXBvcnQge09ic2VydmFibGUsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7c3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERpYWdub3Npc1Jlc3RTZXJ2aWNlIHtcblxuICBwcml2YXRlIHBvbGxJbnN0YW5jZURpYWdub3NlcyQ6IE9ic2VydmFibGU8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgZGlhZ25vc2lzQ29uZmlnU2VydmljZTogRGlhZ25vc2lzQ29uZmlnU2VydmljZSkge1xuICAgIHRoaXMucG9sbEluc3RhbmNlRGlhZ25vc2VzJCA9IHRpbWVyKDAsIDkwMDAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXR1cm5zIGFuIG9ic2VydmFibGUgd2l0aCBhbGwgZGlhZ25vc2VzXG4gICAqL1xuICBnZXRBbGxEaWFnbm9zZXMoKTogT2JzZXJ2YWJsZTxEaWFnbm9zaXNbXT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PERpYWdub3Npc1tdPih0aGlzLmRpYWdub3Npc0NvbmZpZ1NlcnZpY2UuZ2V0RGlhZ25vc2VzRW5kcG9pbnQoKSArICcvYWxsJyk7XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgYnJvYWRjYXN0cyBhbGwgYWN0aXZlIGRpYWdub3NlcyBvbiBhbiBpbnRlcnZhbFxuICAgKi9cbiAgZ2V0QWxsRGlhZ25vc2lzSW50ZXJ2YWwoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5wb2xsSW5zdGFuY2VEaWFnbm9zZXMkLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5nZXRBbGxEaWFnbm9zZXMoKSlcbiAgICApO1xuICB9XG5cbn1cbiJdfQ==