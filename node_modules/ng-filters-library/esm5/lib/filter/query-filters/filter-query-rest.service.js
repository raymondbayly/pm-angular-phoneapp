/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { timer } from 'rxjs';
import { HttpClient, HttpParams } from '@angular/common/http';
import { FilterQueryConfigService } from './filter-query-config.service';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./filter-query-config.service";
var FilterQueryRestService = /** @class */ (function () {
    function FilterQueryRestService(http, filterQueryConfig) {
        this.http = http;
        this.filterQueryConfig = filterQueryConfig;
        this.pollInstance$ = timer(0, 900000);
    }
    /**
     * Rest call for getting filtered visits according to current criteria
     * @param {?} queryParamsGetter
     * @return {?}
     */
    FilterQueryRestService.prototype.getFilteredVisits = /**
     * Rest call for getting filtered visits according to current criteria
     * @param {?} queryParamsGetter
     * @return {?}
     */
    function (queryParamsGetter) {
        /** @type {?} */
        var serverFilterCriteria = queryParamsGetter();
        return this.http.get(this.filterQueryConfig.getFilterQueryEndPoint(), { params: this.getQueryParams(serverFilterCriteria) });
    };
    /**
     * get updated filter criteria on an interval
     * @param {?} queryParamsGetter
     * @return {?}
     */
    FilterQueryRestService.prototype.getFilteredVisitsInterval = /**
     * get updated filter criteria on an interval
     * @param {?} queryParamsGetter
     * @return {?}
     */
    function (queryParamsGetter) {
        var _this = this;
        return this.pollInstance$.pipe(switchMap((function () { return _this.getFilteredVisits(queryParamsGetter); })));
    };
    /**
     * returns the filter criteria in the form of a HttpParams object
     */
    /**
     * returns the filter criteria in the form of a HttpParams object
     * @param {?} serverFilterCriteria
     * @return {?}
     */
    FilterQueryRestService.prototype.getQueryParams = /**
     * returns the filter criteria in the form of a HttpParams object
     * @param {?} serverFilterCriteria
     * @return {?}
     */
    function (serverFilterCriteria) {
        // check if object is empty
        if (Object.keys(serverFilterCriteria).length === 0) {
            return null;
        }
        else {
            /** @type {?} */
            var params = new HttpParams();
            // for every key in the object attach a list of params
            for (var key in serverFilterCriteria) {
                if (serverFilterCriteria.hasOwnProperty(key)) {
                    try {
                        // traverse the list of params for same key and add each one
                        for (var _a = tslib_1.__values(serverFilterCriteria[key]), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var criteria = _b.value;
                            criteria = criteria.replace(/,/g, '|');
                            params = params.append(key, criteria);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
            return params;
        }
        var e_1, _c;
    };
    FilterQueryRestService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FilterQueryRestService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: FilterQueryConfigService }
    ]; };
    /** @nocollapse */ FilterQueryRestService.ngInjectableDef = i0.defineInjectable({ factory: function FilterQueryRestService_Factory() { return new FilterQueryRestService(i0.inject(i1.HttpClient), i0.inject(i2.FilterQueryConfigService)); }, token: FilterQueryRestService, providedIn: "root" });
    return FilterQueryRestService;
}());
export { FilterQueryRestService };
if (false) {
    /** @type {?} */
    FilterQueryRestService.prototype.pollInstance$;
    /** @type {?} */
    FilterQueryRestService.prototype.http;
    /** @type {?} */
    FilterQueryRestService.prototype.filterQueryConfig;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXF1ZXJ5LXJlc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWZpbHRlcnMtbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXIvcXVlcnktZmlsdGVycy9maWx0ZXItcXVlcnktcmVzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWEsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxVQUFVLEVBQUUsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDdkUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7OztJQVN2QyxnQ0FBb0IsSUFBZ0IsRUFBVSxpQkFBMkM7UUFBckUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7UUFDdkYsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBRXZDOzs7Ozs7SUFLTSxrREFBaUI7Ozs7O2NBQUMsaUJBQXNCOztRQUM3QyxJQUFNLG9CQUFvQixHQUFHLGlCQUFpQixFQUFFLENBQUM7UUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFXLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsRUFBQyxDQUFDLENBQUM7Ozs7Ozs7SUFNaEksMERBQXlCOzs7OztjQUFDLGlCQUFzQjs7UUFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FDdEMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLEVBQXpDLENBQXlDLENBQUMsQ0FDbEQsQ0FBQyxDQUFDOztJQUdMOztPQUVHOzs7Ozs7SUFDSCwrQ0FBYzs7Ozs7SUFBZCxVQUFlLG9CQUF3Qjs7UUFFckMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDYjtRQUFDLElBQUksQ0FBQyxDQUFDOztZQUVOLElBQUksTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7O1lBRTlCLEdBQUcsQ0FBQyxDQUFFLElBQU0sR0FBRyxJQUFJLG9CQUFvQixDQUFDLENBQUMsQ0FBQztnQkFDeEMsRUFBRSxDQUFDLENBQUMsb0JBQW9CLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7d0JBQzdDLDREQUE0RDt3QkFDNUQsR0FBRyxDQUFDLENBQWtCLElBQUEsS0FBQSxpQkFBQSxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQSxnQkFBQTs0QkFBekMsSUFBSSxRQUFRLFdBQUE7NEJBQ2hCLFFBQVEsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQzs0QkFDdkMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO3lCQUN2Qzs7Ozs7Ozs7O2lCQUNGO2FBQ0Y7WUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQ2Y7O0tBQ0Y7O2dCQW5ERixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQU5PLFVBQVU7Z0JBQ1Ysd0JBQXdCOzs7aUNBSGhDOztTQVNhLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtIdHRwQ2xpZW50LCBIdHRwUGFyYW1zfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge0ZpbHRlclF1ZXJ5Q29uZmlnU2VydmljZX0gZnJvbSAnLi9maWx0ZXItcXVlcnktY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHtzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRmlsdGVyUXVlcnlSZXN0U2VydmljZSB7XG5cbiAgcHJpdmF0ZSBwb2xsSW5zdGFuY2UkOiBPYnNlcnZhYmxlPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBwcml2YXRlIGZpbHRlclF1ZXJ5Q29uZmlnOiBGaWx0ZXJRdWVyeUNvbmZpZ1NlcnZpY2UpIHtcbiAgICB0aGlzLnBvbGxJbnN0YW5jZSQgPSB0aW1lcigwLCA5MDAwMDApO1xuXG4gIH1cblxuICAvKipcbiAgICogUmVzdCBjYWxsIGZvciBnZXR0aW5nIGZpbHRlcmVkIHZpc2l0cyBhY2NvcmRpbmcgdG8gY3VycmVudCBjcml0ZXJpYVxuICAgKi9cbiAgcHVibGljIGdldEZpbHRlcmVkVmlzaXRzKHF1ZXJ5UGFyYW1zR2V0dGVyOiBhbnkpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XG4gICAgY29uc3Qgc2VydmVyRmlsdGVyQ3JpdGVyaWEgPSBxdWVyeVBhcmFtc0dldHRlcigpO1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PHN0cmluZ1tdPih0aGlzLmZpbHRlclF1ZXJ5Q29uZmlnLmdldEZpbHRlclF1ZXJ5RW5kUG9pbnQoKSwge3BhcmFtczogdGhpcy5nZXRRdWVyeVBhcmFtcyhzZXJ2ZXJGaWx0ZXJDcml0ZXJpYSl9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgdXBkYXRlZCBmaWx0ZXIgY3JpdGVyaWEgb24gYW4gaW50ZXJ2YWxcbiAgICovXG4gIHB1YmxpYyBnZXRGaWx0ZXJlZFZpc2l0c0ludGVydmFsKHF1ZXJ5UGFyYW1zR2V0dGVyOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5wb2xsSW5zdGFuY2UkLnBpcGUoc3dpdGNoTWFwKFxuICAgICAgKCgpID0+IHRoaXMuZ2V0RmlsdGVyZWRWaXNpdHMocXVlcnlQYXJhbXNHZXR0ZXIpKVxuICAgICkpO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybnMgdGhlIGZpbHRlciBjcml0ZXJpYSBpbiB0aGUgZm9ybSBvZiBhIEh0dHBQYXJhbXMgb2JqZWN0XG4gICAqL1xuICBnZXRRdWVyeVBhcmFtcyhzZXJ2ZXJGaWx0ZXJDcml0ZXJpYToge30pOiBIdHRwUGFyYW1zIHtcbiAgICAvLyBjaGVjayBpZiBvYmplY3QgaXMgZW1wdHlcbiAgICBpZiAoT2JqZWN0LmtleXMoc2VydmVyRmlsdGVyQ3JpdGVyaWEpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIG5vdCBlbXB0eSBjcmVhdGUgcGFyYW1zIG9iamVjdFxuICAgICAgbGV0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCk7XG4gICAgICAvLyBmb3IgZXZlcnkga2V5IGluIHRoZSBvYmplY3QgYXR0YWNoIGEgbGlzdCBvZiBwYXJhbXNcbiAgICAgIGZvciAoIGNvbnN0IGtleSBpbiBzZXJ2ZXJGaWx0ZXJDcml0ZXJpYSkge1xuICAgICAgICBpZiAoc2VydmVyRmlsdGVyQ3JpdGVyaWEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIC8vIHRyYXZlcnNlIHRoZSBsaXN0IG9mIHBhcmFtcyBmb3Igc2FtZSBrZXkgYW5kIGFkZCBlYWNoIG9uZVxuICAgICAgICAgIGZvciAoIGxldCBjcml0ZXJpYSBvZiBzZXJ2ZXJGaWx0ZXJDcml0ZXJpYVtrZXldICkge1xuICAgICAgICAgICAgY3JpdGVyaWEgPSBjcml0ZXJpYS5yZXBsYWNlKC8sL2csICd8Jyk7XG4gICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKGtleSwgY3JpdGVyaWEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG4gIH1cblxufVxuIl19