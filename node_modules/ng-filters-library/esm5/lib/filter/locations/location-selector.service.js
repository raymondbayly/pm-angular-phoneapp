/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
var LocationSelectorService = /** @class */ (function () {
    function LocationSelectorService() {
        this.loadedLocations = new Subject();
        this.selectAll = new EventEmitter();
        this.deselectAll = new EventEmitter();
        this.checkForIndeterminate = new EventEmitter();
        this.expandUnitsList = new EventEmitter();
        this.collapseUnitsList = new EventEmitter();
        this.selectedUnits = [];
        this.previousUnits = [];
    }
    /**
     * @param {?} unitID
     * @return {?}
     */
    LocationSelectorService.prototype.checkUnitSelection = /**
     * @param {?} unitID
     * @return {?}
     */
    function (unitID) {
        try {
            for (var _a = tslib_1.__values(this.selectedUnits), _b = _a.next(); !_b.done; _b = _a.next()) {
                var unit = _b.value;
                if (unitID === unit.key.unitID) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
        var e_1, _c;
    };
    /**
     * @param {?} unit
     * @return {?}
     */
    LocationSelectorService.prototype.selectUnit = /**
     * @param {?} unit
     * @return {?}
     */
    function (unit) {
        if (this.selectedUnits.indexOf(unit) < 0) {
            this.selectedUnits.push(unit);
        }
        this.checkForIndeterminate.emit(unit.key.facilityID);
    };
    /**
     * @param {?} unit
     * @return {?}
     */
    LocationSelectorService.prototype.deselectUnit = /**
     * @param {?} unit
     * @return {?}
     */
    function (unit) {
        /** @type {?} */
        var index = this.selectedUnits.indexOf(unit);
        if (index !== -1) {
            this.selectedUnits.splice(index, 1);
        }
        this.checkForIndeterminate.emit(unit.key.facilityID);
    };
    /**
     * @param {?} facility
     * @return {?}
     */
    LocationSelectorService.prototype.selectAllUnitsFromAFacility = /**
     * @param {?} facility
     * @return {?}
     */
    function (facility) {
        try {
            for (var _a = tslib_1.__values(this.units), _b = _a.next(); !_b.done; _b = _a.next()) {
                var unit = _b.value;
                if (unit.key.facilityID === facility.facilityID && this.selectedUnits.indexOf(unit) < 0) {
                    this.selectedUnits.push(unit);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var e_2, _c;
    };
    /**
     * @param {?} facility
     * @return {?}
     */
    LocationSelectorService.prototype.deselectAllUnitsFromAFacility = /**
     * @param {?} facility
     * @return {?}
     */
    function (facility) {
        try {
            for (var _a = tslib_1.__values(this.units), _b = _a.next(); !_b.done; _b = _a.next()) {
                var unit = _b.value;
                if (unit.key.facilityID === facility.facilityID) {
                    /** @type {?} */
                    var index = this.selectedUnits.indexOf(unit);
                    if (index !== -1) {
                        this.selectedUnits.splice(index, 1);
                    }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        var e_3, _c;
    };
    /** Check if previous units and selected units are the same */
    /**
     * Check if previous units and selected units are the same
     * @return {?}
     */
    LocationSelectorService.prototype.isLocationSelectionTheSame = /**
     * Check if previous units and selected units are the same
     * @return {?}
     */
    function () {
        // quickest way to decide
        if (this.selectedUnits.length !== this.previousUnits.length) {
            return false;
        }
        try {
            // check if every unit from selected units exists in previous units
            for (var _a = tslib_1.__values(this.selectedUnits), _b = _a.next(); !_b.done; _b = _a.next()) {
                var unit = _b.value;
                /** @type {?} */
                var found = false;
                try {
                    for (var _c = tslib_1.__values(this.previousUnits), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var u = _d.value;
                        // match on facility id and unit id
                        if (u.key.facilityID === unit.key.facilityID && u.key.unitID === unit.key.unitID) {
                            found = true;
                            break;
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_e = _c.return)) _e.call(_c);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                if (!found) {
                    return false;
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            // check if every unit from previous units exists in selected units
            for (var _g = tslib_1.__values(this.previousUnits), _h = _g.next(); !_h.done; _h = _g.next()) {
                var unit = _h.value;
                /** @type {?} */
                var found = false;
                try {
                    for (var _j = tslib_1.__values(this.selectedUnits), _k = _j.next(); !_k.done; _k = _j.next()) {
                        var u = _k.value;
                        // match on facility id and unit id
                        if (u.key.facilityID === unit.key.facilityID && u.key.unitID === unit.key.unitID) {
                            found = true;
                            break;
                        }
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (_k && !_k.done && (_l = _j.return)) _l.call(_j);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
                if (!found) {
                    return false;
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_h && !_h.done && (_m = _g.return)) _m.call(_g);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return true;
        var e_5, _f, e_4, _e, e_7, _m, e_6, _l;
    };
    /**
     * @param {?} facilityId
     * @return {?}
     */
    LocationSelectorService.prototype.getUnitCountForFacility = /**
     * @param {?} facilityId
     * @return {?}
     */
    function (facilityId) {
        /** @type {?} */
        var unitCount = 0;
        try {
            for (var _a = tslib_1.__values(this.units), _b = _a.next(); !_b.done; _b = _a.next()) {
                var u = _b.value;
                if (u.key.facilityID === facilityId) {
                    unitCount++;
                }
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_8) throw e_8.error; }
        }
        return unitCount;
        var e_8, _c;
    };
    /** Builds string []s for change of peragraph and FLC REST calls when filtering */
    /**
     * Builds string []s for change of peragraph and FLC REST calls when filtering
     * @return {?}
     */
    LocationSelectorService.prototype.getLocationsToFilter = /**
     * Builds string []s for change of peragraph and FLC REST calls when filtering
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectedLocations = { facilities: [], units: [] };
        try {
            for (var _a = tslib_1.__values(this.selectedUnits), _b = _a.next(); !_b.done; _b = _a.next()) {
                var u = _b.value;
                selectedLocations.units.push(u.key.unitID);
                if (selectedLocations.facilities.indexOf(u.key.facilityID) < 0) {
                    selectedLocations.facilities.push(u.key.facilityID);
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_9) throw e_9.error; }
        }
        /** *
         * If any of the facilities in the selectedLocations are "indeterminate"
         *  then we must supply the list of units. Otherwise we can specify "*"
         *  for the units which makes the rest / sql calls run faster.
          @type {?} */
        var foundIndeterminateFacility = false;
        try {
            for (var _d = tslib_1.__values(selectedLocations.facilities), _e = _d.next(); !_e.done; _e = _d.next()) {
                var fId = _e.value;
                if (this.indeterminateFacilities.indexOf(fId) >= 0) {
                    foundIndeterminateFacility = true;
                    // It only takes one...
                    break;
                }
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
            }
            finally { if (e_10) throw e_10.error; }
        }
        if (!foundIndeterminateFacility) {
            selectedLocations.units = ['*'];
        }
        return selectedLocations;
        var e_9, _c, e_10, _f;
    };
    /**
     * @param {?} facilityID
     * @param {?} isIndeterminate
     * @return {?}
     */
    LocationSelectorService.prototype.setFacilityIndeterminateState = /**
     * @param {?} facilityID
     * @param {?} isIndeterminate
     * @return {?}
     */
    function (facilityID, isIndeterminate) {
        if (isIndeterminate) {
            this.indeterminateFacilities.push(facilityID);
        }
        else {
            if (this.indeterminateFacilities.indexOf(facilityID) >= 0) {
                this.indeterminateFacilities.splice(this.indeterminateFacilities.indexOf(facilityID), 1);
            }
        }
    };
    /**
     * @return {?}
     */
    LocationSelectorService.prototype.clearIndeterminateFacilities = /**
     * @return {?}
     */
    function () {
        this.indeterminateFacilities = [];
    };
    LocationSelectorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LocationSelectorService.ctorParameters = function () { return []; };
    /** @nocollapse */ LocationSelectorService.ngInjectableDef = i0.defineInjectable({ factory: function LocationSelectorService_Factory() { return new LocationSelectorService(); }, token: LocationSelectorService, providedIn: "root" });
    return LocationSelectorService;
}());
export { LocationSelectorService };
if (false) {
    /** @type {?} */
    LocationSelectorService.prototype.loadedLocations;
    /** @type {?} */
    LocationSelectorService.prototype.facilities;
    /** @type {?} */
    LocationSelectorService.prototype.units;
    /**
     * Facilities that do not have all of their units selected
     *  This is useful when setting up the rest call
     *  NOTE: I thought about making facilities a map and putting units
     *       as the value, but the REST call just takes the list of facilities
     *       and units.. so it really is all units or some units with the call.
     * @type {?}
     */
    LocationSelectorService.prototype.indeterminateFacilities;
    /** @type {?} */
    LocationSelectorService.prototype.selectAll;
    /** @type {?} */
    LocationSelectorService.prototype.deselectAll;
    /** @type {?} */
    LocationSelectorService.prototype.checkForIndeterminate;
    /** @type {?} */
    LocationSelectorService.prototype.expandUnitsList;
    /** @type {?} */
    LocationSelectorService.prototype.collapseUnitsList;
    /** @type {?} */
    LocationSelectorService.prototype.selectedUnits;
    /** @type {?} */
    LocationSelectorService.prototype.previousUnits;
}

//# sourceMappingURL=data:application/json;base64,