/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var ProviderFilterService = /** @class */ (function () {
    function ProviderFilterService() {
        // all providers
        this.providers = [];
        // dictionary of providers currently selected in sidebar
        this.selectedProviders = {};
        // event for letting provider filter know providers are ready
        this.providersLoaded = new EventEmitter();
        // event for changing all checkbox values
        // true for select
        // false for deselect
        this.toggleAll = new EventEmitter();
    }
    /**
     * closure which returns filter function
     * had to use a closure to be able to pass in selectedProviders list into filter
     */
    /**
     * closure which returns filter function
     * had to use a closure to be able to pass in selectedProviders list into filter
     * @return {?}
     */
    ProviderFilterService.prototype.getFilterfunction = /**
     * closure which returns filter function
     * had to use a closure to be able to pass in selectedProviders list into filter
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectedProviders = {};
        for (var prov in this.selectedProviders) {
            if (prov) {
                selectedProviders[prov] = this.selectedProviders[prov];
            }
        }
        return function (peragraph) {
            return peragraph.attendingProvider && selectedProviders[peragraph.attendingProvider.firstName + peragraph.attendingProvider.lastName];
        };
    };
    ProviderFilterService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ProviderFilterService.ctorParameters = function () { return []; };
    /** @nocollapse */ ProviderFilterService.ngInjectableDef = i0.defineInjectable({ factory: function ProviderFilterService_Factory() { return new ProviderFilterService(); }, token: ProviderFilterService, providedIn: "root" });
    return ProviderFilterService;
}());
export { ProviderFilterService };
if (false) {
    /** @type {?} */
    ProviderFilterService.prototype.providers;
    /** @type {?} */
    ProviderFilterService.prototype.selectedProviders;
    /** @type {?} */
    ProviderFilterService.prototype.providersLoaded;
    /** @type {?} */
    ProviderFilterService.prototype.toggleAll;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1maWx0ZXJzLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvZmlsdGVyL3Byb3ZpZGVycy9wcm92aWRlci1maWx0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7OztJQXVCbkQ7O3lCQWJpQyxFQUFFOztpQ0FHZixFQUFFOzsrQkFHSixJQUFJLFlBQVksRUFBUTs7Ozt5QkFLOUIsSUFBSSxZQUFZLEVBQVc7S0FHdEM7SUFFRDs7O09BR0c7Ozs7OztJQUNILGlEQUFpQjs7Ozs7SUFBakI7O1FBQ0ksSUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsSUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUMxQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNULGlCQUFpQixDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN4RDtTQUNGO1FBQ0QsTUFBTSxDQUFDLFVBQVMsU0FBb0I7WUFDaEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN6SSxDQUFDO0tBQ0w7O2dCQXBDSixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7OztnQ0FORDs7U0FPYSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0V2ZW50RW1pdHRlciwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1BlcmFHcmFwaH0gZnJvbSAnbmctY29tbW9uLWxpYnJhcnknO1xuaW1wb3J0IHtBdHRlbmRpbmdQcm92aWRlcn0gZnJvbSAnbmctY29tbW9uLWxpYnJhcnkvbGliL21vZGVsL0F0dGVuZGluZ1Byb3ZpZGVyJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQcm92aWRlckZpbHRlclNlcnZpY2Uge1xuXG4gICAgLy8gYWxsIHByb3ZpZGVyc1xuICAgIHByb3ZpZGVyczogQXR0ZW5kaW5nUHJvdmlkZXJbXSA9IFtdO1xuXG4gICAgLy8gZGljdGlvbmFyeSBvZiBwcm92aWRlcnMgY3VycmVudGx5IHNlbGVjdGVkIGluIHNpZGViYXJcbiAgICBzZWxlY3RlZFByb3ZpZGVycyA9IHt9O1xuXG4gICAgLy8gZXZlbnQgZm9yIGxldHRpbmcgcHJvdmlkZXIgZmlsdGVyIGtub3cgcHJvdmlkZXJzIGFyZSByZWFkeVxuICAgIHByb3ZpZGVyc0xvYWRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAgIC8vIGV2ZW50IGZvciBjaGFuZ2luZyBhbGwgY2hlY2tib3ggdmFsdWVzXG4gICAgLy8gdHJ1ZSBmb3Igc2VsZWN0XG4gICAgLy8gZmFsc2UgZm9yIGRlc2VsZWN0XG4gICAgdG9nZ2xlQWxsID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2xvc3VyZSB3aGljaCByZXR1cm5zIGZpbHRlciBmdW5jdGlvblxuICAgICAqIGhhZCB0byB1c2UgYSBjbG9zdXJlIHRvIGJlIGFibGUgdG8gcGFzcyBpbiBzZWxlY3RlZFByb3ZpZGVycyBsaXN0IGludG8gZmlsdGVyXG4gICAgICovXG4gICAgZ2V0RmlsdGVyZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkUHJvdmlkZXJzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgcHJvdiBpbiB0aGlzLnNlbGVjdGVkUHJvdmlkZXJzKSB7XG4gICAgICAgICAgaWYgKHByb3YpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkUHJvdmlkZXJzW3Byb3ZdID0gdGhpcy5zZWxlY3RlZFByb3ZpZGVyc1twcm92XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBlcmFncmFwaDogUGVyYUdyYXBoKSB7XG4gICAgICAgICAgICByZXR1cm4gcGVyYWdyYXBoLmF0dGVuZGluZ1Byb3ZpZGVyICYmIHNlbGVjdGVkUHJvdmlkZXJzW3BlcmFncmFwaC5hdHRlbmRpbmdQcm92aWRlci5maXJzdE5hbWUgKyBwZXJhZ3JhcGguYXR0ZW5kaW5nUHJvdmlkZXIubGFzdE5hbWVdO1xuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==