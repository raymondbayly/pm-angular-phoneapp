/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { SortChoices } from './SortEnum';
import * as i0 from "@angular/core";
var SortService = /** @class */ (function () {
    function SortService() {
        this.activeSortFunction = null;
        this._stagedSortFunction = null;
        this.activeSortName = null;
        this.stagedSortName = null;
        this.nonStandardSortFunctionActive = false;
        this.nonStandardSortFunction = null;
        // options of dropdown
        this.choices = [
            {
                value: {
                    sortName: SortChoices.DisplayName, transformer: function (peragraph) {
                        return peragraph.displayName;
                    }
                }, description: 'Patient Name', tooltip: 'Alphabetical sort by patient last name'
            },
            {
                value: {
                    sortName: SortChoices.MedicalRecordNumber, transformer: function (peragraph) {
                        return peragraph.patient.medicalRecordNumber;
                    }
                }, description: 'MRN', tooltip: 'Sort graphs by the medical record number of the patient'
            },
            {
                value: {
                    sortName: SortChoices.VisitNumber, transformer: function (peragraph) {
                        return peragraph.vnm;
                    }
                }, description: 'Visit Number', tooltip: 'Sort graphs by the visit number of the patient'
            },
            {
                value: {
                    sortName: SortChoices.RIScore, transformer: function (peragraph) {
                        return peragraph.latestRi;
                    }
                }, description: 'RI Score', tooltip: 'Sort by Rothman Index score value'
            },
            {
                value: {
                    sortName: SortChoices.HospitalLOS, transformer: function (peragraph) {
                        return peragraph.admitDate;
                    }
                }, description: 'Hospital LOS', tooltip: 'Sort by hospital length of stay'
            },
            {
                value: {
                    sortName: SortChoices.WarningSeverity, transformer: function (peragraph) {
                        if (peragraph.activeWarning) {
                            /** @type {?} */
                            var category = peragraph.activeWarning.category;
                            if (category === 'V') {
                                return 4;
                            }
                            else if (category === 'H') {
                                return 3;
                            }
                            else if (category === 'M') {
                                return 2;
                            }
                            else {
                                return 1;
                            }
                        }
                        return null;
                    }
                }, description: 'Warning Severity', tooltip: 'Sort by the severity of patient warnings'
            },
            {
                value: {
                    sortName: SortChoices.WarningDuration, transformer: function (peragraph) {
                        if (peragraph.activeWarning) {
                            return peragraph.activeWarning.createdDate;
                        }
                        return null;
                    }
                }, description: 'Warning Created Time', tooltip: 'Sort by warning created time'
            }
        ];
        this.stageSortFunction(this.choices[0].value.transformer, 1, this.choices[0].value.sortName);
        // set staged sort to active
        this.activeSortFunction = this.getStagedSortFunction();
        this.activeSortName = this.stagedSortName;
    }
    /**
     * @return {?}
     */
    SortService.prototype.getStagedSortFunction = /**
     * @return {?}
     */
    function () {
        return this._stagedSortFunction;
    };
    /**
     * what to do if sidebar is destroyed
     */
    /**
     * what to do if sidebar is destroyed
     * @return {?}
     */
    SortService.prototype.clearSort = /**
     * what to do if sidebar is destroyed
     * @return {?}
     */
    function () {
        this.activeSortName = null;
        this.activeSortFunction = null;
        this.stagedSortName = null;
        this._stagedSortFunction = null;
    };
    /**
     * stage sort function for application
     */
    /**
     * stage sort function for application
     * @param {?} transformer
     * @param {?} direction
     * @param {?} sortName
     * @return {?}
     */
    SortService.prototype.stageSortFunction = /**
     * stage sort function for application
     * @param {?} transformer
     * @param {?} direction
     * @param {?} sortName
     * @return {?}
     */
    function (transformer, direction, sortName) {
        this.stagedSortName = sortName;
        this._stagedSortFunction = this.createSortFunction(transformer, direction);
    };
    /**
     * generates sort function from transformer function, direction, and sortName
     * @param transformer - function to take peraGraph and return primitive value for sorting
     * @param direction - direction of sort
     */
    /**
     * generates sort function from transformer function, direction, and sortName
     * @param {?} transformer - function to take peraGraph and return primitive value for sorting
     * @param {?} direction - direction of sort
     * @return {?}
     */
    SortService.prototype.createSortFunction = /**
     * generates sort function from transformer function, direction, and sortName
     * @param {?} transformer - function to take peraGraph and return primitive value for sorting
     * @param {?} direction - direction of sort
     * @return {?}
     */
    function (transformer, direction) {
        return function (peraGraphA, peraGraphB) {
            /** @type {?} */
            var valueA = transformer(peraGraphA);
            /** @type {?} */
            var valueB = transformer(peraGraphB);
            /** @type {?} */
            var comparison = 0;
            // compare values and return
            if (valueA && valueB) {
                if (valueA > valueB) {
                    comparison = 1;
                }
                if (valueA < valueB) {
                    comparison = -1;
                }
            }
            else {
                if (valueA && !valueB) {
                    comparison = 1;
                }
                else if (valueB && !valueA) {
                    comparison = -1;
                }
            }
            return comparison * direction;
        };
    };
    SortService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SortService.ctorParameters = function () { return []; };
    /** @nocollapse */ SortService.ngInjectableDef = i0.defineInjectable({ factory: function SortService_Factory() { return new SortService(); }, token: SortService, providedIn: "root" });
    return SortService;
}());
export { SortService };
if (false) {
    /** @type {?} */
    SortService.prototype.activeSortFunction;
    /** @type {?} */
    SortService.prototype._stagedSortFunction;
    /** @type {?} */
    SortService.prototype.activeSortName;
    /** @type {?} */
    SortService.prototype.stagedSortName;
    /** @type {?} */
    SortService.prototype.nonStandardSortFunctionActive;
    /** @type {?} */
    SortService.prototype.nonStandardSortFunction;
    /** @type {?} */
    SortService.prototype.choices;
}

//# sourceMappingURL=data:application/json;base64,