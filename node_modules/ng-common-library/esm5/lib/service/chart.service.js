/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { MarkerColors } from '../model/MarkerColors';
import { DateService } from './date.service';
import * as i0 from "@angular/core";
import * as i1 from "./date.service";
var ChartService = /** @class */ (function () {
    function ChartService(dateService) {
        this.dateService = dateService;
    }
    /**
     * Create the line across the 0 axis for when RI scores go below zero in a graph.
     * @param {?} minRiScore Minimum RI score.
     * @return {?}
     */
    ChartService.prototype.createZeroAxisLine = /**
     * Create the line across the 0 axis for when RI scores go below zero in a graph.
     * @param {?} minRiScore Minimum RI score.
     * @return {?}
     */
    function (minRiScore) {
        return [
            {
                color: '#000000',
                width: minRiScore < 0 ? 1 : null,
                value: minRiScore < 0 ? 0 : null,
                zIndex: 3
            }
        ];
    };
    /**
     * Create an alert plot line for a graph.
     *
     * @param {?} graph
     * @return {?}
     */
    ChartService.prototype.updateAlertPlotLine = /**
     * Create an alert plot line for a graph.
     *
     * @param {?} graph
     * @return {?}
     */
    function (graph) {
        /** @type {?} */
        var plotLines = [];
        if (graph && graph.activeWarning) {
            plotLines.push({
                color: '#CE2029',
                value: this.dateService.translateDate(graph.activeWarning.createdDate, graph.timeZone),
                width: 2,
                zIndex: 3
            });
        }
        return plotLines;
    };
    /**
     * @param {?} minRiScore
     * @return {?}
     */
    ChartService.prototype.getMinYAxisTick = /**
     * @param {?} minRiScore
     * @return {?}
     */
    function (minRiScore) {
        return (minRiScore > 0) ? 0 : 20 * Math.floor(minRiScore / 20);
    };
    /**
     * Used in the graph to depict the unit type where a health score was recorded.
     * @param {?} unitType Type of unit to get the marker color for.
     * @return {?}
     */
    ChartService.prototype.getMarkerColor = /**
     * Used in the graph to depict the unit type where a health score was recorded.
     * @param {?} unitType Type of unit to get the marker color for.
     * @return {?}
     */
    function (unitType) {
        /** @type {?} */
        var markerColor = MarkerColors.Normal;
        switch (unitType) {
            case 'N':
                markerColor = MarkerColors.IntensiveCare;
                break;
            case 'C':
                markerColor = MarkerColors.IntensiveCare;
                break;
            case 'P':
                markerColor = MarkerColors.StepDown;
                break;
        }
        return markerColor;
    };
    ChartService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ChartService.ctorParameters = function () { return [
        { type: DateService }
    ]; };
    /** @nocollapse */ ChartService.ngInjectableDef = i0.defineInjectable({ factory: function ChartService_Factory() { return new ChartService(i0.inject(i1.DateService)); }, token: ChartService, providedIn: "root" });
    return ChartService;
}());
export { ChartService };
if (false) {
    /** @type {?} */
    ChartService.prototype.dateService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWNvbW1vbi1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvY2hhcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDbkQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7O0lBT3pDLHNCQUFvQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtLQUMzQzs7Ozs7O0lBTU0seUNBQWtCOzs7OztjQUFDLFVBQWtCO1FBQzFDLE1BQU0sQ0FBQztZQUNMO2dCQUNFLEtBQUssRUFBRSxTQUFTO2dCQUNoQixLQUFLLEVBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO2dCQUNoQyxLQUFLLEVBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO2dCQUNoQyxNQUFNLEVBQUUsQ0FBQzthQUNWO1NBQUMsQ0FBQzs7Ozs7Ozs7SUFTQSwwQ0FBbUI7Ozs7OztjQUFDLEtBQWdCOztRQUN6QyxJQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDckIsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLFNBQVMsQ0FBQyxJQUFJLENBQUM7Z0JBQ2IsS0FBSyxFQUFFLFNBQVM7Z0JBQ2hCLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDO2dCQUN0RixLQUFLLEVBQUUsQ0FBQztnQkFDUixNQUFNLEVBQUUsQ0FBQzthQUNWLENBQUMsQ0FBQztTQUNKO1FBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQzs7Ozs7O0lBR1osc0NBQWU7Ozs7Y0FBQyxVQUFVO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLENBQUM7Ozs7Ozs7SUFPMUQscUNBQWM7Ozs7O2NBQUMsUUFBZ0I7O1FBQ3BDLElBQUksV0FBVyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDdEMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNqQixLQUFLLEdBQUc7Z0JBQ04sV0FBVyxHQUFHLFlBQVksQ0FBQyxhQUFhLENBQUM7Z0JBQ3pDLEtBQUssQ0FBQztZQUNSLEtBQUssR0FBRztnQkFDTixXQUFXLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQztnQkFDekMsS0FBSyxDQUFDO1lBQ1IsS0FBSyxHQUFHO2dCQUNOLFdBQVcsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDO2dCQUNwQyxLQUFLLENBQUM7U0FDVDtRQUNELE1BQU0sQ0FBQyxXQUFXLENBQUM7OztnQkE5RHRCLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBSk8sV0FBVzs7O3VCQUhuQjs7U0FRYSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UGVyYUdyYXBofSBmcm9tICcuLi9tb2RlbC9QZXJhR3JhcGgnO1xuaW1wb3J0IHtNYXJrZXJDb2xvcnN9IGZyb20gJy4uL21vZGVsL01hcmtlckNvbG9ycyc7XG5pbXBvcnQge0RhdGVTZXJ2aWNlfSBmcm9tICcuL2RhdGUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENoYXJ0U2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXRlU2VydmljZTogRGF0ZVNlcnZpY2UpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGxpbmUgYWNyb3NzIHRoZSAwIGF4aXMgZm9yIHdoZW4gUkkgc2NvcmVzIGdvIGJlbG93IHplcm8gaW4gYSBncmFwaC5cbiAgICogQHBhcmFtIG1pblJpU2NvcmUgTWluaW11bSBSSSBzY29yZS5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGVaZXJvQXhpc0xpbmUobWluUmlTY29yZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICAgICAgd2lkdGg6IG1pblJpU2NvcmUgPCAwID8gMSA6IG51bGwsXG4gICAgICAgIHZhbHVlOiBtaW5SaVNjb3JlIDwgMCA/IDAgOiBudWxsLFxuICAgICAgICB6SW5kZXg6IDNcbiAgICAgIH1dO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBhbGVydCBwbG90IGxpbmUgZm9yIGEgZ3JhcGguXG4gICAqXG4gICAqIEBwYXJhbSBhbGVydENyZWF0ZWREYXRlIFRoZSBjcmVhdGVkIGRhdGUgb2YgdGhlIGFsZXJ0LlxuICAgKiBAcGFyYW0gdGltZVpvbmUgVGhlIHRpbWV6b25lIHRoYXQgdGhlIGFsZXJ0IHdhcyBjcmVhdGVkIGluLlxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUFsZXJ0UGxvdExpbmUoZ3JhcGg6IFBlcmFHcmFwaCkge1xuICAgIGNvbnN0IHBsb3RMaW5lcyA9IFtdO1xuICAgIGlmIChncmFwaCAmJiBncmFwaC5hY3RpdmVXYXJuaW5nKSB7XG4gICAgICBwbG90TGluZXMucHVzaCh7XG4gICAgICAgIGNvbG9yOiAnI0NFMjAyOScsXG4gICAgICAgIHZhbHVlOiB0aGlzLmRhdGVTZXJ2aWNlLnRyYW5zbGF0ZURhdGUoZ3JhcGguYWN0aXZlV2FybmluZy5jcmVhdGVkRGF0ZSwgZ3JhcGgudGltZVpvbmUpLFxuICAgICAgICB3aWR0aDogMixcbiAgICAgICAgekluZGV4OiAzXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHBsb3RMaW5lcztcbiAgfVxuXG4gIHB1YmxpYyBnZXRNaW5ZQXhpc1RpY2sobWluUmlTY29yZSk6IG51bWJlciB7XG4gICAgcmV0dXJuIChtaW5SaVNjb3JlID4gMCkgPyAwIDogMjAgKiBNYXRoLmZsb29yKG1pblJpU2NvcmUgLyAyMCk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBpbiB0aGUgZ3JhcGggdG8gZGVwaWN0IHRoZSB1bml0IHR5cGUgd2hlcmUgYSBoZWFsdGggc2NvcmUgd2FzIHJlY29yZGVkLlxuICAgKiBAcGFyYW0gdW5pdFR5cGUgVHlwZSBvZiB1bml0IHRvIGdldCB0aGUgbWFya2VyIGNvbG9yIGZvci5cbiAgICovXG4gIHB1YmxpYyBnZXRNYXJrZXJDb2xvcih1bml0VHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgbWFya2VyQ29sb3IgPSBNYXJrZXJDb2xvcnMuTm9ybWFsO1xuICAgIHN3aXRjaCAodW5pdFR5cGUpIHtcbiAgICAgIGNhc2UgJ04nOlxuICAgICAgICBtYXJrZXJDb2xvciA9IE1hcmtlckNvbG9ycy5JbnRlbnNpdmVDYXJlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0MnOlxuICAgICAgICBtYXJrZXJDb2xvciA9IE1hcmtlckNvbG9ycy5JbnRlbnNpdmVDYXJlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1AnOlxuICAgICAgICBtYXJrZXJDb2xvciA9IE1hcmtlckNvbG9ycy5TdGVwRG93bjtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBtYXJrZXJDb2xvcjtcbiAgfVxufVxuIl19