/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FlowsheetsConfigService } from '../config/flowsheets-config.service';
import { BehaviorSubject, timer } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../config/flowsheets-config.service";
var FlowsheetsApiService = /** @class */ (function () {
    function FlowsheetsApiService(http, flowsheetConfigService) {
        this.http = http;
        this.flowsheetConfigService = flowsheetConfigService;
        this.pollInstance$ = timer(0, 60000);
        this.flowSheetSubject = new BehaviorSubject(null);
        this.riScoresSubject = new BehaviorSubject(null);
    }
    /**
     * @return {?}
     */
    FlowsheetsApiService.prototype.getFlowSheetSubject = /**
     * @return {?}
     */
    function () {
        return this.flowSheetSubject;
    };
    /**
     * @return {?}
     */
    FlowsheetsApiService.prototype.getFlowSheetSubjectValue = /**
     * @return {?}
     */
    function () {
        return this.flowSheetSubject.value;
    };
    /**
     * @return {?}
     */
    FlowsheetsApiService.prototype.getRiScoresSubject = /**
     * @return {?}
     */
    function () {
        return this.riScoresSubject;
    };
    /**
     * @return {?}
     */
    FlowsheetsApiService.prototype.getRiScoresSubjectValue = /**
     * @return {?}
     */
    function () {
        return this.riScoresSubject.value;
    };
    /**
     * @return {?}
     */
    FlowsheetsApiService.prototype.getSinglePeraGraphFlowSheet = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.flowsheetConfigService.getSinglePeraGraphFlowSheetEndPoint());
    };
    /**
     * @return {?}
     */
    FlowsheetsApiService.prototype.getDetailedFlowsheetColumn = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.flowsheetConfigService.getDetailedFlowSheetColumnEndpoint());
    };
    /**
     * @return {?}
     */
    FlowsheetsApiService.prototype.getAllPeraGraphFlowSheets = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.flowsheetConfigService.getAllPeragraphFlowSheetsEndPoint(), { observe: 'response' });
    };
    /**
     * @return {?}
     */
    FlowsheetsApiService.prototype.getAllRiScores = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.flowsheetConfigService.getLatestRiScoresEndPoint(), { observe: 'response' });
    };
    /**
     * @return {?}
     */
    FlowsheetsApiService.prototype.getFlowSheetInterval = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Make an HTTP call on an interval
        return this.pollInstance$.pipe(switchMap(function () { return _this.getAllPeraGraphFlowSheets(); }));
    };
    /**
     * @return {?}
     */
    FlowsheetsApiService.prototype.getLatestRiScoresInterval = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Make an HTTP call on an interval
        return this.pollInstance$.pipe(switchMap(function () { return _this.getAllRiScores(); }));
    };
    FlowsheetsApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FlowsheetsApiService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: FlowsheetsConfigService }
    ]; };
    /** @nocollapse */ FlowsheetsApiService.ngInjectableDef = i0.defineInjectable({ factory: function FlowsheetsApiService_Factory() { return new FlowsheetsApiService(i0.inject(i1.HttpClient), i0.inject(i2.FlowsheetsConfigService)); }, token: FlowsheetsApiService, providedIn: "root" });
    return FlowsheetsApiService;
}());
export { FlowsheetsApiService };
if (false) {
    /** @type {?} */
    FlowsheetsApiService.prototype.flowSheetSubject;
    /** @type {?} */
    FlowsheetsApiService.prototype.riScoresSubject;
    /** @type {?} */
    FlowsheetsApiService.prototype.pollInstance$;
    /** @type {?} */
    FlowsheetsApiService.prototype.http;
    /** @type {?} */
    FlowsheetsApiService.prototype.flowsheetConfigService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvd3NoZWV0cy1hcGkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWNvbW1vbi1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvZmxvd3NoZWV0cy9hcGkvZmxvd3NoZWV0cy1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDNUUsT0FBTyxFQUFDLGVBQWUsRUFBYyxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFeEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7OztJQWF2Qyw4QkFBb0IsSUFBZ0IsRUFDaEI7UUFEQSxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLDJCQUFzQixHQUF0QixzQkFBc0I7UUFDeEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGVBQWUsQ0FBb0MsSUFBSSxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBc0IsSUFBSSxDQUFDLENBQUM7S0FDdkU7Ozs7SUFFTSxrREFBbUI7Ozs7UUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQzs7Ozs7SUFHeEIsdURBQXdCOzs7O1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDOzs7OztJQUc5QixpREFBa0I7Ozs7UUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7Ozs7O0lBR3ZCLHNEQUF1Qjs7OztRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUM7Ozs7O0lBR3BDLDBEQUEyQjs7O0lBQTNCO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxtQ0FBbUMsRUFBRSxDQUFDLENBQUM7S0FDOUY7Ozs7SUFFRCx5REFBMEI7OztJQUExQjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsa0NBQWtDLEVBQUUsQ0FBQyxDQUFDO0tBQzdGOzs7O0lBRUQsd0RBQXlCOzs7SUFBekI7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGlDQUFpQyxFQUFFLEVBQUUsRUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztLQUM5Rzs7OztJQUVELDZDQUFjOzs7SUFBZDtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMseUJBQXlCLEVBQUUsRUFBRSxFQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDO0tBQ3RHOzs7O0lBRU0sbURBQW9COzs7Ozs7UUFFekIsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM1QixTQUFTLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyx5QkFBeUIsRUFBRSxFQUFoQyxDQUFnQyxDQUFDLENBQ2xELENBQUM7Ozs7O0lBR0csd0RBQXlCOzs7Ozs7UUFFOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM1QixTQUFTLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxjQUFjLEVBQUUsRUFBckIsQ0FBcUIsQ0FBQyxDQUN2QyxDQUFDOzs7Z0JBN0RMLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBUk8sVUFBVTtnQkFDVix1QkFBdUI7OzsrQkFGL0I7O1NBVWEsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtGbG93c2hlZXRzQ29uZmlnU2VydmljZX0gZnJvbSAnLi4vY29uZmlnL2Zsb3dzaGVldHMtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7Rmxvd1NoZWV0QmFzZX0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvRmxvd1NoZWV0QmFzZSc7XG5pbXBvcnQge3N3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGbG93c2hlZXRzQXBpU2VydmljZSB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBmbG93U2hlZXRTdWJqZWN0OiBCZWhhdmlvclN1YmplY3Q8TWFwPG51bWJlciwgQXJyYXk8Rmxvd1NoZWV0QmFzZT4+PjtcbiAgLy8gTWFwIG9mIG51bWVyaWMgUkkgc2NvcmUga2V5ZWQgYnkgVmlzaXQgSURcbiAgcHJpdmF0ZSByZWFkb25seSByaVNjb3Jlc1N1YmplY3Q6IEJlaGF2aW9yU3ViamVjdDxNYXA8bnVtYmVyLCBudW1iZXI+PjtcbiAgLy8gVGhlIHRpbWVyIHRoYXQgZmlyZXMgc28gdGhhdCBjbGllbnRzIGNhbiBnZXQgdGhlIGxhdGVzdCBmbG93c2hlZXQgYW5kIFJJIHNjb3JlIHZhbHVlc1xuICBwcml2YXRlIHBvbGxJbnN0YW5jZSQ6IE9ic2VydmFibGU8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgICAgICAgICAgIHByaXZhdGUgZmxvd3NoZWV0Q29uZmlnU2VydmljZTogRmxvd3NoZWV0c0NvbmZpZ1NlcnZpY2UpIHtcbiAgICB0aGlzLnBvbGxJbnN0YW5jZSQgPSB0aW1lcigwLCA2MDAwMCk7XG4gICAgdGhpcy5mbG93U2hlZXRTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxNYXA8bnVtYmVyLCBBcnJheTxGbG93U2hlZXRCYXNlPj4+KG51bGwpO1xuICAgIHRoaXMucmlTY29yZXNTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxNYXA8bnVtYmVyLCBudW1iZXI+PihudWxsKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRGbG93U2hlZXRTdWJqZWN0KCkge1xuICAgIHJldHVybiB0aGlzLmZsb3dTaGVldFN1YmplY3Q7XG4gIH1cblxuICBwdWJsaWMgZ2V0Rmxvd1NoZWV0U3ViamVjdFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmZsb3dTaGVldFN1YmplY3QudmFsdWU7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmlTY29yZXNTdWJqZWN0KCkge1xuICAgIHJldHVybiB0aGlzLnJpU2NvcmVzU3ViamVjdDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSaVNjb3Jlc1N1YmplY3RWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yaVNjb3Jlc1N1YmplY3QudmFsdWU7XG4gIH1cblxuICBnZXRTaW5nbGVQZXJhR3JhcGhGbG93U2hlZXQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxhbnk+KHRoaXMuZmxvd3NoZWV0Q29uZmlnU2VydmljZS5nZXRTaW5nbGVQZXJhR3JhcGhGbG93U2hlZXRFbmRQb2ludCgpKTtcbiAgfVxuXG4gIGdldERldGFpbGVkRmxvd3NoZWV0Q29sdW1uKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8YW55Pih0aGlzLmZsb3dzaGVldENvbmZpZ1NlcnZpY2UuZ2V0RGV0YWlsZWRGbG93U2hlZXRDb2x1bW5FbmRwb2ludCgpKTtcbiAgfVxuXG4gIGdldEFsbFBlcmFHcmFwaEZsb3dTaGVldHMoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLmZsb3dzaGVldENvbmZpZ1NlcnZpY2UuZ2V0QWxsUGVyYWdyYXBoRmxvd1NoZWV0c0VuZFBvaW50KCksIHtvYnNlcnZlOiAncmVzcG9uc2UnfSk7XG4gIH1cblxuICBnZXRBbGxSaVNjb3JlcygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMuZmxvd3NoZWV0Q29uZmlnU2VydmljZS5nZXRMYXRlc3RSaVNjb3Jlc0VuZFBvaW50KCksIHtvYnNlcnZlOiAncmVzcG9uc2UnfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Rmxvd1NoZWV0SW50ZXJ2YWwoKSB7XG4gICAgLy8gTWFrZSBhbiBIVFRQIGNhbGwgb24gYW4gaW50ZXJ2YWxcbiAgICByZXR1cm4gdGhpcy5wb2xsSW5zdGFuY2UkLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5nZXRBbGxQZXJhR3JhcGhGbG93U2hlZXRzKCkpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMYXRlc3RSaVNjb3Jlc0ludGVydmFsKCkge1xuICAgIC8vIE1ha2UgYW4gSFRUUCBjYWxsIG9uIGFuIGludGVydmFsXG4gICAgcmV0dXJuIHRoaXMucG9sbEluc3RhbmNlJC5waXBlKFxuICAgICAgc3dpdGNoTWFwKCgpID0+IHRoaXMuZ2V0QWxsUmlTY29yZXMoKSlcbiAgICApO1xuICB9XG59XG4iXX0=