/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DateService } from './date.service';
import * as moment_ from 'moment-timezone';
import * as i0 from "@angular/core";
import * as i1 from "./date.service";
/** @type {?} */
var moment = moment_;
var PatientService = /** @class */ (function () {
    function PatientService(dateService) {
        this.dateService = dateService;
    }
    /**
     * Returns the patient age in years, months using the patient DOB
     * @param {?} graph
     * @return {?}
     */
    PatientService.prototype.getPatientAge = /**
     * Returns the patient age in years, months using the patient DOB
     * @param {?} graph
     * @return {?}
     */
    function (graph) {
        if (graph && graph.patient && graph.patient.dob) {
            /** @type {?} */
            var daysOld = Math.floor(Math.round((this.dateService.translateDate(moment.utc().valueOf(), graph.timeZone) - graph.patient.dob) / 86400000));
            /** @type {?} */
            var d = 'd';
            /** @type {?} */
            var w = 'w';
            /** @type {?} */
            var m = 'm';
            /** @type {?} */
            var y = 'y';
            if (daysOld < 7) {
                return Math.floor(daysOld) + d;
            }
            else if (daysOld >= 7 && daysOld < 31) {
                return Math.floor(daysOld / 7) + w + Math.floor(daysOld % 7) + d;
            }
            else if (daysOld >= 31 && daysOld < 365) {
                return Math.floor(daysOld / 29.7) + m + Math.floor((daysOld % 29.7) / 7) + w;
            }
            else if (daysOld >= 365 && daysOld < 730) {
                return Math.floor(daysOld / 365) + y + Math.floor((daysOld % 365) / 29.7) + m;
            }
            else {
                return Math.floor(daysOld / 365) + y;
            }
        }
        else {
            return ' ';
        }
    };
    PatientService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PatientService.ctorParameters = function () { return [
        { type: DateService }
    ]; };
    /** @nocollapse */ PatientService.ngInjectableDef = i0.defineInjectable({ factory: function PatientService_Factory() { return new PatientService(i0.inject(i1.DateService)); }, token: PatientService, providedIn: "root" });
    return PatientService;
}());
export { PatientService };
if (false) {
    /** @type {?} */
    PatientService.prototype.dateService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aWVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY29tbW9uLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9wYXRpZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUJBQWlCLENBQUM7Ozs7QUFJM0MsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDOztJQU9yQix3QkFBbUIsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7S0FDMUM7Ozs7OztJQUtNLHNDQUFhOzs7OztjQUFDLEtBQWdCO1FBQ25DLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7WUFDaEQsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDOztZQUV2SCxJQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7O1lBQ2QsSUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDOztZQUNkLElBQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQzs7WUFDZCxJQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7WUFFZCxFQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2hDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2xFO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDOUU7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLEdBQUcsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMvRTtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdEM7U0FDRjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNaOzs7Z0JBbENKLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBVE8sV0FBVzs7O3lCQUZuQjs7U0FZYSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UGVyYUdyYXBofSBmcm9tICcuLi9tb2RlbC9QZXJhR3JhcGgnO1xuaW1wb3J0IHtEYXRlU2VydmljZX0gZnJvbSAnLi9kYXRlLnNlcnZpY2UnO1xuaW1wb3J0ICogYXMgbW9tZW50XyBmcm9tICdtb21lbnQtdGltZXpvbmUnO1xuXG4vLyBUaGUgSmF2YVNjcmlwdCBjb21waWxlciBnaXZlcyBhIHdlaXJkIFwibW9tZW50IGNhbm5vdCBiZSB1c2VkIGFzIGEgbmFtZXNwYWNlXCIgdHlwZSBvZiBlcnJvclxuLy8gVGhpcyBpcyB0aGUgd29ya2Fyb3VuZC4uLlxuY29uc3QgbW9tZW50ID0gbW9tZW50XztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUGF0aWVudFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBkYXRlU2VydmljZTogRGF0ZVNlcnZpY2UpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwYXRpZW50IGFnZSBpbiB5ZWFycywgbW9udGhzIHVzaW5nIHRoZSBwYXRpZW50IERPQlxuICAgKi9cbiAgcHVibGljIGdldFBhdGllbnRBZ2UoZ3JhcGg6IFBlcmFHcmFwaCk6IHN0cmluZyB7XG4gICAgaWYgKGdyYXBoICYmIGdyYXBoLnBhdGllbnQgJiYgZ3JhcGgucGF0aWVudC5kb2IpIHtcbiAgICAgIGNvbnN0IGRheXNPbGQgPSBNYXRoLmZsb29yKFxuICAgICAgICBNYXRoLnJvdW5kKCh0aGlzLmRhdGVTZXJ2aWNlLnRyYW5zbGF0ZURhdGUobW9tZW50LnV0YygpLnZhbHVlT2YoKSwgZ3JhcGgudGltZVpvbmUpIC0gZ3JhcGgucGF0aWVudC5kb2IpIC8gODY0MDAwMDApKTtcblxuICAgICAgY29uc3QgZCA9ICdkJztcbiAgICAgIGNvbnN0IHcgPSAndyc7XG4gICAgICBjb25zdCBtID0gJ20nO1xuICAgICAgY29uc3QgeSA9ICd5JztcblxuICAgICAgaWYgKGRheXNPbGQgPCA3KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKGRheXNPbGQpICsgZDtcbiAgICAgIH0gZWxzZSBpZiAoZGF5c09sZCA+PSA3ICYmIGRheXNPbGQgPCAzMSkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkYXlzT2xkIC8gNykgKyB3ICsgTWF0aC5mbG9vcihkYXlzT2xkICUgNykgKyBkO1xuICAgICAgfSBlbHNlIGlmIChkYXlzT2xkID49IDMxICYmIGRheXNPbGQgPCAzNjUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZGF5c09sZCAvIDI5LjcpICsgbSArIE1hdGguZmxvb3IoKGRheXNPbGQgJSAyOS43KSAvIDcpICsgdztcbiAgICAgIH0gZWxzZSBpZiAoZGF5c09sZCA+PSAzNjUgJiYgZGF5c09sZCA8IDczMCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkYXlzT2xkIC8gMzY1KSArIHkgKyBNYXRoLmZsb29yKChkYXlzT2xkICUgMzY1KSAvIDI5LjcpICsgbTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKGRheXNPbGQgLyAzNjUpICsgeTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcgJztcbiAgICB9XG4gIH1cblxuXG59XG4iXX0=