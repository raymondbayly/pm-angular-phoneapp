/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DiagnosisConfigService } from '../config/diagnosis-config.service';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, timer } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../config/diagnosis-config.service";
var DiagnosisApiService = /** @class */ (function () {
    function DiagnosisApiService(http, diagnosisConfigService) {
        this.http = http;
        this.diagnosisConfigService = diagnosisConfigService;
        this.pollInstance$ = timer(0, 60000);
        this.diagnosesSubject = new BehaviorSubject(null);
    }
    /**
     * @return {?}
     */
    DiagnosisApiService.prototype.getDiagnosesSubject = /**
     * @return {?}
     */
    function () {
        return this.diagnosesSubject;
    };
    /**
     * @return {?}
     */
    DiagnosisApiService.prototype.getDiagnosesSubjectValue = /**
     * @return {?}
     */
    function () {
        return this.diagnosesSubject.value;
    };
    /**
     * @return {?}
     */
    DiagnosisApiService.prototype.getAllDiagnoses = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.diagnosisConfigService.getPrimaryDiagnosesEndpoint(), { observe: 'response' });
    };
    /**
     * @return {?}
     */
    DiagnosisApiService.prototype.getPrimaryDiagnosesInterval = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Make an HTTP call on an interval
        return this.pollInstance$.pipe(switchMap(function () { return _this.getAllDiagnoses(); }));
    };
    DiagnosisApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DiagnosisApiService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: DiagnosisConfigService }
    ]; };
    /** @nocollapse */ DiagnosisApiService.ngInjectableDef = i0.defineInjectable({ factory: function DiagnosisApiService_Factory() { return new DiagnosisApiService(i0.inject(i1.HttpClient), i0.inject(i2.DiagnosisConfigService)); }, token: DiagnosisApiService, providedIn: "root" });
    return DiagnosisApiService;
}());
export { DiagnosisApiService };
if (false) {
    /** @type {?} */
    DiagnosisApiService.prototype.pollInstance$;
    /** @type {?} */
    DiagnosisApiService.prototype.diagnosesSubject;
    /** @type {?} */
    DiagnosisApiService.prototype.http;
    /** @type {?} */
    DiagnosisApiService.prototype.diagnosisConfigService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ25vc2lzLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY29tbW9uLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9kaWFnbm9zaXMvYXBpL2RpYWdub3Npcy1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUMxRSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFDLGVBQWUsRUFBYyxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDeEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7OztJQVl2Qyw2QkFBb0IsSUFBZ0IsRUFBVSxzQkFBOEM7UUFBeEUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDMUYsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGVBQWUsQ0FBc0IsSUFBSSxDQUFDLENBQUM7S0FDeEU7Ozs7SUFFTSxpREFBbUI7Ozs7UUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQzs7Ozs7SUFHeEIsc0RBQXdCOzs7O1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDOzs7OztJQUc5Qiw2Q0FBZTs7OztRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLDJCQUEyQixFQUFFLEVBQUUsRUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQzs7Ozs7SUFHbEcseURBQTJCOzs7Ozs7UUFFaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM1QixTQUFTLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxlQUFlLEVBQUUsRUFBdEIsQ0FBc0IsQ0FBQyxDQUN4QyxDQUFDOzs7Z0JBL0JMLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBTk8sVUFBVTtnQkFEVixzQkFBc0I7Ozs4QkFEOUI7O1NBU2EsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGlhZ25vc2lzQ29uZmlnU2VydmljZX0gZnJvbSAnLi4vY29uZmlnL2RpYWdub3Npcy1jb25maWcuc2VydmljZSc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCB0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3N3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBEaWFnbm9zaXNBcGlTZXJ2aWNlIHtcblxuICAvLyBUaGUgdGltZXIgdGhhdCBmaXJlcyBzbyB0aGF0IGNsaWVudHMgY2FuIGdldCB0aGUgbGF0ZXN0IGRpYWdub3Nlc1xuICBwcml2YXRlIHBvbGxJbnN0YW5jZSQ6IE9ic2VydmFibGU8YW55PjtcbiAgLy8gTWFwIG9mIHByaW1hcnkgZGlhZ25vc2lzIGtleWVkIGJ5IHZpc2l0IElEXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlhZ25vc2VzU3ViamVjdDogQmVoYXZpb3JTdWJqZWN0PE1hcDxudW1iZXIsIHN0cmluZz4+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBkaWFnbm9zaXNDb25maWdTZXJ2aWNlOiBEaWFnbm9zaXNDb25maWdTZXJ2aWNlKSB7XG4gICAgdGhpcy5wb2xsSW5zdGFuY2UkID0gdGltZXIoMCwgNjAwMDApO1xuICAgIHRoaXMuZGlhZ25vc2VzU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8TWFwPG51bWJlciwgc3RyaW5nPj4obnVsbCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RGlhZ25vc2VzU3ViamVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy5kaWFnbm9zZXNTdWJqZWN0O1xuICB9XG5cbiAgcHVibGljIGdldERpYWdub3Nlc1N1YmplY3RWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kaWFnbm9zZXNTdWJqZWN0LnZhbHVlO1xuICB9XG5cbiAgcHVibGljIGdldEFsbERpYWdub3NlcygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMuZGlhZ25vc2lzQ29uZmlnU2VydmljZS5nZXRQcmltYXJ5RGlhZ25vc2VzRW5kcG9pbnQoKSwge29ic2VydmU6ICdyZXNwb25zZSd9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRQcmltYXJ5RGlhZ25vc2VzSW50ZXJ2YWwoKSB7XG4gICAgLy8gTWFrZSBhbiBIVFRQIGNhbGwgb24gYW4gaW50ZXJ2YWxcbiAgICByZXR1cm4gdGhpcy5wb2xsSW5zdGFuY2UkLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5nZXRBbGxEaWFnbm9zZXMoKSlcbiAgICApO1xuICB9XG59XG4iXX0=