/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { User } from '../../../model/User';
import { TokenConfigService } from '../config/token-config.service';
import { Storage } from '@ionic/storage';
import { first } from 'rxjs/operators';
import { JwtHelperService } from '@auth0/angular-jwt';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@auth0/angular-jwt/src/jwthelper.service";
import * as i3 from "../config/token-config.service";
import * as i4 from "@ionic/storage";
var TokenApiService = /** @class */ (function () {
    function TokenApiService(http, jwtHelper, config, storage) {
        this.http = http;
        this.jwtHelper = jwtHelper;
        this.config = config;
        this.storage = storage;
        this.jwtTokenName = 'jwt_token';
        this.appId = null;
        this.deviceToken = null;
        this.token$ = new Subject();
    }
    /**
     * Check the current token.
     * @return {?}
     */
    TokenApiService.prototype.checkToken = /**
     * Check the current token.
     * @return {?}
     */
    function () {
        var _this = this;
        this.token$.pipe(first()).subscribe(function (token) {
            /** @type {?} */
            var decodedToken = _this.jwtHelper.decodeToken(token);
            if (decodedToken) {
                /** @type {?} */
                var user_1 = new User();
                user_1.username = decodedToken['sub'];
                user_1.roles = decodedToken['roles'];
                user_1.firstname = decodedToken['firstname'];
                user_1.lastname = decodedToken['lastname'];
                user_1.appid = decodedToken['appid'];
                // console.log('Existing, valid client side token found. Checking the server.');
                // console.log('Existing, valid client side token found. Checking the server.');
                _this.http.post(_this.config.getCheckTokenEndPoint(), user_1).pipe(first()).subscribe(function () {
                    // If we land in here, then the token interceptor on the server validated the token
                    // If we land in here, then the token interceptor on the server validated the token
                    _this.appId = user_1.appid;
                    // console.log('Valid token!');
                    // console.log('Valid token!');
                    _this.token$.next(token);
                }, function (e) {
                    _this.appId = null;
                    // console.log('Invalid token!');
                    // console.log('Invalid token!');
                    _this.token$.next(null);
                });
            }
            else {
                // console.log('Removing invalid token from storage.');
                // console.log('Removing invalid token from storage.');
                _this.clearToken();
                _this.token$.next(null);
            }
        });
        this.getExistingToken();
    };
    /**
     * Refresh the token for the given user.
     *
     * @param {?} user User for which to refresh token.
     * @return {?}
     */
    TokenApiService.prototype.refreshToken = /**
     * Refresh the token for the given user.
     *
     * @param {?} user User for which to refresh token.
     * @return {?}
     */
    function (user) {
        var _this = this;
        if (!user || !user.username) {
            // console.log('Valid user not supplied, cannot refresh token!');
        }
        else {
            setTimeout(function () {
                _this.token$.pipe(first()).subscribe(function (token) {
                    // Check whether or not the token is valid according to the server
                    // Check whether or not the token is valid according to the server
                    _this.http.post(_this.config.getRefreshTokenEndPoint(), user, { responseType: 'text' }).pipe(first()).subscribe(function (token) {
                        // console.log('Successfully retrieved updated token [' + token + ']');
                        // console.log('Successfully retrieved updated token [' + token + ']');
                        _this.storage.set(_this.jwtTokenName, token);
                    }, function () {
                        // The server thinks the token is not valid (expired, the secret key changed, etc)
                        // console.log('Invalid token!');
                        // The server thinks the token is not valid (expired, the secret key changed, etc)
                        // console.log('Invalid token!');
                        _this.clearToken();
                        _this.token$.next(null);
                    });
                });
                _this.getExistingToken();
            }, 100);
        }
    };
    /**
     * @param {?} user
     * @return {?}
     */
    TokenApiService.prototype.getToken = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        var _this = this;
        // Check whether or not the token is valid according to the server
        this.http.post(this.config.getGetTokenEndPoint(), user, { responseType: 'text' }).pipe(first()).subscribe(function (token) {
            // console.log('Successfully retrieved new token: [' + token + ']');
            // console.log('Successfully retrieved new token: [' + token + ']');
            _this.appId = user.appid;
            _this.storage.set(_this.jwtTokenName, token)
                .then(function () {
                // console.log('New token added to storage. [' + token + ']')
                // console.log('New token added to storage. [' + token + ']')
                _this.token$.next(token);
            }, function () {
                // console.log('Could not store new token!');
                // console.log('Could not store new token!');
                _this.token$.next(null);
            });
        }, function (e) {
            // The server thinks the token is not valid (expired, the secret key changed, etc)
            // console.log('Could not retrieve new token!');
            // The server thinks the token is not valid (expired, the secret key changed, etc)
            // console.log('Could not retrieve new token!');
            _this.token$.next(null);
        });
    };
    /**
     * @return {?}
     */
    TokenApiService.prototype.clearToken = /**
     * @return {?}
     */
    function () {
        this.storage.remove(this.jwtTokenName)
            .then(function (jwt) {
            // console.log('JWT removed from storage');
        }, function (reason) {
            // console.log('JWT could not be removed from storage. Reason = ' + reason);
        });
    };
    /**
     * @return {?}
     */
    TokenApiService.prototype.getExistingToken = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.storage.get(this.jwtTokenName)
            .then(function (token) {
            _this.token$.next(token);
        }, function (error) {
            _this.token$.next(null);
        })
            .catch(function (error) {
            _this.token$.next(null);
        });
    };
    /**
     * @return {?}
     */
    TokenApiService.prototype.getAppId = /**
     * @return {?}
     */
    function () {
        return this.appId;
    };
    TokenApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TokenApiService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: JwtHelperService },
        { type: TokenConfigService },
        { type: Storage }
    ]; };
    /** @nocollapse */ TokenApiService.ngInjectableDef = i0.defineInjectable({ factory: function TokenApiService_Factory() { return new TokenApiService(i0.inject(i1.HttpClient), i0.inject(i2.JwtHelperService), i0.inject(i3.TokenConfigService), i0.inject(i4.Storage)); }, token: TokenApiService, providedIn: "root" });
    return TokenApiService;
}());
export { TokenApiService };
if (false) {
    /** @type {?} */
    TokenApiService.prototype.jwtTokenName;
    /** @type {?} */
    TokenApiService.prototype.appId;
    /** @type {?} */
    TokenApiService.prototype.deviceToken;
    /** @type {?} */
    TokenApiService.prototype.token$;
    /** @type {?} */
    TokenApiService.prototype.http;
    /** @type {?} */
    TokenApiService.prototype.jwtHelper;
    /** @type {?} */
    TokenApiService.prototype.config;
    /** @type {?} */
    TokenApiService.prototype.storage;
}

//# sourceMappingURL=data:application/json;base64,