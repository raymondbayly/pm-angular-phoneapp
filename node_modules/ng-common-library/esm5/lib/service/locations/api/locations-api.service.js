/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { LocationsConfigService } from '../config/locations-config.service';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { Locations } from '../../../model/Locations';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../config/locations-config.service";
var LocationsApiService = /** @class */ (function () {
    function LocationsApiService(http, locationsConfigService) {
        this.http = http;
        this.locationsConfigService = locationsConfigService;
        this.locations = new Locations();
        this.facilitiesAndUnit$ = new Subject();
    }
    /**
     * Updates facilities and units and calls the facilitiesAndUnitSubject when it completes.
     * Will use a cache if they were previously retrieved.
     * @return {?}
     */
    LocationsApiService.prototype.getFacilitiesAndUnits = /**
     * Updates facilities and units and calls the facilitiesAndUnitSubject when it completes.
     * Will use a cache if they were previously retrieved.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.locations.facilities && this.locations.facilities.length > 0 && this.locations.units && this.locations.units.length > 0) {
            this.facilitiesAndUnit$.next(this.locations);
        }
        else {
            /** Receive all facilities and active units and set instance variables for caching */
            this.facilitySubscription = this.getActiveFacilities().pipe(map(function (f) { return f.facilities; })).subscribe(function (facilities) {
                if (facilities && facilities.length > 0) {
                    /** @type {?} */
                    var facilityIds = [];
                    try {
                        for (var facilities_1 = tslib_1.__values(facilities), facilities_1_1 = facilities_1.next(); !facilities_1_1.done; facilities_1_1 = facilities_1.next()) {
                            var facility = facilities_1_1.value;
                            facilityIds.push(facility.facilityID);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (facilities_1_1 && !facilities_1_1.done && (_a = facilities_1.return)) _a.call(facilities_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    _this.unitSubscription = _this.getActiveUnitsForFacilities(facilityIds).pipe((map(function (u) { return u.units; }))).subscribe(function (units) {
                        // filter out facilities with no active units
                        // filter out facilities with no active units
                        _this.locations = new Locations();
                        try {
                            for (var facilities_2 = tslib_1.__values(facilities), facilities_2_1 = facilities_2.next(); !facilities_2_1.done; facilities_2_1 = facilities_2.next()) {
                                var f = facilities_2_1.value;
                                /** @type {?} */
                                var hasActiveUnits = false;
                                try {
                                    for (var units_1 = tslib_1.__values(units), units_1_1 = units_1.next(); !units_1_1.done; units_1_1 = units_1.next()) {
                                        var u = units_1_1.value;
                                        if (u.key.facilityID === f.facilityID) {
                                            hasActiveUnits = true;
                                            break;
                                        }
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (units_1_1 && !units_1_1.done && (_a = units_1.return)) _a.call(units_1);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                                if (hasActiveUnits) {
                                    _this.locations.facilities.push(f);
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (facilities_2_1 && !facilities_2_1.done && (_b = facilities_2.return)) _b.call(facilities_2);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        _this.locations.units = units;
                        _this.facilitiesAndUnit$.next(_this.locations);
                        var e_3, _b, e_2, _a;
                    }, function (e) {
                        console.log('Could not update units! Error = ' + e.message);
                    });
                }
                var e_1, _a;
            }, function (e) {
                console.log('Could not update facilities! Error = ' + e.message);
            });
        }
    };
    /**
     * @return {?}
     */
    LocationsApiService.prototype.getActiveFacilities = /**
     * @return {?}
     */
    function () {
        console.log('Getting all facilities: ' + this.locationsConfigService.getActiveFacilitiesEndpoint());
        return this.http.get(this.locationsConfigService.getActiveFacilitiesEndpoint());
    };
    /**
     * @param {?} facilities
     * @return {?}
     */
    LocationsApiService.prototype.getActiveUnitsForFacilities = /**
     * @param {?} facilities
     * @return {?}
     */
    function (facilities) {
        console.log('Getting all active units: ' + this.locationsConfigService.getActiveUnitsEndpoint() + facilities);
        return this.http.get(this.locationsConfigService.getActiveUnitsEndpoint() + facilities);
    };
    /**
     * @return {?}
     */
    LocationsApiService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.facilitySubscription && !this.facilitySubscription.closed) {
            this.facilitySubscription.unsubscribe();
        }
        if (this.unitSubscription && !this.unitSubscription.closed) {
            this.unitSubscription.unsubscribe();
        }
    };
    LocationsApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LocationsApiService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: LocationsConfigService }
    ]; };
    /** @nocollapse */ LocationsApiService.ngInjectableDef = i0.defineInjectable({ factory: function LocationsApiService_Factory() { return new LocationsApiService(i0.inject(i1.HttpClient), i0.inject(i2.LocationsConfigService)); }, token: LocationsApiService, providedIn: "root" });
    return LocationsApiService;
}());
export { LocationsApiService };
if (false) {
    /** @type {?} */
    LocationsApiService.prototype.facilitySubscription;
    /** @type {?} */
    LocationsApiService.prototype.unitSubscription;
    /** @type {?} */
    LocationsApiService.prototype.facilitiesAndUnit$;
    /** @type {?} */
    LocationsApiService.prototype.locations;
    /** @type {?} */
    LocationsApiService.prototype.http;
    /** @type {?} */
    LocationsApiService.prototype.locationsConfigService;
}

//# sourceMappingURL=data:application/json;base64,