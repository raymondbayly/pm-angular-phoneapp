/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, timer } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { PeragraphConfigService } from '../config/peragraph-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../config/peragraph-config.service";
var PeragraphApiService = /** @class */ (function () {
    function PeragraphApiService(http, peragraphConfigService) {
        this.http = http;
        this.peragraphConfigService = peragraphConfigService;
        this.pollInstance$ = timer(0, 60000);
        this._peraGraphSubject = new BehaviorSubject([]);
    }
    /**
     * @return {?}
     */
    PeragraphApiService.prototype.getPeraGraphSubject = /**
     * @return {?}
     */
    function () {
        return this._peraGraphSubject;
    };
    /**
     * @return {?}
     */
    PeragraphApiService.prototype.getSinglePeragraph = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.peragraphConfigService.getSinglePeraGraphEndPoint());
    };
    /**
     * @return {?}
     */
    PeragraphApiService.prototype.getAllPeragraphs = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.peragraphConfigService.getAllPeraGraphsEndPoint());
    };
    /**
     * @return {?}
     */
    PeragraphApiService.prototype.getPeraGraphInterval = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Make an HTTP call on an interval
        return this.pollInstance$.pipe(switchMap(function () { return _this.getAllPeragraphs(); }));
        /*
                 TODO Have a different method with the filtering criteria, using the same subject,
                 and call it when the filter changes. Then we push the change.
        
                 Do the same thing with sorting.
                 */
    };
    PeragraphApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PeragraphApiService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: PeragraphConfigService }
    ]; };
    /** @nocollapse */ PeragraphApiService.ngInjectableDef = i0.defineInjectable({ factory: function PeragraphApiService_Factory() { return new PeragraphApiService(i0.inject(i1.HttpClient), i0.inject(i2.PeragraphConfigService)); }, token: PeragraphApiService, providedIn: "root" });
    return PeragraphApiService;
}());
export { PeragraphApiService };
if (false) {
    /** @type {?} */
    PeragraphApiService.prototype._peraGraphSubject;
    /** @type {?} */
    PeragraphApiService.prototype.pollInstance$;
    /** @type {?} */
    PeragraphApiService.prototype.http;
    /** @type {?} */
    PeragraphApiService.prototype.peragraphConfigService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyYWdyYXBoLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY29tbW9uLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9wZXJhZ3JhcGgvYXBpL3BlcmFncmFwaC1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFDLGVBQWUsRUFBYyxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFeEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLG9DQUFvQyxDQUFDOzs7OztJQVV0RSw2QkFBb0IsSUFBZ0IsRUFDaEI7UUFEQSxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLDJCQUFzQixHQUF0QixzQkFBc0I7UUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLGVBQWUsQ0FBbUIsRUFBRSxDQUFDLENBQUM7S0FDdEU7Ozs7SUFFTSxpREFBbUI7Ozs7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQzs7Ozs7SUFHM0IsZ0RBQWtCOzs7O1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBWSxJQUFJLENBQUMsc0JBQXNCLENBQUMsMEJBQTBCLEVBQUUsQ0FBQyxDQUFDOzs7OztJQUd2Riw4Q0FBZ0I7Ozs7UUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLENBQUM7Ozs7O0lBRzFFLGtEQUFvQjs7Ozs7O1FBRXZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDMUIsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7OztnQkE3QnJELFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBUk8sVUFBVTtnQkFJVixzQkFBc0I7Ozs4QkFMOUI7O1NBVWEsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7UGVyYUdyYXBofSBmcm9tICcuLi8uLi8uLi9tb2RlbC9QZXJhR3JhcGgnO1xuaW1wb3J0IHtzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7UGVyYWdyYXBoQ29uZmlnU2VydmljZX0gZnJvbSAnLi4vY29uZmlnL3BlcmFncmFwaC1jb25maWcuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUGVyYWdyYXBoQXBpU2VydmljZSB7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9wZXJhR3JhcGhTdWJqZWN0OiBCZWhhdmlvclN1YmplY3Q8QXJyYXk8UGVyYUdyYXBoPj47XG4gICAgcHJpdmF0ZSBwb2xsSW5zdGFuY2UkOiBPYnNlcnZhYmxlPGFueT47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBwZXJhZ3JhcGhDb25maWdTZXJ2aWNlOiBQZXJhZ3JhcGhDb25maWdTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMucG9sbEluc3RhbmNlJCA9IHRpbWVyKDAsIDYwMDAwKTtcbiAgICAgICAgdGhpcy5fcGVyYUdyYXBoU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8QXJyYXk8UGVyYUdyYXBoPj4oW10pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQZXJhR3JhcGhTdWJqZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGVyYUdyYXBoU3ViamVjdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2luZ2xlUGVyYWdyYXBoKCk6IE9ic2VydmFibGU8UGVyYUdyYXBoPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBlcmFHcmFwaD4odGhpcy5wZXJhZ3JhcGhDb25maWdTZXJ2aWNlLmdldFNpbmdsZVBlcmFHcmFwaEVuZFBvaW50KCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBbGxQZXJhZ3JhcGhzKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMucGVyYWdyYXBoQ29uZmlnU2VydmljZS5nZXRBbGxQZXJhR3JhcGhzRW5kUG9pbnQoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFBlcmFHcmFwaEludGVydmFsKCkge1xuICAgICAgICAvLyBNYWtlIGFuIEhUVFAgY2FsbCBvbiBhbiBpbnRlcnZhbFxuICAgICAgICByZXR1cm4gdGhpcy5wb2xsSW5zdGFuY2UkLnBpcGUoXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5nZXRBbGxQZXJhZ3JhcGhzKCkpKTtcblxuICAgICAgICAvKlxuICAgICAgICAgVE9ETyBIYXZlIGEgZGlmZmVyZW50IG1ldGhvZCB3aXRoIHRoZSBmaWx0ZXJpbmcgY3JpdGVyaWEsIHVzaW5nIHRoZSBzYW1lIHN1YmplY3QsXG4gICAgICAgICBhbmQgY2FsbCBpdCB3aGVuIHRoZSBmaWx0ZXIgY2hhbmdlcy4gVGhlbiB3ZSBwdXNoIHRoZSBjaGFuZ2UuXG5cbiAgICAgICAgIERvIHRoZSBzYW1lIHRoaW5nIHdpdGggc29ydGluZy5cbiAgICAgICAgICovXG4gICAgfVxuXG59XG4iXX0=