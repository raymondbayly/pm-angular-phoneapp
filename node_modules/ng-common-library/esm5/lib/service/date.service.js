/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as moment_ from 'moment-timezone';
import * as i0 from "@angular/core";
/** @type {?} */
var moment = moment_;
var DateService = /** @class */ (function () {
    function DateService() {
    }
    /**
     * Formats the date to be displayed based on the parameters provided
     * @param {?} timeZone Each PeraGraph has one. Just pass it as a parameter.
     * @param {?} dateMil The date/time in milliseconds
     * @param {?} formatString A string param that defines the format in which the date needs to be displayed. e.g : MM/DD/YY HH:mm z
     * @return {?}
     */
    DateService.prototype.getDateFormat = /**
     * Formats the date to be displayed based on the parameters provided
     * @param {?} timeZone Each PeraGraph has one. Just pass it as a parameter.
     * @param {?} dateMil The date/time in milliseconds
     * @param {?} formatString A string param that defines the format in which the date needs to be displayed. e.g : MM/DD/YY HH:mm z
     * @return {?}
     */
    function (timeZone, dateMil, formatString) {
        return moment(dateMil).utc().tz(timeZone).format(formatString);
    };
    /**
     * Translate a date from a UTC offset.
     *
     * @param {?} date The date to translate.
     * @param {?} timezone The timezone that the date was originally created in.
     * @return {?}
     */
    DateService.prototype.translateDate = /**
     * Translate a date from a UTC offset.
     *
     * @param {?} date The date to translate.
     * @param {?} timezone The timezone that the date was originally created in.
     * @return {?}
     */
    function (date, timezone) {
        return date + ((3600000 / 60) * moment(date).tz(timezone).utcOffset());
    };
    DateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ DateService.ngInjectableDef = i0.defineInjectable({ factory: function DateService_Factory() { return new DateService(); }, token: DateService, providedIn: "root" });
    return DateService;
}());
export { DateService };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY29tbW9uLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9kYXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxLQUFLLE9BQU8sTUFBTSxpQkFBaUIsQ0FBQzs7O0FBSTNDLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQzs7Ozs7Ozs7Ozs7SUFZZCxtQ0FBYTs7Ozs7OztjQUFDLFFBQWdCLEVBQUUsT0FBZSxFQUFFLFlBQW9CO1FBQzFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQzs7Ozs7Ozs7O0lBUzFELG1DQUFhOzs7Ozs7O2NBQUMsSUFBWSxFQUFFLFFBQWdCO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7OztnQkFyQjFFLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OztzQkFURDs7U0FVYSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIG1vbWVudF8gZnJvbSAnbW9tZW50LXRpbWV6b25lJztcblxuLy8gVGhlIEphdmFTY3JpcHQgY29tcGlsZXIgZ2l2ZXMgYSB3ZWlyZCBcIm1vbWVudCBjYW5ub3QgYmUgdXNlZCBhcyBhIG5hbWVzcGFjZVwiIHR5cGUgb2YgZXJyb3Jcbi8vIFRoaXMgaXMgdGhlIHdvcmthcm91bmQuLi5cbmNvbnN0IG1vbWVudCA9IG1vbWVudF87XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERhdGVTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIEZvcm1hdHMgdGhlIGRhdGUgdG8gYmUgZGlzcGxheWVkIGJhc2VkIG9uIHRoZSBwYXJhbWV0ZXJzIHByb3ZpZGVkXG4gICAqIEBwYXJhbSBkYXRlTWlsIFRoZSBkYXRlL3RpbWUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB0aW1lWm9uZSBFYWNoIFBlcmFHcmFwaCBoYXMgb25lLiBKdXN0IHBhc3MgaXQgYXMgYSBwYXJhbWV0ZXIuXG4gICAqIEBwYXJhbSBmb3JtYXRTdHJpbmcgQSBzdHJpbmcgcGFyYW0gdGhhdCBkZWZpbmVzIHRoZSBmb3JtYXQgaW4gd2hpY2ggdGhlIGRhdGUgbmVlZHMgdG8gYmUgZGlzcGxheWVkLiBlLmcgOiBNTS9ERC9ZWSBISDptbSB6XG4gICAqL1xuICBwdWJsaWMgZ2V0RGF0ZUZvcm1hdCh0aW1lWm9uZTogc3RyaW5nLCBkYXRlTWlsOiBudW1iZXIsIGZvcm1hdFN0cmluZzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG1vbWVudChkYXRlTWlsKS51dGMoKS50eih0aW1lWm9uZSkuZm9ybWF0KGZvcm1hdFN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNsYXRlIGEgZGF0ZSBmcm9tIGEgVVRDIG9mZnNldC5cbiAgICpcbiAgICogQHBhcmFtIGRhdGUgVGhlIGRhdGUgdG8gdHJhbnNsYXRlLlxuICAgKiBAcGFyYW0gdGltZXpvbmUgVGhlIHRpbWV6b25lIHRoYXQgdGhlIGRhdGUgd2FzIG9yaWdpbmFsbHkgY3JlYXRlZCBpbi5cbiAgICovXG4gIHB1YmxpYyB0cmFuc2xhdGVEYXRlKGRhdGU6IG51bWJlciwgdGltZXpvbmU6IHN0cmluZykge1xuICAgIHJldHVybiBkYXRlICsgKCgzNjAwMDAwIC8gNjApICogbW9tZW50KGRhdGUpLnR6KHRpbWV6b25lKS51dGNPZmZzZXQoKSk7XG4gIH1cbn1cbiJdfQ==