/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { TranslationsConfigService } from '../config/translations-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../config/translations-config.service";
var TranslationsApiService = /** @class */ (function () {
    function TranslationsApiService(http, translationsConfigService) {
        this.http = http;
        this.translationsConfigService = translationsConfigService;
    }
    /**
     * @return {?}
     */
    TranslationsApiService.prototype.getAllTranslations = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.translationsConfigService.getTranslationsEndpoint());
    };
    TranslationsApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TranslationsApiService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: TranslationsConfigService }
    ]; };
    /** @nocollapse */ TranslationsApiService.ngInjectableDef = i0.defineInjectable({ factory: function TranslationsApiService_Factory() { return new TranslationsApiService(i0.inject(i1.HttpClient), i0.inject(i2.TranslationsConfigService)); }, token: TranslationsApiService, providedIn: "root" });
    return TranslationsApiService;
}());
export { TranslationsApiService };
if (false) {
    /** @type {?} */
    TranslationsApiService.prototype.http;
    /** @type {?} */
    TranslationsApiService.prototype.translationsConfigService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRpb25zLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY29tbW9uLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS90cmFuc2xhdGlvbnMvYXBpL3RyYW5zbGF0aW9ucy1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sdUNBQXVDLENBQUM7Ozs7O0lBTzVFLGdDQUFvQixJQUFnQixFQUNoQjtRQURBLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsOEJBQXlCLEdBQXpCLHlCQUF5QjtLQUM1Qzs7OztJQUVELG1EQUFrQjs7O0lBQWxCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFNLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLENBQUM7S0FDdkY7O2dCQVhKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBTE8sVUFBVTtnQkFDVix5QkFBeUI7OztpQ0FIakM7O1NBUWEsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7VHJhbnNsYXRpb25zQ29uZmlnU2VydmljZX0gZnJvbSAnLi4vY29uZmlnL3RyYW5zbGF0aW9ucy1jb25maWcuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRpb25zQXBpU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGlvbnNDb25maWdTZXJ2aWNlOiBUcmFuc2xhdGlvbnNDb25maWdTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgZ2V0QWxsVHJhbnNsYXRpb25zKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PGFueT4odGhpcy50cmFuc2xhdGlvbnNDb25maWdTZXJ2aWNlLmdldFRyYW5zbGF0aW9uc0VuZHBvaW50KCkpO1xuICAgIH1cblxufVxuIl19