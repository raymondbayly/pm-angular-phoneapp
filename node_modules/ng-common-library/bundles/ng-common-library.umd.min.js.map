{"version":3,"sources":["ng://ng-common-library/lib/service/browser.service.ts","ng://ng-common-library/lib/model/MarkerColors.ts","ng://ng-common-library/lib/service/date.service.ts","ng://ng-common-library/lib/service/chart.service.ts","ng://ng-common-library/lib/service/warning.service.ts","ng://ng-common-library/lib/service/flowsheets/config/flowsheets-config.service.ts","ng://ng-common-library/lib/service/flowsheets/api/flowsheets-api.service.ts","ng://ng-common-library/lib/service/peragraph/config/peragraph-config.service.ts","ng://ng-common-library/lib/service/peragraph/api/peragraph-api.service.ts","ng://ng-common-library/lib/service/patient.service.ts","ng://ng-common-library/lib/service/common.service.ts","ng://ng-common-library/lib/service/translations/translations.service.ts","ng://ng-common-library/lib/service/translations/config/translations-config.service.ts","ng://ng-common-library/lib/service/translations/api/translations-api.service.ts","ng://ng-common-library/lib/service/diagnosis/config/diagnosis-config.service.ts","ng://ng-common-library/lib/service/diagnosis/api/diagnosis-api.service.ts","ng://ng-common-library/lib/service/token/config/token-config.service.ts","ng://ng-common-library/lib/model/User.ts","ng://ng-common-library/lib/service/token/api/token-api.service.ts","node_modules/tslib/tslib.es6.js","ng://ng-common-library/lib/service/locations/config/locations-config.service.ts","ng://ng-common-library/lib/model/Locations.ts","ng://ng-common-library/lib/service/locations/api/locations-api.service.ts","ng://ng-common-library/lib/service/usage/config/usage-config.service.ts","ng://ng-common-library/lib/model/PatientAccess.ts","ng://ng-common-library/lib/model/UsageType.ts","ng://ng-common-library/lib/service/usage/api/usage-api.service.ts","ng://ng-common-library/lib/model/Facility.ts","ng://ng-common-library/lib/model/Unit.ts","ng://ng-common-library/lib/model/UnitKey.ts"],"names":["BrowserService","prototype","resize","navigator","userAgent","indexOf","appVersion","evt","document","createEvent","initUIEvent","window","dispatchEvent","Event","Injectable","args","providedIn","moment","moment_","DateService","getDateFormat","timeZone","dateMil","formatString","utc","tz","format","translateDate","date","timezone","utcOffset","ChartService","dateService","this","createZeroAxisLine","minRiScore","color","width","value","zIndex","updateAlertPlotLine","graph","plotLines","activeWarning","push","createdDate","getMinYAxisTick","Math","floor","getMarkerColor","unitType","markerColor","MarkerColors","WarningService","getWarningClass","warning","warningClass","FlowsheetsConfigService","setSinglePeraGraphFlowSheetEndPoint","singlePeraGraphFlowSheetEndPoint","getSinglePeraGraphFlowSheetEndPoint","console","warn","setAllPeragraphFlowSheetsEndPoint","allPeragraphFlowSheetsEndPoint","getAllPeragraphFlowSheetsEndPoint","setDetailedFlowSheetColumnEndpoint","detailedFlowSheetColumnEndpoint","getDetailedFlowSheetColumnEndpoint","setLatestRiScoresEndPoint","latestRiScoresEndPoint","getLatestRiScoresEndPoint","FlowsheetsApiService","http","flowsheetConfigService","pollInstance$","timer","flowSheetSubject","BehaviorSubject","riScoresSubject","getFlowSheetSubject","getFlowSheetSubjectValue","getRiScoresSubject","getRiScoresSubjectValue","getSinglePeraGraphFlowSheet","get","getDetailedFlowsheetColumn","getAllPeraGraphFlowSheets","observe","getAllRiScores","getFlowSheetInterval","pipe","switchMap","_this","getLatestRiScoresInterval","HttpClient","PeragraphConfigService","setSinglePeraGraphEndPoint","singlePeraGraphEndPoint","getSinglePeraGraphEndPoint","setAllPeraGraphsEndPoint","allPeraGraphsEndPoint","getAllPeraGraphsEndPoint","PeragraphApiService","peragraphConfigService","_peraGraphSubject","getPeraGraphSubject","getSinglePeragraph","getAllPeragraphs","getPeraGraphInterval","PatientService","getPatientAge","patient","dob","daysOld","round","valueOf","CommonService","primitiveToBoolean","TranslationsService","ACTIVE","DATA_UPDATED","ELAPSED","OVERRIDDEN","RESUMED","V","H","M","N","getTranslation","key","translations","getKeyTranslation","keyTranslations","TranslationsConfigService","setTranslationsEndPoint","translationsEndPoint","getTranslationsEndpoint","TranslationsApiService","translationsConfigService","getAllTranslations","DiagnosisConfigService","getPrimaryDiagnosesEndpoint","primaryDiagnosesEndpoint","setPrimaryDiagnosesEndpoint","DiagnosisApiService","diagnosisConfigService","diagnosesSubject","getDiagnosesSubject","getDiagnosesSubjectValue","getAllDiagnoses","getPrimaryDiagnosesInterval","TokenConfigService","setCheckTokenEndPoint","checkTokenEndPoint","getCheckTokenEndPoint","setRefreshTokenEndPoint","refreshTokenEndPoint","getRefreshTokenEndPoint","setGetTokenEndPoint","getTokenEndPoint","getGetTokenEndPoint","User","TokenApiService","jwtHelper","config","storage","Subject","checkToken","token$","first","subscribe","token","decodedToken","decodeToken","user_1","username","roles","firstname","lastname","appid","post","appId","next","e","clearToken","getExistingToken","refreshToken","user","setTimeout","responseType","set","jwtTokenName","getToken","then","remove","jwt","reason","error","catch","getAppId","JwtHelperService","Storage","__values","o","m","Symbol","iterator","i","call","length","done","LocationsConfigService","getActiveFacilitiesEndpoint","activeFacilitiesEndpoint","setActiveFacilitiesEndpoint","getActiveUnitsEndpoint","activeUnitsEndpoint","setActiveUnitsEndpoint","Locations","LocationsApiService","locationsConfigService","facilitiesAndUnit$","getFacilitiesAndUnits","locations","facilities","units","facilitySubscription","getActiveFacilities","map","f","facilityIds","facilities_1","tslib_1.__values","facilities_1_1","facility","facilityID","unitSubscription","getActiveUnitsForFacilities","u","facilities_2","facilities_2_1","hasActiveUnits","units_1","units_1_1","log","message","ngOnDestroy","closed","unsubscribe","UsageConfigService","setUsageDataEndPoint","usageDataEndPoint","getUsageDataEndPoint","getUsagePollingInterval","usagePollingInterval","setUsagePollingInterval","PatientAccess","viewedBy","vipIndicator","vnm","mrn","admitDate","dischargeDate","facilityId","unitId","provider","utcCode","usageCode","viewDate","Array","Graph","UsageApiService","usageConfigService","locationService","tokenApiService","graphUpdated$","usageDataAdded$","init","initialized","startUsageReportingService","usageData","submitUsageData","locationsLoaded","locationsLoaded$","usageDataCopy","slice","clearUsageCache","viewedVisits","addUsageData","graphToLog","usageType","updateFacilityAndUnitIdsForGraph","tap","UsageType","addUsageDataFromToken","startedLoadingLocations","cloneGraph","JSON","parse","stringify","of","assignUnitAndFacIdToPeraGraph","_a","_b","fac","displayName","_d","_e","unit","unitID","pa","lname","fname","medicalRecordNumber","attendingProvider","lastName","firstName","visitUnitType","Facility","active","displayOrder","facilityTimezone","fullName","primaryType","secondaryType","Unit","UnitKey","fid","uid"],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrowserService {\n\n  constructor() {\n  }\n\n  /**\n   * Triggers a browser resize event - needed for the Highchart to resize properly - takes into account the browser type too\n   */\n  public resize() {\n    if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0) {\n      const evt = document.createEvent('UIEvents');\n      evt.initUIEvent('resize', true, false, window, 0);\n      window.dispatchEvent(evt);\n    } else {\n      window.dispatchEvent(new Event('resize'));\n    }\n  }\n}\n","export enum MarkerColors {\n  Normal = 'black',\n  IntensiveCare = '#F23A27',\n  StepDown= 'blue'\n}\n","import {Injectable} from '@angular/core';\nimport * as moment_ from 'moment-timezone';\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DateService {\n  /**\n   * Formats the date to be displayed based on the parameters provided\n   * @param dateMil The date/time in milliseconds\n   * @param timeZone Each PeraGraph has one. Just pass it as a parameter.\n   * @param formatString A string param that defines the format in which the date needs to be displayed. e.g : MM/DD/YY HH:mm z\n   */\n  public getDateFormat(timeZone: string, dateMil: number, formatString: string) {\n    return moment(dateMil).utc().tz(timeZone).format(formatString);\n  }\n\n  /**\n   * Translate a date from a UTC offset.\n   *\n   * @param date The date to translate.\n   * @param timezone The timezone that the date was originally created in.\n   */\n  public translateDate(date: number, timezone: string) {\n    return date + ((3600000 / 60) * moment(date).tz(timezone).utcOffset());\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from '../model/PeraGraph';\nimport {MarkerColors} from '../model/MarkerColors';\nimport {DateService} from './date.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartService {\n\n  constructor(private dateService: DateService) {\n  }\n\n  /**\n   * Create the line across the 0 axis for when RI scores go below zero in a graph.\n   * @param minRiScore Minimum RI score.\n   */\n  public createZeroAxisLine(minRiScore: number) {\n    return [\n      {\n        color: '#000000',\n        width: minRiScore < 0 ? 1 : null,\n        value: minRiScore < 0 ? 0 : null,\n        zIndex: 3\n      }];\n  }\n\n  /**\n   * Create an alert plot line for a graph.\n   *\n   * @param alertCreatedDate The created date of the alert.\n   * @param timeZone The timezone that the alert was created in.\n   */\n  public updateAlertPlotLine(graph: PeraGraph) {\n    const plotLines = [];\n    if (graph && graph.activeWarning) {\n      plotLines.push({\n        color: '#CE2029',\n        value: this.dateService.translateDate(graph.activeWarning.createdDate, graph.timeZone),\n        width: 2,\n        zIndex: 3\n      });\n    }\n    return plotLines;\n  }\n\n  public getMinYAxisTick(minRiScore): number {\n    return (minRiScore > 0) ? 0 : 20 * Math.floor(minRiScore / 20);\n  }\n\n  /**\n   * Used in the graph to depict the unit type where a health score was recorded.\n   * @param unitType Type of unit to get the marker color for.\n   */\n  public getMarkerColor(unitType: string): string {\n    let markerColor = MarkerColors.Normal;\n    switch (unitType) {\n      case 'N':\n        markerColor = MarkerColors.IntensiveCare;\n        break;\n      case 'C':\n        markerColor = MarkerColors.IntensiveCare;\n        break;\n      case 'P':\n        markerColor = MarkerColors.StepDown;\n        break;\n    }\n    return markerColor;\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarningService {\n\n  constructor() {\n  }\n\n  /**\n   * Returns the correct warning color CSS class\n   *\n   * @param warning Warning category\n   */\n  public getWarningClass(warning: string): string {\n    let warningClass: string = null;\n    switch (warning) {\n      case 'V':\n        warningClass = 'vh-warning';\n        break;\n      case 'H':\n        warningClass = 'h-warning';\n        break;\n      case 'M':\n        warningClass = 'm-warning';\n        break;\n      default:\n        break;\n    }\n    return warningClass;\n  }\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FlowsheetsConfigService {\n\n    private singlePeraGraphFlowSheetEndPoint: string = null;\n    private allPeragraphFlowSheetsEndPoint: string = null;\n    private detailedFlowSheetColumnEndpoint: string = null;\n    private latestRiScoresEndPoint: string = null;\n\n    setSinglePeraGraphFlowSheetEndPoint(value: string): void {\n        this.singlePeraGraphFlowSheetEndPoint = value;\n    }\n\n    getSinglePeraGraphFlowSheetEndPoint(): string {\n        if (!this.singlePeraGraphFlowSheetEndPoint) {\n            console.warn('Single PeraGraph flowsheet endpoint is not set!');\n        }\n        return this.singlePeraGraphFlowSheetEndPoint;\n    }\n\n    setAllPeragraphFlowSheetsEndPoint(value: string): void {\n        this.allPeragraphFlowSheetsEndPoint = value;\n    }\n\n    getAllPeragraphFlowSheetsEndPoint(): string {\n        if (!this.allPeragraphFlowSheetsEndPoint) {\n            console.warn('All PeraGraph flowsheets endpoint is not set!');\n        }\n        return this.allPeragraphFlowSheetsEndPoint;\n    }\n\n    setDetailedFlowSheetColumnEndpoint(value: string): void {\n        this.detailedFlowSheetColumnEndpoint = value;\n    }\n\n    getDetailedFlowSheetColumnEndpoint(): string {\n        if (!this.detailedFlowSheetColumnEndpoint) {\n            console.warn('Detailed flowsheet column endpoint is not set!');\n        }\n        return this.detailedFlowSheetColumnEndpoint;\n    }\n\n    setLatestRiScoresEndPoint(value: string): void {\n        this.latestRiScoresEndPoint = value;\n    }\n\n    getLatestRiScoresEndPoint(): string {\n        if (!this.latestRiScoresEndPoint) {\n            console.warn('Latest RI Scores endpoint is not set!');\n        }\n        return this.latestRiScoresEndPoint;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {FlowsheetsConfigService} from '../config/flowsheets-config.service';\nimport {BehaviorSubject, Observable, timer} from 'rxjs';\nimport {FlowSheetBase} from '../../../model/FlowSheetBase';\nimport {switchMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FlowsheetsApiService {\n\n  private readonly flowSheetSubject: BehaviorSubject<Map<number, Array<FlowSheetBase>>>;\n  // Map of numeric RI score keyed by Visit ID\n  private readonly riScoresSubject: BehaviorSubject<Map<number, number>>;\n  // The timer that fires so that clients can get the latest flowsheet and RI score values\n  private pollInstance$: Observable<any>;\n\n  constructor(private http: HttpClient,\n              private flowsheetConfigService: FlowsheetsConfigService) {\n    this.pollInstance$ = timer(0, 60000);\n    this.flowSheetSubject = new BehaviorSubject<Map<number, Array<FlowSheetBase>>>(null);\n    this.riScoresSubject = new BehaviorSubject<Map<number, number>>(null);\n  }\n\n  public getFlowSheetSubject() {\n    return this.flowSheetSubject;\n  }\n\n  public getFlowSheetSubjectValue() {\n    return this.flowSheetSubject.value;\n  }\n\n  public getRiScoresSubject() {\n    return this.riScoresSubject;\n  }\n\n  public getRiScoresSubjectValue() {\n    return this.riScoresSubject.value;\n  }\n\n  getSinglePeraGraphFlowSheet(): Observable<any> {\n    return this.http.get<any>(this.flowsheetConfigService.getSinglePeraGraphFlowSheetEndPoint());\n  }\n\n  getDetailedFlowsheetColumn(): Observable<any> {\n    return this.http.get<any>(this.flowsheetConfigService.getDetailedFlowSheetColumnEndpoint());\n  }\n\n  getAllPeraGraphFlowSheets(): Observable<any> {\n    return this.http.get(this.flowsheetConfigService.getAllPeragraphFlowSheetsEndPoint(), {observe: 'response'});\n  }\n\n  getAllRiScores(): Observable<any> {\n    return this.http.get(this.flowsheetConfigService.getLatestRiScoresEndPoint(), {observe: 'response'});\n  }\n\n  public getFlowSheetInterval() {\n    // Make an HTTP call on an interval\n    return this.pollInstance$.pipe(\n      switchMap(() => this.getAllPeraGraphFlowSheets())\n    );\n  }\n\n  public getLatestRiScoresInterval() {\n    // Make an HTTP call on an interval\n    return this.pollInstance$.pipe(\n      switchMap(() => this.getAllRiScores())\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PeragraphConfigService {\n\n    private singlePeraGraphEndPoint: string = null;\n    private allPeraGraphsEndPoint: string = null;\n\n    public setSinglePeraGraphEndPoint(value: string): void {\n        this.singlePeraGraphEndPoint = value;\n    }\n\n    public getSinglePeraGraphEndPoint(): string {\n        if (!this.singlePeraGraphEndPoint) {\n            console.warn('Single PeraGraph endpoint is not set!');\n        }\n        return this.singlePeraGraphEndPoint;\n    }\n\n    public setAllPeraGraphsEndPoint(value: string): void {\n        this.allPeraGraphsEndPoint = value;\n    }\n\n    public getAllPeraGraphsEndPoint(): string {\n        if (!this.allPeraGraphsEndPoint) {\n            console.warn('All PeraGraph endpoint is not set!');\n        }\n        return this.allPeraGraphsEndPoint;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, Observable, timer} from 'rxjs';\nimport {PeraGraph} from '../../../model/PeraGraph';\nimport {switchMap} from 'rxjs/operators';\nimport {PeragraphConfigService} from '../config/peragraph-config.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PeragraphApiService {\n\n    private readonly _peraGraphSubject: BehaviorSubject<Array<PeraGraph>>;\n    private pollInstance$: Observable<any>;\n\n    constructor(private http: HttpClient,\n                private peragraphConfigService: PeragraphConfigService) {\n        this.pollInstance$ = timer(0, 60000);\n        this._peraGraphSubject = new BehaviorSubject<Array<PeraGraph>>([]);\n    }\n\n    public getPeraGraphSubject() {\n        return this._peraGraphSubject;\n    }\n\n    public getSinglePeragraph(): Observable<PeraGraph> {\n        return this.http.get<PeraGraph>(this.peragraphConfigService.getSinglePeraGraphEndPoint());\n    }\n\n    public getAllPeragraphs(): Observable<any> {\n        return this.http.get(this.peragraphConfigService.getAllPeraGraphsEndPoint());\n    }\n\n    public getPeraGraphInterval() {\n        // Make an HTTP call on an interval\n        return this.pollInstance$.pipe(\n            switchMap(() => this.getAllPeragraphs()));\n\n        /*\n         TODO Have a different method with the filtering criteria, using the same subject,\n         and call it when the filter changes. Then we push the change.\n\n         Do the same thing with sorting.\n         */\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from '../model/PeraGraph';\nimport {DateService} from './date.service';\nimport * as moment_ from 'moment-timezone';\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n\n  constructor(public dateService: DateService) {\n  }\n\n  /**\n   * Returns the patient age in years, months using the patient DOB\n   */\n  public getPatientAge(graph: PeraGraph): string {\n    if (graph && graph.patient && graph.patient.dob) {\n      const daysOld = Math.floor(\n        Math.round((this.dateService.translateDate(moment.utc().valueOf(), graph.timeZone) - graph.patient.dob) / 86400000));\n\n      const d = 'd';\n      const w = 'w';\n      const m = 'm';\n      const y = 'y';\n\n      if (daysOld < 7) {\n        return Math.floor(daysOld) + d;\n      } else if (daysOld >= 7 && daysOld < 31) {\n        return Math.floor(daysOld / 7) + w + Math.floor(daysOld % 7) + d;\n      } else if (daysOld >= 31 && daysOld < 365) {\n        return Math.floor(daysOld / 29.7) + m + Math.floor((daysOld % 29.7) / 7) + w;\n      } else if (daysOld >= 365 && daysOld < 730) {\n        return Math.floor(daysOld / 365) + y + Math.floor((daysOld % 365) / 29.7) + m;\n      } else {\n        return Math.floor(daysOld / 365) + y;\n      }\n    } else {\n      return ' ';\n    }\n  }\n\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CommonService {\n\n    /**\n     * Parse any primitive value (string, number, boolean, undefined or null) to a boolean true or false.\n     * @param value Value to parse.\n     */\n    public primitiveToBoolean(value?: string | number | boolean | null): boolean {\n        if (value == null) {\n            return false;\n        }\n\n        if (value === 'true' || value === 'True' || value === 'TRUE') {\n            return true;\n        }\n\n        return typeof value === 'string'\n            ? !!+value   // we parse string to number first\n            : !!value;\n    }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationsService {\n\n  translations = [];\n\n  private keyTranslations = {\n    'ACTIVE': 'perahealth.translation.ACTIVE',\n    'DATA_UPDATED': 'perahealth.translation.DATA_UPDATED',\n    'ELAPSED': 'perahealth.translation.ELAPSED',\n    'OVERRIDDEN': 'perahealth.translation.OVERRIDDEN',\n    'RESUMED': 'perahealth.translation.RESUMED',\n    'V': 'perahealth.translation.VH',\n    'H': 'perahealth.translation.H',\n    'M': 'perahealth.translation.M',\n    'N': 'perahealth.translation.N'\n  };\n\n  constructor() {\n  }\n\n  getTranslation(key: string): string {\n    return (key) ? this.translations[key] : '';\n  }\n\n  public getKeyTranslation(key: string): string {\n    return (key) ? this.translations[this.keyTranslations[key]] : '';\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TranslationsConfigService {\n\n    private translationsEndPoint: string = null;\n\n    public setTranslationsEndPoint(value: string): void {\n        this.translationsEndPoint = value;\n    }\n\n    public getTranslationsEndpoint(): string {\n        if (!this.translationsEndPoint) {\n            console.warn('Translations endpoint is not set!');\n        }\n        return this.translationsEndPoint;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\nimport {TranslationsConfigService} from '../config/translations-config.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TranslationsApiService {\n\n    constructor(private http: HttpClient,\n                private translationsConfigService: TranslationsConfigService) {\n    }\n\n    getAllTranslations(): Observable<any> {\n        return this.http.get<any>(this.translationsConfigService.getTranslationsEndpoint());\n    }\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DiagnosisConfigService {\n\n    private primaryDiagnosesEndpoint: string = null;\n\n    public getPrimaryDiagnosesEndpoint(): string {\n        if (!this.primaryDiagnosesEndpoint) {\n            console.warn('Primary diagnoses endpoint is not set!');\n        }\n        return this.primaryDiagnosesEndpoint;\n    }\n\n    public setPrimaryDiagnosesEndpoint(value: string): void {\n        this.primaryDiagnosesEndpoint = value;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {DiagnosisConfigService} from '../config/diagnosis-config.service';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, Observable, timer} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosisApiService {\n\n  // The timer that fires so that clients can get the latest diagnoses\n  private pollInstance$: Observable<any>;\n  // Map of primary diagnosis keyed by visit ID\n  private readonly diagnosesSubject: BehaviorSubject<Map<number, string>>;\n\n  constructor(private http: HttpClient, private diagnosisConfigService: DiagnosisConfigService) {\n    this.pollInstance$ = timer(0, 60000);\n    this.diagnosesSubject = new BehaviorSubject<Map<number, string>>(null);\n  }\n\n  public getDiagnosesSubject() {\n    return this.diagnosesSubject;\n  }\n\n  public getDiagnosesSubjectValue() {\n    return this.diagnosesSubject.value;\n  }\n\n  public getAllDiagnoses(): Observable<any> {\n    return this.http.get(this.diagnosisConfigService.getPrimaryDiagnosesEndpoint(), {observe: 'response'});\n  }\n\n  public getPrimaryDiagnosesInterval() {\n    // Make an HTTP call on an interval\n    return this.pollInstance$.pipe(\n      switchMap(() => this.getAllDiagnoses())\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TokenConfigService {\n    private checkTokenEndPoint: string = null;\n    private refreshTokenEndPoint: string = null;\n    private getTokenEndPoint: string = null;\n\n    public setCheckTokenEndPoint(value: string): void {\n        this.checkTokenEndPoint = value;\n    }\n\n    public getCheckTokenEndPoint(): string {\n        if (!this.checkTokenEndPoint) {\n            console.warn('Check token endpoint is not set!');\n        }\n        return this.checkTokenEndPoint;\n    }\n\n    public setRefreshTokenEndPoint(value: string): void {\n        this.refreshTokenEndPoint = value;\n    }\n\n    public getRefreshTokenEndPoint(): string {\n        if (!this.refreshTokenEndPoint) {\n            console.warn('Refresh token endpoint is not set!');\n        }\n        return this.refreshTokenEndPoint;\n    }\n\n    public setGetTokenEndPoint(value: string): void {\n        this.getTokenEndPoint = value;\n    }\n\n    public getGetTokenEndPoint(): string {\n        if (!this.getTokenEndPoint) {\n            console.warn('Get token endpoint is not set!');\n        }\n        return this.getTokenEndPoint;\n    }\n}\n","export class User {\n  username: string = null;\n  password: string = null;\n  firstname: string = null;\n  lastname: string = null;\n  appid: string = null;\n  roles: Array<string> = null;\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {User} from '../../../model/User';\nimport {TokenConfigService} from '../config/token-config.service';\nimport {Storage} from '@ionic/storage';\nimport {first} from 'rxjs/operators';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TokenApiService {\n    private jwtTokenName = 'jwt_token';\n    // Make the appId available to other services\n    private appId: string = null;\n\n    private deviceToken: string = null;\n\n    // Used to report when a token has been retrieved from storage\n    public readonly token$: Subject<string> = new Subject<string>();\n\n    constructor(private http: HttpClient,\n                private jwtHelper: JwtHelperService,\n                private config: TokenConfigService,\n                private storage: Storage) {\n    }\n\n    /**\n     * Check the current token.\n     */\n    public checkToken() {\n        this.token$.pipe(first()).subscribe((token: string) => {\n            const decodedToken = this.jwtHelper.decodeToken(token);\n            if (decodedToken) {\n                // Convert to a user object to send to the REST service\n                const user = new User();\n                user.username = decodedToken['sub'];\n                user.roles = decodedToken['roles'];\n                user.firstname = decodedToken['firstname'];\n                user.lastname = decodedToken['lastname'];\n                user.appid = decodedToken['appid'];\n\n                // console.log('Existing, valid client side token found. Checking the server.');\n                this.http.post(this.config.getCheckTokenEndPoint(), user).pipe(first()).subscribe(() => {\n                    // If we land in here, then the token interceptor on the server validated the token\n                    this.appId = user.appid;\n                    // console.log('Valid token!');\n                    this.token$.next(token);\n                }, (e) => {\n                    this.appId = null;\n                    // console.log('Invalid token!');\n                    this.token$.next(null);\n                });\n            } else {\n                // console.log('Removing invalid token from storage.');\n                this.clearToken();\n                this.token$.next(null);\n            }\n        });\n        this.getExistingToken();\n    }\n\n    /**\n     * Refresh the token for the given user.\n     *\n     * @param user User for which to refresh token.\n     */\n    public refreshToken(user: User) {\n        if (!user || !user.username) {\n            // console.log('Valid user not supplied, cannot refresh token!');\n        } else {\n            setTimeout(() => {\n                this.token$.pipe(first()).subscribe((token: string) => {\n                    // Check whether or not the token is valid according to the server\n                    this.http.post(this.config.getRefreshTokenEndPoint(), user, {responseType: 'text'}).pipe(first()).subscribe((token: string) => {\n                            // console.log('Successfully retrieved updated token [' + token + ']');\n                            this.storage.set(this.jwtTokenName, token)\n                        },\n                        () => {\n                            // The server thinks the token is not valid (expired, the secret key changed, etc)\n                            // console.log('Invalid token!');\n                            this.clearToken();\n                            this.token$.next(null);\n                        });\n                });\n                this.getExistingToken();\n            }, 100);\n        }\n    }\n\n    public getToken(user: User) {\n        // Check whether or not the token is valid according to the server\n        this.http.post(this.config.getGetTokenEndPoint(), user, {responseType: 'text'}).pipe(first()).subscribe((token: string) => {\n                // console.log('Successfully retrieved new token: [' + token + ']');\n                this.appId = user.appid;\n                this.storage.set(this.jwtTokenName, token)\n                    .then(() => {\n                        // console.log('New token added to storage. [' + token + ']')\n                        this.token$.next(token);\n                    }, () => {\n                        // console.log('Could not store new token!');\n                        this.token$.next(null);\n                    });\n            },\n            (e) => {\n                // The server thinks the token is not valid (expired, the secret key changed, etc)\n                // console.log('Could not retrieve new token!');\n                this.token$.next(null);\n            });\n    }\n\n    public clearToken() {\n        this.storage.remove(this.jwtTokenName)\n            .then((jwt: string) => {\n                // console.log('JWT removed from storage');\n            }, (reason: any) => {\n                // console.log('JWT could not be removed from storage. Reason = ' + reason);\n            });\n    }\n\n    public getExistingToken() {\n        this.storage.get(this.jwtTokenName)\n            .then((token: string) => {\n                this.token$.next(token);\n            }, (error) => {\n                this.token$.next(null);\n            })\n            .catch((error) => {\n                this.token$.next(null);\n            });\n    }\n\n    public getAppId(): string {\n        return this.appId;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LocationsConfigService {\n    private activeFacilitiesEndpoint: string = null;\n    private activeUnitsEndpoint: string = null;\n\n    public getActiveFacilitiesEndpoint(): string {\n        if (!this.activeFacilitiesEndpoint) {\n            console.warn('Active facilities endpoint is not set!');\n        }\n        return this.activeFacilitiesEndpoint;\n    }\n\n    public setActiveFacilitiesEndpoint(value: string): void {\n        this.activeFacilitiesEndpoint = value;\n    }\n\n    public getActiveUnitsEndpoint(): string {\n        if (!this.activeUnitsEndpoint) {\n            console.warn('Active units endpoint is not set!');\n        }\n        return this.activeUnitsEndpoint;\n    }\n\n    public setActiveUnitsEndpoint(value: string): void {\n        this.activeUnitsEndpoint = value;\n    }\n}\n","import {Facility} from './Facility';\nimport {Unit} from './Unit';\n\nexport class Locations {\n  public facilities: Facility[] = [];\n  public units: Unit[] = [];\n}\n","import {Injectable, OnDestroy} from '@angular/core';\nimport {Unit} from '../../../model/Unit';\nimport {Facility} from '../../../model/Facility';\nimport {HttpClient} from '@angular/common/http';\nimport {LocationsConfigService} from '../config/locations-config.service';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Locations} from '../../../model/Locations';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationsApiService implements OnDestroy {\n\n  private facilitySubscription: Subscription;\n  private unitSubscription: Subscription;\n\n  public readonly facilitiesAndUnit$: Subject<{ facilities: Facility[], units: Unit[] }>;\n\n  private locations: Locations = new Locations();\n\n  constructor(\n    private http: HttpClient,\n    private locationsConfigService: LocationsConfigService) {\n    this.facilitiesAndUnit$ = new Subject<{ facilities: Facility[], units: Unit[] }>();\n  }\n\n  /**\n   * Updates facilities and units and calls the facilitiesAndUnitSubject when it completes.\n   * Will use a cache if they were previously retrieved.\n   */\n  public getFacilitiesAndUnits() {\n    if (this.locations.facilities && this.locations.facilities.length > 0 && this.locations.units && this.locations.units.length > 0) {\n      this.facilitiesAndUnit$.next(this.locations);\n    } else {\n      /** Receive all facilities and active units and set instance variables for caching */\n      this.facilitySubscription = this.getActiveFacilities().pipe(map((f) => f.facilities)).subscribe((facilities: Facility[]) => {\n        if (facilities && facilities.length > 0) {\n          const facilityIds: String[] = [];\n          for (const facility of facilities) {\n            facilityIds.push(facility.facilityID);\n          }\n          this.unitSubscription = this.getActiveUnitsForFacilities(facilityIds).pipe((map((u) => u.units))).subscribe((units: Unit[]) => {\n            // filter out facilities with no active units\n            this.locations = new Locations();\n            for (const f of facilities) {\n              let hasActiveUnits = false;\n              for (const u of units) {\n                if (u.key.facilityID === f.facilityID) {\n                  hasActiveUnits = true;\n                  break;\n                }\n              }\n              if (hasActiveUnits) {\n                this.locations.facilities.push(f);\n              }\n            }\n            this.locations.units = units;\n            this.facilitiesAndUnit$.next(this.locations);\n          }, (e) => {\n            console.log('Could not update units! Error = ' + e.message);\n          });\n        }\n      }, (e) => {\n        console.log('Could not update facilities! Error = ' + e.message);\n      });\n    }\n  }\n\n  getActiveFacilities(): Observable<{ facilities: Array<Facility> }> {\n    console.log('Getting all facilities: ' + this.locationsConfigService.getActiveFacilitiesEndpoint());\n    return this.http.get<{ facilities: Array<Facility> }>(this.locationsConfigService.getActiveFacilitiesEndpoint());\n  }\n\n  getActiveUnitsForFacilities(facilities: String[]): Observable<{ units: Array<Unit> }> {\n    console.log('Getting all active units: ' + this.locationsConfigService.getActiveUnitsEndpoint() + facilities);\n    return this.http.get<{ units: Array<Unit> }>(this.locationsConfigService.getActiveUnitsEndpoint() + facilities);\n  }\n\n  ngOnDestroy(): void {\n    if (this.facilitySubscription && !this.facilitySubscription.closed) {\n      this.facilitySubscription.unsubscribe();\n    }\n    if (this.unitSubscription && !this.unitSubscription.closed) {\n      this.unitSubscription.unsubscribe();\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsageConfigService {\n  private usageDataEndPoint: string;\n  // Default to polling every 5 seconds\n  private usagePollingInterval = 5000;\n\n  /** @param value Endpoint for sending usage data. */\n  public setUsageDataEndPoint(value: string): void {\n    this.usageDataEndPoint = value;\n  }\n\n  /** Endpoint for sending usage data. */\n  public getUsageDataEndPoint(): string {\n    if (!this.usageDataEndPoint) {\n      console.warn('usage data endpoint is not set!');\n    }\n    return this.usageDataEndPoint;\n  }\n\n  /** Number of milliseconds between polling attempts. */\n  public getUsagePollingInterval(): number {\n    return this.usagePollingInterval;\n  }\n\n  /** @param value Number of milliseconds between polling attempts. */\n  public setUsagePollingInterval(value: number): void {\n    this.usagePollingInterval = value;\n  }\n}\n","export class PatientAccess {\n  public viewedBy: string;\n  public patient: string;\n  public vipIndicator: string;\n  public vnm: string;\n  public mrn: string;\n  public admitDate: number;\n  public dischargeDate: number;\n  public facilityId: string;\n  public unitId: string;\n  public provider: string;\n  public utcCode: string;\n  public usageCode: string;\n  public viewDate: number;\n\n\n  constructor(viewedBy: string,\n              patient: string,\n              vipIndicator: string,\n              vnm: string,\n              mrn: string,\n              admitDate: number,\n              dischargeDate: number,\n              facilityId: string,\n              unitId: string,\n              provider: string,\n              utcCode: string,\n              usageCode: string,\n              viewDate: number) {\n    this.viewedBy = viewedBy;\n    this.patient = patient;\n    this.vipIndicator = vipIndicator;\n    this.vnm = vnm;\n    this.mrn = mrn;\n    this.admitDate = admitDate;\n    this.dischargeDate = dischargeDate;\n    this.facilityId = facilityId;\n    this.unitId = unitId;\n    this.provider = provider;\n    this.utcCode = utcCode;\n    this.usageCode = usageCode;\n    this.viewDate = viewDate;\n  }\n}\n","export enum UsageType {\n  Array = 'U',\n  Graph = 'G'\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, Observable, of, Subject, Subscription, timer} from 'rxjs';\nimport {TokenApiService} from '../../token/api/token-api.service';\nimport {PatientAccess} from '../../../model/PatientAccess';\nimport {UsageType} from '../../../model/UsageType';\nimport {PeraGraph} from '../../../model/PeraGraph';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {UsageConfigService} from '../config/usage-config.service';\nimport {first, map, tap} from 'rxjs/operators';\nimport * as moment_ from 'moment-timezone';\nimport {LocationsApiService} from '../../locations/api/locations-api.service';\nimport {Locations} from \"../../../model/Locations\";\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UsageApiService {\n\n    public usageDataAdded$: Subject<PatientAccess>;\n    private pollInstance$: Observable<any>;\n    private readonly graphUpdated$: Subject<PeraGraph>;\n    private usageData: Array<PatientAccess> = new Array<PatientAccess>();\n    // Visits that have been viewed in the array view are only added to usageData once per session\n    private viewedVisits: string[] = [];\n    private initialized = false;\n    private locations: Locations;\n    private locationsLoaded$: Subject<boolean> = new Subject<boolean>();\n    private locationsLoaded: boolean = false;\n    private startedLoadingLocations = false;\n\n    // The token service is necessary to get the appId\n    constructor(private http: HttpClient,\n                private jwtHelper: JwtHelperService,\n                private usageConfigService: UsageConfigService,\n                private locationService: LocationsApiService,\n                private tokenApiService: TokenApiService) {\n        this.graphUpdated$ = new Subject<PeraGraph>();\n        this.usageDataAdded$ = new Subject<PatientAccess>();\n    }\n\n    public init() {\n        if (!this.initialized) {\n            this.initialized = true;\n        }\n    }\n\n    public startUsageReportingService(): void {\n        this.pollInstance$ = timer(0, this.usageConfigService.getUsagePollingInterval());\n        this.pollInstance$.subscribe(() => {\n            if (this.usageData && this.usageData.length > 0) {\n                this.submitUsageData();\n            }\n        });\n        if (this.usageData && this.usageData.length > 0) {\n            // Submit now in case the user closes the window before the timer fires\n            this.submitUsageData();\n        }\n        // get all the locations when the service is initialized\n        this.locationService.facilitiesAndUnit$.pipe(first()).subscribe((locations: Locations) => {\n            this.locations = locations;\n            this.locationsLoaded = true;\n            this.locationsLoaded$.next(true);\n        });\n        this.locationService.getFacilitiesAndUnits();\n    }\n\n    public submitUsageData(): void {\n        console.log('Submitting usage data for app ' + this.tokenApiService.getAppId() + ' Size = ' + this.usageData.length);\n        const usageDataCopy = this.usageData.slice();\n        this.usageData = [];\n        this.http.post(this.usageConfigService.getUsageDataEndPoint(), usageDataCopy).pipe(first()).subscribe();\n    }\n\n    /**\n     * When the user logs out of the system, we need to clear the cache\n     * so that the graph views are sent if they log in again.\n     */\n    public clearUsageCache(): void {\n        this.viewedVisits = [];\n    }\n\n    /**\n     * Add usage data.\n     * @param graphToLog The information that was viewed.\n     * @param usageType The context in which the information was viewed.\n     */\n    public addUsageData(graphToLog: PeraGraph, usageType: UsageType): void {\n        // We have to replace the facility and unit IDs with the real deals\n        this.updateFacilityAndUnitIdsForGraph(graphToLog).pipe(first(), tap((graph: PeraGraph) => {\n            this.tokenApiService.token$.pipe(first()).subscribe((token: string) => {\n                if (usageType === UsageType.Array) {\n                    // Only log 1 graph view per session when viewed in the array view\n                    if (graph && this.viewedVisits.indexOf(graph.vnm) < 0) {\n                        // We only log 1 visit view of a specific type per session\n                        this.viewedVisits.push(graph.vnm);\n                        this.addUsageDataFromToken(graph, usageType, token);\n                    }\n                } else {\n                    // Always add graph views because the user clicked on a graph in the array view\n                    this.addUsageDataFromToken(graph, usageType, token);\n                }\n            });\n            this.tokenApiService.getExistingToken();\n        })).subscribe();\n        if (!this.locationsLoaded && !this.startedLoadingLocations) {\n            this.startedLoadingLocations = true;\n            this.locationService.getFacilitiesAndUnits();\n        }\n    }\n\n    /**\n     * lookup and insert the unit id and fac id of graph to log\n     * @param graph - graph to log\n     */\n    private updateFacilityAndUnitIdsForGraph(graph: PeraGraph): Observable<PeraGraph> {\n        // Create a clone of the original graph since we are updating the facility and unit\n        // to their original IDs for Usage.\n        const cloneGraph: PeraGraph = JSON.parse(JSON.stringify(graph));\n        if (this.locationsLoaded === true) {\n            return of(UsageApiService.assignUnitAndFacIdToPeraGraph(cloneGraph, this.locations));\n        } else {\n            return this.locationsLoaded$.pipe(map(() => {\n                return UsageApiService.assignUnitAndFacIdToPeraGraph(cloneGraph, this.locations);\n            }));\n        }\n    }\n\n    /**\n     * helper method for looking up fac and unit ids\n     * @param graph - graph to replace unitId and facId of\n     * @param locations - all locations available to search\n     */\n    private static assignUnitAndFacIdToPeraGraph(graph: PeraGraph, locations: Locations): PeraGraph {\n        for (const fac of locations.facilities) {\n            if (graph.facilityId === fac.displayName) {\n                graph.facilityId = fac.facilityID;\n                break;\n            }\n        }\n        for (const unit of locations.units) {\n            if (graph.unitId === unit.displayName) {\n                graph.unitId = unit.key.unitID;\n                break;\n            }\n        }\n        return graph;\n    }\n\n    private addUsageDataFromToken(graph: PeraGraph, usageType: UsageType, token: string): void {\n        const decodedToken = this.jwtHelper.decodeToken(token);\n        if (decodedToken) {\n            // Convert to a user object to send to the REST service\n            const pa: PatientAccess = new PatientAccess(\n                decodedToken['sub'], // The claims subject is the username\n                graph.patient.lname + ', ' + graph.patient.fname,\n                graph.vipIndicator,\n                graph.vnm,\n                graph.patient.medicalRecordNumber,\n                graph.admitDate,\n                graph.dischargeDate,\n                graph.facilityId,\n                graph.unitId,\n                graph.attendingProvider.lastName + ', ' + graph.attendingProvider.firstName,\n                graph.visitUnitType,\n                usageType,\n                moment.valueOf()\n            );\n            this.usageData.push(pa);\n            // This can be used for testing and for the timing of individual calls to submitUsageData()\n            this.usageDataAdded$.next(pa);\n        }\n    }\n}\n","export class Facility {\n\n  public active: number;\n  public facilityID: string;\n  public displayName: string;\n  public displayOrder: number;\n  public facilityTimezone: string;\n  public fullName: String;\n  public primaryType: String;\n  public secondaryType: String;\n\n\n    constructor(active: number, facilityID: string, displayName: string, displayOrder: number, facilityTimezone: string, fullName: String, primaryType: String, secondaryType: String) {\n        this.active = active;\n        this.facilityID = facilityID;\n        this.displayName = displayName;\n        this.displayOrder = displayOrder;\n        this.facilityTimezone = facilityTimezone;\n        this.fullName = fullName;\n        this.primaryType = primaryType;\n        this.secondaryType = secondaryType;\n    }\n}\n","import {UnitKey} from './UnitKey';\n\nexport class Unit {\n\n  public key: UnitKey;\n  public displayName: string;\n  public utcCode: any;\n\n  constructor(key: UnitKey, displayName: string, utcCode: any) {\n    this.key = key;\n    this.displayName = displayName;\n    this.utcCode = utcCode;\n  }\n}\n","export class UnitKey {\n\n    public facilityID: string;\n    public unitID: string;\n\n    constructor(fid: string, uid: string) {\n        this.facilityID = fid;\n        this.unitID = uid;\n    }\n}\n"]}