{"version":3,"file":"ng-common-library.umd.js.map","sources":["ng://ng-common-library/lib/service/browser.service.ts","ng://ng-common-library/lib/model/MarkerColors.ts","ng://ng-common-library/lib/service/date.service.ts","ng://ng-common-library/lib/service/chart.service.ts","ng://ng-common-library/lib/service/warning.service.ts","ng://ng-common-library/lib/service/flowsheets/config/flowsheets-config.service.ts","ng://ng-common-library/lib/service/flowsheets/api/flowsheets-api.service.ts","ng://ng-common-library/lib/service/peragraph/config/peragraph-config.service.ts","ng://ng-common-library/lib/service/peragraph/api/peragraph-api.service.ts","ng://ng-common-library/lib/service/patient.service.ts","ng://ng-common-library/lib/service/common.service.ts","ng://ng-common-library/lib/service/translations/translations.service.ts","ng://ng-common-library/lib/service/translations/config/translations-config.service.ts","ng://ng-common-library/lib/service/translations/api/translations-api.service.ts","ng://ng-common-library/lib/service/diagnosis/config/diagnosis-config.service.ts","ng://ng-common-library/lib/service/diagnosis/api/diagnosis-api.service.ts","ng://ng-common-library/lib/service/token/config/token-config.service.ts","ng://ng-common-library/lib/model/User.ts","ng://ng-common-library/lib/service/token/api/token-api.service.ts","node_modules/tslib/tslib.es6.js","ng://ng-common-library/lib/service/locations/config/locations-config.service.ts","ng://ng-common-library/lib/model/Locations.ts","ng://ng-common-library/lib/service/locations/api/locations-api.service.ts","ng://ng-common-library/lib/service/usage/config/usage-config.service.ts","ng://ng-common-library/lib/model/PatientAccess.ts","ng://ng-common-library/lib/model/UsageType.ts","ng://ng-common-library/lib/service/usage/api/usage-api.service.ts","ng://ng-common-library/lib/model/Facility.ts","ng://ng-common-library/lib/model/Unit.ts","ng://ng-common-library/lib/model/UnitKey.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrowserService {\n\n  constructor() {\n  }\n\n  /**\n   * Triggers a browser resize event - needed for the Highchart to resize properly - takes into account the browser type too\n   */\n  public resize() {\n    if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0) {\n      const evt = document.createEvent('UIEvents');\n      evt.initUIEvent('resize', true, false, window, 0);\n      window.dispatchEvent(evt);\n    } else {\n      window.dispatchEvent(new Event('resize'));\n    }\n  }\n}\n","export enum MarkerColors {\n  Normal = 'black',\n  IntensiveCare = '#F23A27',\n  StepDown= 'blue'\n}\n","import {Injectable} from '@angular/core';\nimport * as moment_ from 'moment-timezone';\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DateService {\n  /**\n   * Formats the date to be displayed based on the parameters provided\n   * @param dateMil The date/time in milliseconds\n   * @param timeZone Each PeraGraph has one. Just pass it as a parameter.\n   * @param formatString A string param that defines the format in which the date needs to be displayed. e.g : MM/DD/YY HH:mm z\n   */\n  public getDateFormat(timeZone: string, dateMil: number, formatString: string) {\n    return moment(dateMil).utc().tz(timeZone).format(formatString);\n  }\n\n  /**\n   * Translate a date from a UTC offset.\n   *\n   * @param date The date to translate.\n   * @param timezone The timezone that the date was originally created in.\n   */\n  public translateDate(date: number, timezone: string) {\n    return date + ((3600000 / 60) * moment(date).tz(timezone).utcOffset());\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from '../model/PeraGraph';\nimport {MarkerColors} from '../model/MarkerColors';\nimport {DateService} from './date.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartService {\n\n  constructor(private dateService: DateService) {\n  }\n\n  /**\n   * Create the line across the 0 axis for when RI scores go below zero in a graph.\n   * @param minRiScore Minimum RI score.\n   */\n  public createZeroAxisLine(minRiScore: number) {\n    return [\n      {\n        color: '#000000',\n        width: minRiScore < 0 ? 1 : null,\n        value: minRiScore < 0 ? 0 : null,\n        zIndex: 3\n      }];\n  }\n\n  /**\n   * Create an alert plot line for a graph.\n   *\n   * @param alertCreatedDate The created date of the alert.\n   * @param timeZone The timezone that the alert was created in.\n   */\n  public updateAlertPlotLine(graph: PeraGraph) {\n    const plotLines = [];\n    if (graph && graph.activeWarning) {\n      plotLines.push({\n        color: '#CE2029',\n        value: this.dateService.translateDate(graph.activeWarning.createdDate, graph.timeZone),\n        width: 2,\n        zIndex: 3\n      });\n    }\n    return plotLines;\n  }\n\n  public getMinYAxisTick(minRiScore): number {\n    return (minRiScore > 0) ? 0 : 20 * Math.floor(minRiScore / 20);\n  }\n\n  /**\n   * Used in the graph to depict the unit type where a health score was recorded.\n   * @param unitType Type of unit to get the marker color for.\n   */\n  public getMarkerColor(unitType: string): string {\n    let markerColor = MarkerColors.Normal;\n    switch (unitType) {\n      case 'N':\n        markerColor = MarkerColors.IntensiveCare;\n        break;\n      case 'C':\n        markerColor = MarkerColors.IntensiveCare;\n        break;\n      case 'P':\n        markerColor = MarkerColors.StepDown;\n        break;\n    }\n    return markerColor;\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarningService {\n\n  constructor() {\n  }\n\n  /**\n   * Returns the correct warning color CSS class\n   *\n   * @param warning Warning category\n   */\n  public getWarningClass(warning: string): string {\n    let warningClass: string = null;\n    switch (warning) {\n      case 'V':\n        warningClass = 'vh-warning';\n        break;\n      case 'H':\n        warningClass = 'h-warning';\n        break;\n      case 'M':\n        warningClass = 'm-warning';\n        break;\n      default:\n        break;\n    }\n    return warningClass;\n  }\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FlowsheetsConfigService {\n\n    private singlePeraGraphFlowSheetEndPoint: string = null;\n    private allPeragraphFlowSheetsEndPoint: string = null;\n    private detailedFlowSheetColumnEndpoint: string = null;\n    private latestRiScoresEndPoint: string = null;\n\n    setSinglePeraGraphFlowSheetEndPoint(value: string): void {\n        this.singlePeraGraphFlowSheetEndPoint = value;\n    }\n\n    getSinglePeraGraphFlowSheetEndPoint(): string {\n        if (!this.singlePeraGraphFlowSheetEndPoint) {\n            console.warn('Single PeraGraph flowsheet endpoint is not set!');\n        }\n        return this.singlePeraGraphFlowSheetEndPoint;\n    }\n\n    setAllPeragraphFlowSheetsEndPoint(value: string): void {\n        this.allPeragraphFlowSheetsEndPoint = value;\n    }\n\n    getAllPeragraphFlowSheetsEndPoint(): string {\n        if (!this.allPeragraphFlowSheetsEndPoint) {\n            console.warn('All PeraGraph flowsheets endpoint is not set!');\n        }\n        return this.allPeragraphFlowSheetsEndPoint;\n    }\n\n    setDetailedFlowSheetColumnEndpoint(value: string): void {\n        this.detailedFlowSheetColumnEndpoint = value;\n    }\n\n    getDetailedFlowSheetColumnEndpoint(): string {\n        if (!this.detailedFlowSheetColumnEndpoint) {\n            console.warn('Detailed flowsheet column endpoint is not set!');\n        }\n        return this.detailedFlowSheetColumnEndpoint;\n    }\n\n    setLatestRiScoresEndPoint(value: string): void {\n        this.latestRiScoresEndPoint = value;\n    }\n\n    getLatestRiScoresEndPoint(): string {\n        if (!this.latestRiScoresEndPoint) {\n            console.warn('Latest RI Scores endpoint is not set!');\n        }\n        return this.latestRiScoresEndPoint;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {FlowsheetsConfigService} from '../config/flowsheets-config.service';\nimport {BehaviorSubject, Observable, timer} from 'rxjs';\nimport {FlowSheetBase} from '../../../model/FlowSheetBase';\nimport {switchMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FlowsheetsApiService {\n\n  private readonly flowSheetSubject: BehaviorSubject<Map<number, Array<FlowSheetBase>>>;\n  // Map of numeric RI score keyed by Visit ID\n  private readonly riScoresSubject: BehaviorSubject<Map<number, number>>;\n  // The timer that fires so that clients can get the latest flowsheet and RI score values\n  private pollInstance$: Observable<any>;\n\n  constructor(private http: HttpClient,\n              private flowsheetConfigService: FlowsheetsConfigService) {\n    this.pollInstance$ = timer(0, 60000);\n    this.flowSheetSubject = new BehaviorSubject<Map<number, Array<FlowSheetBase>>>(null);\n    this.riScoresSubject = new BehaviorSubject<Map<number, number>>(null);\n  }\n\n  public getFlowSheetSubject() {\n    return this.flowSheetSubject;\n  }\n\n  public getFlowSheetSubjectValue() {\n    return this.flowSheetSubject.value;\n  }\n\n  public getRiScoresSubject() {\n    return this.riScoresSubject;\n  }\n\n  public getRiScoresSubjectValue() {\n    return this.riScoresSubject.value;\n  }\n\n  getSinglePeraGraphFlowSheet(): Observable<any> {\n    return this.http.get<any>(this.flowsheetConfigService.getSinglePeraGraphFlowSheetEndPoint());\n  }\n\n  getDetailedFlowsheetColumn(): Observable<any> {\n    return this.http.get<any>(this.flowsheetConfigService.getDetailedFlowSheetColumnEndpoint());\n  }\n\n  getAllPeraGraphFlowSheets(): Observable<any> {\n    return this.http.get(this.flowsheetConfigService.getAllPeragraphFlowSheetsEndPoint(), {observe: 'response'});\n  }\n\n  getAllRiScores(): Observable<any> {\n    return this.http.get(this.flowsheetConfigService.getLatestRiScoresEndPoint(), {observe: 'response'});\n  }\n\n  public getFlowSheetInterval() {\n    // Make an HTTP call on an interval\n    return this.pollInstance$.pipe(\n      switchMap(() => this.getAllPeraGraphFlowSheets())\n    );\n  }\n\n  public getLatestRiScoresInterval() {\n    // Make an HTTP call on an interval\n    return this.pollInstance$.pipe(\n      switchMap(() => this.getAllRiScores())\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PeragraphConfigService {\n\n    private singlePeraGraphEndPoint: string = null;\n    private allPeraGraphsEndPoint: string = null;\n\n    public setSinglePeraGraphEndPoint(value: string): void {\n        this.singlePeraGraphEndPoint = value;\n    }\n\n    public getSinglePeraGraphEndPoint(): string {\n        if (!this.singlePeraGraphEndPoint) {\n            console.warn('Single PeraGraph endpoint is not set!');\n        }\n        return this.singlePeraGraphEndPoint;\n    }\n\n    public setAllPeraGraphsEndPoint(value: string): void {\n        this.allPeraGraphsEndPoint = value;\n    }\n\n    public getAllPeraGraphsEndPoint(): string {\n        if (!this.allPeraGraphsEndPoint) {\n            console.warn('All PeraGraph endpoint is not set!');\n        }\n        return this.allPeraGraphsEndPoint;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, Observable, timer} from 'rxjs';\nimport {PeraGraph} from '../../../model/PeraGraph';\nimport {switchMap} from 'rxjs/operators';\nimport {PeragraphConfigService} from '../config/peragraph-config.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PeragraphApiService {\n\n    private readonly _peraGraphSubject: BehaviorSubject<Array<PeraGraph>>;\n    private pollInstance$: Observable<any>;\n\n    constructor(private http: HttpClient,\n                private peragraphConfigService: PeragraphConfigService) {\n        this.pollInstance$ = timer(0, 60000);\n        this._peraGraphSubject = new BehaviorSubject<Array<PeraGraph>>([]);\n    }\n\n    public getPeraGraphSubject() {\n        return this._peraGraphSubject;\n    }\n\n    public getSinglePeragraph(): Observable<PeraGraph> {\n        return this.http.get<PeraGraph>(this.peragraphConfigService.getSinglePeraGraphEndPoint());\n    }\n\n    public getAllPeragraphs(): Observable<any> {\n        return this.http.get(this.peragraphConfigService.getAllPeraGraphsEndPoint());\n    }\n\n    public getPeraGraphInterval() {\n        // Make an HTTP call on an interval\n        return this.pollInstance$.pipe(\n            switchMap(() => this.getAllPeragraphs()));\n\n        /*\n         TODO Have a different method with the filtering criteria, using the same subject,\n         and call it when the filter changes. Then we push the change.\n\n         Do the same thing with sorting.\n         */\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from '../model/PeraGraph';\nimport {DateService} from './date.service';\nimport * as moment_ from 'moment-timezone';\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n\n  constructor(public dateService: DateService) {\n  }\n\n  /**\n   * Returns the patient age in years, months using the patient DOB\n   */\n  public getPatientAge(graph: PeraGraph): string {\n    if (graph && graph.patient && graph.patient.dob) {\n      const daysOld = Math.floor(\n        Math.round((this.dateService.translateDate(moment.utc().valueOf(), graph.timeZone) - graph.patient.dob) / 86400000));\n\n      const d = 'd';\n      const w = 'w';\n      const m = 'm';\n      const y = 'y';\n\n      if (daysOld < 7) {\n        return Math.floor(daysOld) + d;\n      } else if (daysOld >= 7 && daysOld < 31) {\n        return Math.floor(daysOld / 7) + w + Math.floor(daysOld % 7) + d;\n      } else if (daysOld >= 31 && daysOld < 365) {\n        return Math.floor(daysOld / 29.7) + m + Math.floor((daysOld % 29.7) / 7) + w;\n      } else if (daysOld >= 365 && daysOld < 730) {\n        return Math.floor(daysOld / 365) + y + Math.floor((daysOld % 365) / 29.7) + m;\n      } else {\n        return Math.floor(daysOld / 365) + y;\n      }\n    } else {\n      return ' ';\n    }\n  }\n\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CommonService {\n\n    /**\n     * Parse any primitive value (string, number, boolean, undefined or null) to a boolean true or false.\n     * @param value Value to parse.\n     */\n    public primitiveToBoolean(value?: string | number | boolean | null): boolean {\n        if (value == null) {\n            return false;\n        }\n\n        if (value === 'true' || value === 'True' || value === 'TRUE') {\n            return true;\n        }\n\n        return typeof value === 'string'\n            ? !!+value   // we parse string to number first\n            : !!value;\n    }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationsService {\n\n  translations = [];\n\n  private keyTranslations = {\n    'ACTIVE': 'perahealth.translation.ACTIVE',\n    'DATA_UPDATED': 'perahealth.translation.DATA_UPDATED',\n    'ELAPSED': 'perahealth.translation.ELAPSED',\n    'OVERRIDDEN': 'perahealth.translation.OVERRIDDEN',\n    'RESUMED': 'perahealth.translation.RESUMED',\n    'V': 'perahealth.translation.VH',\n    'H': 'perahealth.translation.H',\n    'M': 'perahealth.translation.M',\n    'N': 'perahealth.translation.N'\n  };\n\n  constructor() {\n  }\n\n  getTranslation(key: string): string {\n    return (key) ? this.translations[key] : '';\n  }\n\n  public getKeyTranslation(key: string): string {\n    return (key) ? this.translations[this.keyTranslations[key]] : '';\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TranslationsConfigService {\n\n    private translationsEndPoint: string = null;\n\n    public setTranslationsEndPoint(value: string): void {\n        this.translationsEndPoint = value;\n    }\n\n    public getTranslationsEndpoint(): string {\n        if (!this.translationsEndPoint) {\n            console.warn('Translations endpoint is not set!');\n        }\n        return this.translationsEndPoint;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\nimport {TranslationsConfigService} from '../config/translations-config.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TranslationsApiService {\n\n    constructor(private http: HttpClient,\n                private translationsConfigService: TranslationsConfigService) {\n    }\n\n    getAllTranslations(): Observable<any> {\n        return this.http.get<any>(this.translationsConfigService.getTranslationsEndpoint());\n    }\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DiagnosisConfigService {\n\n    private primaryDiagnosesEndpoint: string = null;\n\n    public getPrimaryDiagnosesEndpoint(): string {\n        if (!this.primaryDiagnosesEndpoint) {\n            console.warn('Primary diagnoses endpoint is not set!');\n        }\n        return this.primaryDiagnosesEndpoint;\n    }\n\n    public setPrimaryDiagnosesEndpoint(value: string): void {\n        this.primaryDiagnosesEndpoint = value;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {DiagnosisConfigService} from '../config/diagnosis-config.service';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, Observable, timer} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosisApiService {\n\n  // The timer that fires so that clients can get the latest diagnoses\n  private pollInstance$: Observable<any>;\n  // Map of primary diagnosis keyed by visit ID\n  private readonly diagnosesSubject: BehaviorSubject<Map<number, string>>;\n\n  constructor(private http: HttpClient, private diagnosisConfigService: DiagnosisConfigService) {\n    this.pollInstance$ = timer(0, 60000);\n    this.diagnosesSubject = new BehaviorSubject<Map<number, string>>(null);\n  }\n\n  public getDiagnosesSubject() {\n    return this.diagnosesSubject;\n  }\n\n  public getDiagnosesSubjectValue() {\n    return this.diagnosesSubject.value;\n  }\n\n  public getAllDiagnoses(): Observable<any> {\n    return this.http.get(this.diagnosisConfigService.getPrimaryDiagnosesEndpoint(), {observe: 'response'});\n  }\n\n  public getPrimaryDiagnosesInterval() {\n    // Make an HTTP call on an interval\n    return this.pollInstance$.pipe(\n      switchMap(() => this.getAllDiagnoses())\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TokenConfigService {\n    private checkTokenEndPoint: string = null;\n    private refreshTokenEndPoint: string = null;\n    private getTokenEndPoint: string = null;\n\n    public setCheckTokenEndPoint(value: string): void {\n        this.checkTokenEndPoint = value;\n    }\n\n    public getCheckTokenEndPoint(): string {\n        if (!this.checkTokenEndPoint) {\n            console.warn('Check token endpoint is not set!');\n        }\n        return this.checkTokenEndPoint;\n    }\n\n    public setRefreshTokenEndPoint(value: string): void {\n        this.refreshTokenEndPoint = value;\n    }\n\n    public getRefreshTokenEndPoint(): string {\n        if (!this.refreshTokenEndPoint) {\n            console.warn('Refresh token endpoint is not set!');\n        }\n        return this.refreshTokenEndPoint;\n    }\n\n    public setGetTokenEndPoint(value: string): void {\n        this.getTokenEndPoint = value;\n    }\n\n    public getGetTokenEndPoint(): string {\n        if (!this.getTokenEndPoint) {\n            console.warn('Get token endpoint is not set!');\n        }\n        return this.getTokenEndPoint;\n    }\n}\n","export class User {\n  username: string = null;\n  password: string = null;\n  firstname: string = null;\n  lastname: string = null;\n  appid: string = null;\n  roles: Array<string> = null;\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {User} from '../../../model/User';\nimport {TokenConfigService} from '../config/token-config.service';\nimport {Storage} from '@ionic/storage';\nimport {first} from 'rxjs/operators';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TokenApiService {\n    private jwtTokenName = 'jwt_token';\n    // Make the appId available to other services\n    private appId: string = null;\n\n    private deviceToken: string = null;\n\n    // Used to report when a token has been retrieved from storage\n    public readonly token$: Subject<string> = new Subject<string>();\n\n    constructor(private http: HttpClient,\n                private jwtHelper: JwtHelperService,\n                private config: TokenConfigService,\n                private storage: Storage) {\n    }\n\n    /**\n     * Check the current token.\n     */\n    public checkToken() {\n        this.token$.pipe(first()).subscribe((token: string) => {\n            const decodedToken = this.jwtHelper.decodeToken(token);\n            if (decodedToken) {\n                // Convert to a user object to send to the REST service\n                const user = new User();\n                user.username = decodedToken['sub'];\n                user.roles = decodedToken['roles'];\n                user.firstname = decodedToken['firstname'];\n                user.lastname = decodedToken['lastname'];\n                user.appid = decodedToken['appid'];\n\n                // console.log('Existing, valid client side token found. Checking the server.');\n                this.http.post(this.config.getCheckTokenEndPoint(), user).pipe(first()).subscribe(() => {\n                    // If we land in here, then the token interceptor on the server validated the token\n                    this.appId = user.appid;\n                    // console.log('Valid token!');\n                    this.token$.next(token);\n                }, (e) => {\n                    this.appId = null;\n                    // console.log('Invalid token!');\n                    this.token$.next(null);\n                });\n            } else {\n                // console.log('Removing invalid token from storage.');\n                this.clearToken();\n                this.token$.next(null);\n            }\n        });\n        this.getExistingToken();\n    }\n\n    /**\n     * Refresh the token for the given user.\n     *\n     * @param user User for which to refresh token.\n     */\n    public refreshToken(user: User) {\n        if (!user || !user.username) {\n            // console.log('Valid user not supplied, cannot refresh token!');\n        } else {\n            setTimeout(() => {\n                this.token$.pipe(first()).subscribe((token: string) => {\n                    // Check whether or not the token is valid according to the server\n                    this.http.post(this.config.getRefreshTokenEndPoint(), user, {responseType: 'text'}).pipe(first()).subscribe((token: string) => {\n                            // console.log('Successfully retrieved updated token [' + token + ']');\n                            this.storage.set(this.jwtTokenName, token)\n                        },\n                        () => {\n                            // The server thinks the token is not valid (expired, the secret key changed, etc)\n                            // console.log('Invalid token!');\n                            this.clearToken();\n                            this.token$.next(null);\n                        });\n                });\n                this.getExistingToken();\n            }, 100);\n        }\n    }\n\n    public getToken(user: User) {\n        // Check whether or not the token is valid according to the server\n        this.http.post(this.config.getGetTokenEndPoint(), user, {responseType: 'text'}).pipe(first()).subscribe((token: string) => {\n                // console.log('Successfully retrieved new token: [' + token + ']');\n                this.appId = user.appid;\n                this.storage.set(this.jwtTokenName, token)\n                    .then(() => {\n                        // console.log('New token added to storage. [' + token + ']')\n                        this.token$.next(token);\n                    }, () => {\n                        // console.log('Could not store new token!');\n                        this.token$.next(null);\n                    });\n            },\n            (e) => {\n                // The server thinks the token is not valid (expired, the secret key changed, etc)\n                // console.log('Could not retrieve new token!');\n                this.token$.next(null);\n            });\n    }\n\n    public clearToken() {\n        this.storage.remove(this.jwtTokenName)\n            .then((jwt: string) => {\n                // console.log('JWT removed from storage');\n            }, (reason: any) => {\n                // console.log('JWT could not be removed from storage. Reason = ' + reason);\n            });\n    }\n\n    public getExistingToken() {\n        this.storage.get(this.jwtTokenName)\n            .then((token: string) => {\n                this.token$.next(token);\n            }, (error) => {\n                this.token$.next(null);\n            })\n            .catch((error) => {\n                this.token$.next(null);\n            });\n    }\n\n    public getAppId(): string {\n        return this.appId;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LocationsConfigService {\n    private activeFacilitiesEndpoint: string = null;\n    private activeUnitsEndpoint: string = null;\n\n    public getActiveFacilitiesEndpoint(): string {\n        if (!this.activeFacilitiesEndpoint) {\n            console.warn('Active facilities endpoint is not set!');\n        }\n        return this.activeFacilitiesEndpoint;\n    }\n\n    public setActiveFacilitiesEndpoint(value: string): void {\n        this.activeFacilitiesEndpoint = value;\n    }\n\n    public getActiveUnitsEndpoint(): string {\n        if (!this.activeUnitsEndpoint) {\n            console.warn('Active units endpoint is not set!');\n        }\n        return this.activeUnitsEndpoint;\n    }\n\n    public setActiveUnitsEndpoint(value: string): void {\n        this.activeUnitsEndpoint = value;\n    }\n}\n","import {Facility} from './Facility';\nimport {Unit} from './Unit';\n\nexport class Locations {\n  public facilities: Facility[] = [];\n  public units: Unit[] = [];\n}\n","import {Injectable, OnDestroy} from '@angular/core';\nimport {Unit} from '../../../model/Unit';\nimport {Facility} from '../../../model/Facility';\nimport {HttpClient} from '@angular/common/http';\nimport {LocationsConfigService} from '../config/locations-config.service';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Locations} from '../../../model/Locations';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationsApiService implements OnDestroy {\n\n  private facilitySubscription: Subscription;\n  private unitSubscription: Subscription;\n\n  public readonly facilitiesAndUnit$: Subject<{ facilities: Facility[], units: Unit[] }>;\n\n  private locations: Locations = new Locations();\n\n  constructor(\n    private http: HttpClient,\n    private locationsConfigService: LocationsConfigService) {\n    this.facilitiesAndUnit$ = new Subject<{ facilities: Facility[], units: Unit[] }>();\n  }\n\n  /**\n   * Updates facilities and units and calls the facilitiesAndUnitSubject when it completes.\n   * Will use a cache if they were previously retrieved.\n   */\n  public getFacilitiesAndUnits() {\n    if (this.locations.facilities && this.locations.facilities.length > 0 && this.locations.units && this.locations.units.length > 0) {\n      this.facilitiesAndUnit$.next(this.locations);\n    } else {\n      /** Receive all facilities and active units and set instance variables for caching */\n      this.facilitySubscription = this.getActiveFacilities().pipe(map((f) => f.facilities)).subscribe((facilities: Facility[]) => {\n        if (facilities && facilities.length > 0) {\n          const facilityIds: String[] = [];\n          for (const facility of facilities) {\n            facilityIds.push(facility.facilityID);\n          }\n          this.unitSubscription = this.getActiveUnitsForFacilities(facilityIds).pipe((map((u) => u.units))).subscribe((units: Unit[]) => {\n            // filter out facilities with no active units\n            this.locations = new Locations();\n            for (const f of facilities) {\n              let hasActiveUnits = false;\n              for (const u of units) {\n                if (u.key.facilityID === f.facilityID) {\n                  hasActiveUnits = true;\n                  break;\n                }\n              }\n              if (hasActiveUnits) {\n                this.locations.facilities.push(f);\n              }\n            }\n            this.locations.units = units;\n            this.facilitiesAndUnit$.next(this.locations);\n          }, (e) => {\n            console.log('Could not update units! Error = ' + e.message);\n          });\n        }\n      }, (e) => {\n        console.log('Could not update facilities! Error = ' + e.message);\n      });\n    }\n  }\n\n  getActiveFacilities(): Observable<{ facilities: Array<Facility> }> {\n    console.log('Getting all facilities: ' + this.locationsConfigService.getActiveFacilitiesEndpoint());\n    return this.http.get<{ facilities: Array<Facility> }>(this.locationsConfigService.getActiveFacilitiesEndpoint());\n  }\n\n  getActiveUnitsForFacilities(facilities: String[]): Observable<{ units: Array<Unit> }> {\n    console.log('Getting all active units: ' + this.locationsConfigService.getActiveUnitsEndpoint() + facilities);\n    return this.http.get<{ units: Array<Unit> }>(this.locationsConfigService.getActiveUnitsEndpoint() + facilities);\n  }\n\n  ngOnDestroy(): void {\n    if (this.facilitySubscription && !this.facilitySubscription.closed) {\n      this.facilitySubscription.unsubscribe();\n    }\n    if (this.unitSubscription && !this.unitSubscription.closed) {\n      this.unitSubscription.unsubscribe();\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsageConfigService {\n  private usageDataEndPoint: string;\n  // Default to polling every 5 seconds\n  private usagePollingInterval = 5000;\n\n  /** @param value Endpoint for sending usage data. */\n  public setUsageDataEndPoint(value: string): void {\n    this.usageDataEndPoint = value;\n  }\n\n  /** Endpoint for sending usage data. */\n  public getUsageDataEndPoint(): string {\n    if (!this.usageDataEndPoint) {\n      console.warn('usage data endpoint is not set!');\n    }\n    return this.usageDataEndPoint;\n  }\n\n  /** Number of milliseconds between polling attempts. */\n  public getUsagePollingInterval(): number {\n    return this.usagePollingInterval;\n  }\n\n  /** @param value Number of milliseconds between polling attempts. */\n  public setUsagePollingInterval(value: number): void {\n    this.usagePollingInterval = value;\n  }\n}\n","export class PatientAccess {\n  public viewedBy: string;\n  public patient: string;\n  public vipIndicator: string;\n  public vnm: string;\n  public mrn: string;\n  public admitDate: number;\n  public dischargeDate: number;\n  public facilityId: string;\n  public unitId: string;\n  public provider: string;\n  public utcCode: string;\n  public usageCode: string;\n  public viewDate: number;\n\n\n  constructor(viewedBy: string,\n              patient: string,\n              vipIndicator: string,\n              vnm: string,\n              mrn: string,\n              admitDate: number,\n              dischargeDate: number,\n              facilityId: string,\n              unitId: string,\n              provider: string,\n              utcCode: string,\n              usageCode: string,\n              viewDate: number) {\n    this.viewedBy = viewedBy;\n    this.patient = patient;\n    this.vipIndicator = vipIndicator;\n    this.vnm = vnm;\n    this.mrn = mrn;\n    this.admitDate = admitDate;\n    this.dischargeDate = dischargeDate;\n    this.facilityId = facilityId;\n    this.unitId = unitId;\n    this.provider = provider;\n    this.utcCode = utcCode;\n    this.usageCode = usageCode;\n    this.viewDate = viewDate;\n  }\n}\n","export enum UsageType {\n  Array = 'U',\n  Graph = 'G'\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, Observable, of, Subject, Subscription, timer} from 'rxjs';\nimport {TokenApiService} from '../../token/api/token-api.service';\nimport {PatientAccess} from '../../../model/PatientAccess';\nimport {UsageType} from '../../../model/UsageType';\nimport {PeraGraph} from '../../../model/PeraGraph';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {UsageConfigService} from '../config/usage-config.service';\nimport {first, map, tap} from 'rxjs/operators';\nimport * as moment_ from 'moment-timezone';\nimport {LocationsApiService} from '../../locations/api/locations-api.service';\nimport {Locations} from \"../../../model/Locations\";\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UsageApiService {\n\n    public usageDataAdded$: Subject<PatientAccess>;\n    private pollInstance$: Observable<any>;\n    private readonly graphUpdated$: Subject<PeraGraph>;\n    private usageData: Array<PatientAccess> = new Array<PatientAccess>();\n    // Visits that have been viewed in the array view are only added to usageData once per session\n    private viewedVisits: string[] = [];\n    private initialized = false;\n    private locations: Locations;\n    private locationsLoaded$: Subject<boolean> = new Subject<boolean>();\n    private locationsLoaded: boolean = false;\n    private startedLoadingLocations = false;\n\n    // The token service is necessary to get the appId\n    constructor(private http: HttpClient,\n                private jwtHelper: JwtHelperService,\n                private usageConfigService: UsageConfigService,\n                private locationService: LocationsApiService,\n                private tokenApiService: TokenApiService) {\n        this.graphUpdated$ = new Subject<PeraGraph>();\n        this.usageDataAdded$ = new Subject<PatientAccess>();\n    }\n\n    public init() {\n        if (!this.initialized) {\n            this.initialized = true;\n        }\n    }\n\n    public startUsageReportingService(): void {\n        this.pollInstance$ = timer(0, this.usageConfigService.getUsagePollingInterval());\n        this.pollInstance$.subscribe(() => {\n            if (this.usageData && this.usageData.length > 0) {\n                this.submitUsageData();\n            }\n        });\n        if (this.usageData && this.usageData.length > 0) {\n            // Submit now in case the user closes the window before the timer fires\n            this.submitUsageData();\n        }\n        // get all the locations when the service is initialized\n        this.locationService.facilitiesAndUnit$.pipe(first()).subscribe((locations: Locations) => {\n            this.locations = locations;\n            this.locationsLoaded = true;\n            this.locationsLoaded$.next(true);\n        });\n        this.locationService.getFacilitiesAndUnits();\n    }\n\n    public submitUsageData(): void {\n        console.log('Submitting usage data for app ' + this.tokenApiService.getAppId() + ' Size = ' + this.usageData.length);\n        const usageDataCopy = this.usageData.slice();\n        this.usageData = [];\n        this.http.post(this.usageConfigService.getUsageDataEndPoint(), usageDataCopy).pipe(first()).subscribe();\n    }\n\n    /**\n     * When the user logs out of the system, we need to clear the cache\n     * so that the graph views are sent if they log in again.\n     */\n    public clearUsageCache(): void {\n        this.viewedVisits = [];\n    }\n\n    /**\n     * Add usage data.\n     * @param graphToLog The information that was viewed.\n     * @param usageType The context in which the information was viewed.\n     */\n    public addUsageData(graphToLog: PeraGraph, usageType: UsageType): void {\n        // We have to replace the facility and unit IDs with the real deals\n        this.updateFacilityAndUnitIdsForGraph(graphToLog).pipe(first(), tap((graph: PeraGraph) => {\n            this.tokenApiService.token$.pipe(first()).subscribe((token: string) => {\n                if (usageType === UsageType.Array) {\n                    // Only log 1 graph view per session when viewed in the array view\n                    if (graph && this.viewedVisits.indexOf(graph.vnm) < 0) {\n                        // We only log 1 visit view of a specific type per session\n                        this.viewedVisits.push(graph.vnm);\n                        this.addUsageDataFromToken(graph, usageType, token);\n                    }\n                } else {\n                    // Always add graph views because the user clicked on a graph in the array view\n                    this.addUsageDataFromToken(graph, usageType, token);\n                }\n            });\n            this.tokenApiService.getExistingToken();\n        })).subscribe();\n        if (!this.locationsLoaded && !this.startedLoadingLocations) {\n            this.startedLoadingLocations = true;\n            this.locationService.getFacilitiesAndUnits();\n        }\n    }\n\n    /**\n     * lookup and insert the unit id and fac id of graph to log\n     * @param graph - graph to log\n     */\n    private updateFacilityAndUnitIdsForGraph(graph: PeraGraph): Observable<PeraGraph> {\n        // Create a clone of the original graph since we are updating the facility and unit\n        // to their original IDs for Usage.\n        const cloneGraph: PeraGraph = JSON.parse(JSON.stringify(graph));\n        if (this.locationsLoaded === true) {\n            return of(UsageApiService.assignUnitAndFacIdToPeraGraph(cloneGraph, this.locations));\n        } else {\n            return this.locationsLoaded$.pipe(map(() => {\n                return UsageApiService.assignUnitAndFacIdToPeraGraph(cloneGraph, this.locations);\n            }));\n        }\n    }\n\n    /**\n     * helper method for looking up fac and unit ids\n     * @param graph - graph to replace unitId and facId of\n     * @param locations - all locations available to search\n     */\n    private static assignUnitAndFacIdToPeraGraph(graph: PeraGraph, locations: Locations): PeraGraph {\n        for (const fac of locations.facilities) {\n            if (graph.facilityId === fac.displayName) {\n                graph.facilityId = fac.facilityID;\n                break;\n            }\n        }\n        for (const unit of locations.units) {\n            if (graph.unitId === unit.displayName) {\n                graph.unitId = unit.key.unitID;\n                break;\n            }\n        }\n        return graph;\n    }\n\n    private addUsageDataFromToken(graph: PeraGraph, usageType: UsageType, token: string): void {\n        const decodedToken = this.jwtHelper.decodeToken(token);\n        if (decodedToken) {\n            // Convert to a user object to send to the REST service\n            const pa: PatientAccess = new PatientAccess(\n                decodedToken['sub'], // The claims subject is the username\n                graph.patient.lname + ', ' + graph.patient.fname,\n                graph.vipIndicator,\n                graph.vnm,\n                graph.patient.medicalRecordNumber,\n                graph.admitDate,\n                graph.dischargeDate,\n                graph.facilityId,\n                graph.unitId,\n                graph.attendingProvider.lastName + ', ' + graph.attendingProvider.firstName,\n                graph.visitUnitType,\n                usageType,\n                moment.valueOf()\n            );\n            this.usageData.push(pa);\n            // This can be used for testing and for the timing of individual calls to submitUsageData()\n            this.usageDataAdded$.next(pa);\n        }\n    }\n}\n","export class Facility {\n\n  public active: number;\n  public facilityID: string;\n  public displayName: string;\n  public displayOrder: number;\n  public facilityTimezone: string;\n  public fullName: String;\n  public primaryType: String;\n  public secondaryType: String;\n\n\n    constructor(active: number, facilityID: string, displayName: string, displayOrder: number, facilityTimezone: string, fullName: String, primaryType: String, secondaryType: String) {\n        this.active = active;\n        this.facilityID = facilityID;\n        this.displayName = displayName;\n        this.displayOrder = displayOrder;\n        this.facilityTimezone = facilityTimezone;\n        this.fullName = fullName;\n        this.primaryType = primaryType;\n        this.secondaryType = secondaryType;\n    }\n}\n","import {UnitKey} from './UnitKey';\n\nexport class Unit {\n\n  public key: UnitKey;\n  public displayName: string;\n  public utcCode: any;\n\n  constructor(key: UnitKey, displayName: string, utcCode: any) {\n    this.key = key;\n    this.displayName = displayName;\n    this.utcCode = utcCode;\n  }\n}\n","export class UnitKey {\n\n    public facilityID: string;\n    public unitID: string;\n\n    constructor(fid: string, uid: string) {\n        this.facilityID = fid;\n        this.unitID = uid;\n    }\n}\n"],"names":["Injectable","timer","BehaviorSubject","switchMap","HttpClient","moment","Subject","first","JwtHelperService","Storage","map","tslib_1.__values","tap","of"],"mappings":"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"}
