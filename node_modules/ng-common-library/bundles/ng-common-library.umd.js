(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@ionic/storage'), require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('@auth0/angular-jwt'), require('rxjs/operators'), require('moment-timezone'), require('@auth0/angular-jwt/src/jwthelper.service')) :
    typeof define === 'function' && define.amd ? define('ng-common-library', ['exports', '@ionic/storage', '@angular/core', '@angular/common/http', 'rxjs', '@auth0/angular-jwt', 'rxjs/operators', 'moment-timezone', '@auth0/angular-jwt/src/jwthelper.service'], factory) :
    (factory((global['ng-common-library'] = {}),global.i4,global.ng.core,global.ng.common.http,global.rxjs,global.angularJwt,global.rxjs.operators,global.moment_,global.i2));
}(this, (function (exports,i4,i0,i1,rxjs,angularJwt,operators,moment_,i2) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BrowserService = (function () {
        function BrowserService() {
        }
        /**
         * Triggers a browser resize event - needed for the Highchart to resize properly - takes into account the browser type too
         * @return {?}
         */
        BrowserService.prototype.resize = /**
         * Triggers a browser resize event - needed for the Highchart to resize properly - takes into account the browser type too
         * @return {?}
         */
            function () {
                if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0) {
                    /** @type {?} */
                    var evt = document.createEvent('UIEvents');
                    evt.initUIEvent('resize', true, false, window, 0);
                    window.dispatchEvent(evt);
                }
                else {
                    window.dispatchEvent(new Event('resize'));
                }
            };
        BrowserService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        BrowserService.ctorParameters = function () { return []; };
        /** @nocollapse */ BrowserService.ngInjectableDef = i0.defineInjectable({ factory: function BrowserService_Factory() { return new BrowserService(); }, token: BrowserService, providedIn: "root" });
        return BrowserService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var MarkerColors = {
        Normal: 'black',
        IntensiveCare: '#F23A27',
        StepDown: 'blue',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment = moment_;
    var DateService = (function () {
        function DateService() {
        }
        /**
         * Formats the date to be displayed based on the parameters provided
         * @param {?} timeZone Each PeraGraph has one. Just pass it as a parameter.
         * @param {?} dateMil The date/time in milliseconds
         * @param {?} formatString A string param that defines the format in which the date needs to be displayed. e.g : MM/DD/YY HH:mm z
         * @return {?}
         */
        DateService.prototype.getDateFormat = /**
         * Formats the date to be displayed based on the parameters provided
         * @param {?} timeZone Each PeraGraph has one. Just pass it as a parameter.
         * @param {?} dateMil The date/time in milliseconds
         * @param {?} formatString A string param that defines the format in which the date needs to be displayed. e.g : MM/DD/YY HH:mm z
         * @return {?}
         */
            function (timeZone, dateMil, formatString) {
                return moment(dateMil).utc().tz(timeZone).format(formatString);
            };
        /**
         * Translate a date from a UTC offset.
         *
         * @param {?} date The date to translate.
         * @param {?} timezone The timezone that the date was originally created in.
         * @return {?}
         */
        DateService.prototype.translateDate = /**
         * Translate a date from a UTC offset.
         *
         * @param {?} date The date to translate.
         * @param {?} timezone The timezone that the date was originally created in.
         * @return {?}
         */
            function (date, timezone) {
                return date + ((3600000 / 60) * moment(date).tz(timezone).utcOffset());
            };
        DateService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ DateService.ngInjectableDef = i0.defineInjectable({ factory: function DateService_Factory() { return new DateService(); }, token: DateService, providedIn: "root" });
        return DateService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ChartService = (function () {
        function ChartService(dateService) {
            this.dateService = dateService;
        }
        /**
         * Create the line across the 0 axis for when RI scores go below zero in a graph.
         * @param {?} minRiScore Minimum RI score.
         * @return {?}
         */
        ChartService.prototype.createZeroAxisLine = /**
         * Create the line across the 0 axis for when RI scores go below zero in a graph.
         * @param {?} minRiScore Minimum RI score.
         * @return {?}
         */
            function (minRiScore) {
                return [
                    {
                        color: '#000000',
                        width: minRiScore < 0 ? 1 : null,
                        value: minRiScore < 0 ? 0 : null,
                        zIndex: 3
                    }
                ];
            };
        /**
         * Create an alert plot line for a graph.
         *
         * @param {?} graph
         * @return {?}
         */
        ChartService.prototype.updateAlertPlotLine = /**
         * Create an alert plot line for a graph.
         *
         * @param {?} graph
         * @return {?}
         */
            function (graph) {
                /** @type {?} */
                var plotLines = [];
                if (graph && graph.activeWarning) {
                    plotLines.push({
                        color: '#CE2029',
                        value: this.dateService.translateDate(graph.activeWarning.createdDate, graph.timeZone),
                        width: 2,
                        zIndex: 3
                    });
                }
                return plotLines;
            };
        /**
         * @param {?} minRiScore
         * @return {?}
         */
        ChartService.prototype.getMinYAxisTick = /**
         * @param {?} minRiScore
         * @return {?}
         */
            function (minRiScore) {
                return (minRiScore > 0) ? 0 : 20 * Math.floor(minRiScore / 20);
            };
        /**
         * Used in the graph to depict the unit type where a health score was recorded.
         * @param {?} unitType Type of unit to get the marker color for.
         * @return {?}
         */
        ChartService.prototype.getMarkerColor = /**
         * Used in the graph to depict the unit type where a health score was recorded.
         * @param {?} unitType Type of unit to get the marker color for.
         * @return {?}
         */
            function (unitType) {
                /** @type {?} */
                var markerColor = MarkerColors.Normal;
                switch (unitType) {
                    case 'N':
                        markerColor = MarkerColors.IntensiveCare;
                        break;
                    case 'C':
                        markerColor = MarkerColors.IntensiveCare;
                        break;
                    case 'P':
                        markerColor = MarkerColors.StepDown;
                        break;
                }
                return markerColor;
            };
        ChartService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ChartService.ctorParameters = function () {
            return [
                { type: DateService }
            ];
        };
        /** @nocollapse */ ChartService.ngInjectableDef = i0.defineInjectable({ factory: function ChartService_Factory() { return new ChartService(i0.inject(DateService)); }, token: ChartService, providedIn: "root" });
        return ChartService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var WarningService = (function () {
        function WarningService() {
        }
        /**
         * Returns the correct warning color CSS class
         *
         * @param {?} warning Warning category
         * @return {?}
         */
        WarningService.prototype.getWarningClass = /**
         * Returns the correct warning color CSS class
         *
         * @param {?} warning Warning category
         * @return {?}
         */
            function (warning) {
                /** @type {?} */
                var warningClass = null;
                switch (warning) {
                    case 'V':
                        warningClass = 'vh-warning';
                        break;
                    case 'H':
                        warningClass = 'h-warning';
                        break;
                    case 'M':
                        warningClass = 'm-warning';
                        break;
                    default:
                        break;
                }
                return warningClass;
            };
        WarningService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        WarningService.ctorParameters = function () { return []; };
        /** @nocollapse */ WarningService.ngInjectableDef = i0.defineInjectable({ factory: function WarningService_Factory() { return new WarningService(); }, token: WarningService, providedIn: "root" });
        return WarningService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FlowsheetsConfigService = (function () {
        function FlowsheetsConfigService() {
            this.singlePeraGraphFlowSheetEndPoint = null;
            this.allPeragraphFlowSheetsEndPoint = null;
            this.detailedFlowSheetColumnEndpoint = null;
            this.latestRiScoresEndPoint = null;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        FlowsheetsConfigService.prototype.setSinglePeraGraphFlowSheetEndPoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.singlePeraGraphFlowSheetEndPoint = value;
            };
        /**
         * @return {?}
         */
        FlowsheetsConfigService.prototype.getSinglePeraGraphFlowSheetEndPoint = /**
         * @return {?}
         */
            function () {
                if (!this.singlePeraGraphFlowSheetEndPoint) {
                    console.warn('Single PeraGraph flowsheet endpoint is not set!');
                }
                return this.singlePeraGraphFlowSheetEndPoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FlowsheetsConfigService.prototype.setAllPeragraphFlowSheetsEndPoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.allPeragraphFlowSheetsEndPoint = value;
            };
        /**
         * @return {?}
         */
        FlowsheetsConfigService.prototype.getAllPeragraphFlowSheetsEndPoint = /**
         * @return {?}
         */
            function () {
                if (!this.allPeragraphFlowSheetsEndPoint) {
                    console.warn('All PeraGraph flowsheets endpoint is not set!');
                }
                return this.allPeragraphFlowSheetsEndPoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FlowsheetsConfigService.prototype.setDetailedFlowSheetColumnEndpoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.detailedFlowSheetColumnEndpoint = value;
            };
        /**
         * @return {?}
         */
        FlowsheetsConfigService.prototype.getDetailedFlowSheetColumnEndpoint = /**
         * @return {?}
         */
            function () {
                if (!this.detailedFlowSheetColumnEndpoint) {
                    console.warn('Detailed flowsheet column endpoint is not set!');
                }
                return this.detailedFlowSheetColumnEndpoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FlowsheetsConfigService.prototype.setLatestRiScoresEndPoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.latestRiScoresEndPoint = value;
            };
        /**
         * @return {?}
         */
        FlowsheetsConfigService.prototype.getLatestRiScoresEndPoint = /**
         * @return {?}
         */
            function () {
                if (!this.latestRiScoresEndPoint) {
                    console.warn('Latest RI Scores endpoint is not set!');
                }
                return this.latestRiScoresEndPoint;
            };
        FlowsheetsConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ FlowsheetsConfigService.ngInjectableDef = i0.defineInjectable({ factory: function FlowsheetsConfigService_Factory() { return new FlowsheetsConfigService(); }, token: FlowsheetsConfigService, providedIn: "root" });
        return FlowsheetsConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FlowsheetsApiService = (function () {
        function FlowsheetsApiService(http, flowsheetConfigService) {
            this.http = http;
            this.flowsheetConfigService = flowsheetConfigService;
            this.pollInstance$ = rxjs.timer(0, 60000);
            this.flowSheetSubject = new rxjs.BehaviorSubject(null);
            this.riScoresSubject = new rxjs.BehaviorSubject(null);
        }
        /**
         * @return {?}
         */
        FlowsheetsApiService.prototype.getFlowSheetSubject = /**
         * @return {?}
         */
            function () {
                return this.flowSheetSubject;
            };
        /**
         * @return {?}
         */
        FlowsheetsApiService.prototype.getFlowSheetSubjectValue = /**
         * @return {?}
         */
            function () {
                return this.flowSheetSubject.value;
            };
        /**
         * @return {?}
         */
        FlowsheetsApiService.prototype.getRiScoresSubject = /**
         * @return {?}
         */
            function () {
                return this.riScoresSubject;
            };
        /**
         * @return {?}
         */
        FlowsheetsApiService.prototype.getRiScoresSubjectValue = /**
         * @return {?}
         */
            function () {
                return this.riScoresSubject.value;
            };
        /**
         * @return {?}
         */
        FlowsheetsApiService.prototype.getSinglePeraGraphFlowSheet = /**
         * @return {?}
         */
            function () {
                return this.http.get(this.flowsheetConfigService.getSinglePeraGraphFlowSheetEndPoint());
            };
        /**
         * @return {?}
         */
        FlowsheetsApiService.prototype.getDetailedFlowsheetColumn = /**
         * @return {?}
         */
            function () {
                return this.http.get(this.flowsheetConfigService.getDetailedFlowSheetColumnEndpoint());
            };
        /**
         * @return {?}
         */
        FlowsheetsApiService.prototype.getAllPeraGraphFlowSheets = /**
         * @return {?}
         */
            function () {
                return this.http.get(this.flowsheetConfigService.getAllPeragraphFlowSheetsEndPoint(), { observe: 'response' });
            };
        /**
         * @return {?}
         */
        FlowsheetsApiService.prototype.getAllRiScores = /**
         * @return {?}
         */
            function () {
                return this.http.get(this.flowsheetConfigService.getLatestRiScoresEndPoint(), { observe: 'response' });
            };
        /**
         * @return {?}
         */
        FlowsheetsApiService.prototype.getFlowSheetInterval = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Make an HTTP call on an interval
                return this.pollInstance$.pipe(operators.switchMap(function () { return _this.getAllPeraGraphFlowSheets(); }));
            };
        /**
         * @return {?}
         */
        FlowsheetsApiService.prototype.getLatestRiScoresInterval = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Make an HTTP call on an interval
                return this.pollInstance$.pipe(operators.switchMap(function () { return _this.getAllRiScores(); }));
            };
        FlowsheetsApiService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FlowsheetsApiService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: FlowsheetsConfigService }
            ];
        };
        /** @nocollapse */ FlowsheetsApiService.ngInjectableDef = i0.defineInjectable({ factory: function FlowsheetsApiService_Factory() { return new FlowsheetsApiService(i0.inject(i1.HttpClient), i0.inject(FlowsheetsConfigService)); }, token: FlowsheetsApiService, providedIn: "root" });
        return FlowsheetsApiService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PeragraphConfigService = (function () {
        function PeragraphConfigService() {
            this.singlePeraGraphEndPoint = null;
            this.allPeraGraphsEndPoint = null;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        PeragraphConfigService.prototype.setSinglePeraGraphEndPoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.singlePeraGraphEndPoint = value;
            };
        /**
         * @return {?}
         */
        PeragraphConfigService.prototype.getSinglePeraGraphEndPoint = /**
         * @return {?}
         */
            function () {
                if (!this.singlePeraGraphEndPoint) {
                    console.warn('Single PeraGraph endpoint is not set!');
                }
                return this.singlePeraGraphEndPoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        PeragraphConfigService.prototype.setAllPeraGraphsEndPoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.allPeraGraphsEndPoint = value;
            };
        /**
         * @return {?}
         */
        PeragraphConfigService.prototype.getAllPeraGraphsEndPoint = /**
         * @return {?}
         */
            function () {
                if (!this.allPeraGraphsEndPoint) {
                    console.warn('All PeraGraph endpoint is not set!');
                }
                return this.allPeraGraphsEndPoint;
            };
        PeragraphConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ PeragraphConfigService.ngInjectableDef = i0.defineInjectable({ factory: function PeragraphConfigService_Factory() { return new PeragraphConfigService(); }, token: PeragraphConfigService, providedIn: "root" });
        return PeragraphConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PeragraphApiService = (function () {
        function PeragraphApiService(http, peragraphConfigService) {
            this.http = http;
            this.peragraphConfigService = peragraphConfigService;
            this.pollInstance$ = rxjs.timer(0, 60000);
            this._peraGraphSubject = new rxjs.BehaviorSubject([]);
        }
        /**
         * @return {?}
         */
        PeragraphApiService.prototype.getPeraGraphSubject = /**
         * @return {?}
         */
            function () {
                return this._peraGraphSubject;
            };
        /**
         * @return {?}
         */
        PeragraphApiService.prototype.getSinglePeragraph = /**
         * @return {?}
         */
            function () {
                return this.http.get(this.peragraphConfigService.getSinglePeraGraphEndPoint());
            };
        /**
         * @return {?}
         */
        PeragraphApiService.prototype.getAllPeragraphs = /**
         * @return {?}
         */
            function () {
                return this.http.get(this.peragraphConfigService.getAllPeraGraphsEndPoint());
            };
        /**
         * @return {?}
         */
        PeragraphApiService.prototype.getPeraGraphInterval = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Make an HTTP call on an interval
                return this.pollInstance$.pipe(operators.switchMap(function () { return _this.getAllPeragraphs(); }));
                /*
                         TODO Have a different method with the filtering criteria, using the same subject,
                         and call it when the filter changes. Then we push the change.
                
                         Do the same thing with sorting.
                         */
            };
        PeragraphApiService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        PeragraphApiService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: PeragraphConfigService }
            ];
        };
        /** @nocollapse */ PeragraphApiService.ngInjectableDef = i0.defineInjectable({ factory: function PeragraphApiService_Factory() { return new PeragraphApiService(i0.inject(i1.HttpClient), i0.inject(PeragraphConfigService)); }, token: PeragraphApiService, providedIn: "root" });
        return PeragraphApiService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$1 = moment_;
    var PatientService = (function () {
        function PatientService(dateService) {
            this.dateService = dateService;
        }
        /**
         * Returns the patient age in years, months using the patient DOB
         * @param {?} graph
         * @return {?}
         */
        PatientService.prototype.getPatientAge = /**
         * Returns the patient age in years, months using the patient DOB
         * @param {?} graph
         * @return {?}
         */
            function (graph) {
                if (graph && graph.patient && graph.patient.dob) {
                    /** @type {?} */
                    var daysOld = Math.floor(Math.round((this.dateService.translateDate(moment$1.utc().valueOf(), graph.timeZone) - graph.patient.dob) / 86400000));
                    /** @type {?} */
                    var d = 'd';
                    /** @type {?} */
                    var w = 'w';
                    /** @type {?} */
                    var m = 'm';
                    /** @type {?} */
                    var y = 'y';
                    if (daysOld < 7) {
                        return Math.floor(daysOld) + d;
                    }
                    else if (daysOld >= 7 && daysOld < 31) {
                        return Math.floor(daysOld / 7) + w + Math.floor(daysOld % 7) + d;
                    }
                    else if (daysOld >= 31 && daysOld < 365) {
                        return Math.floor(daysOld / 29.7) + m + Math.floor((daysOld % 29.7) / 7) + w;
                    }
                    else if (daysOld >= 365 && daysOld < 730) {
                        return Math.floor(daysOld / 365) + y + Math.floor((daysOld % 365) / 29.7) + m;
                    }
                    else {
                        return Math.floor(daysOld / 365) + y;
                    }
                }
                else {
                    return ' ';
                }
            };
        PatientService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        PatientService.ctorParameters = function () {
            return [
                { type: DateService }
            ];
        };
        /** @nocollapse */ PatientService.ngInjectableDef = i0.defineInjectable({ factory: function PatientService_Factory() { return new PatientService(i0.inject(DateService)); }, token: PatientService, providedIn: "root" });
        return PatientService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CommonService = (function () {
        function CommonService() {
        }
        /**
         * Parse any primitive value (string, number, boolean, undefined or null) to a boolean true or false.
         * @param {?=} value Value to parse.
         * @return {?}
         */
        CommonService.prototype.primitiveToBoolean = /**
         * Parse any primitive value (string, number, boolean, undefined or null) to a boolean true or false.
         * @param {?=} value Value to parse.
         * @return {?}
         */
            function (value) {
                if (value == null) {
                    return false;
                }
                if (value === 'true' || value === 'True' || value === 'TRUE') {
                    return true;
                }
                return typeof value === 'string'
                    ? !!+value // we parse string to number first
                    : !!value;
            };
        CommonService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ CommonService.ngInjectableDef = i0.defineInjectable({ factory: function CommonService_Factory() { return new CommonService(); }, token: CommonService, providedIn: "root" });
        return CommonService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TranslationsService = (function () {
        function TranslationsService() {
            this.translations = [];
            this.keyTranslations = {
                'ACTIVE': 'perahealth.translation.ACTIVE',
                'DATA_UPDATED': 'perahealth.translation.DATA_UPDATED',
                'ELAPSED': 'perahealth.translation.ELAPSED',
                'OVERRIDDEN': 'perahealth.translation.OVERRIDDEN',
                'RESUMED': 'perahealth.translation.RESUMED',
                'V': 'perahealth.translation.VH',
                'H': 'perahealth.translation.H',
                'M': 'perahealth.translation.M',
                'N': 'perahealth.translation.N'
            };
        }
        /**
         * @param {?} key
         * @return {?}
         */
        TranslationsService.prototype.getTranslation = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return (key) ? this.translations[key] : '';
            };
        /**
         * @param {?} key
         * @return {?}
         */
        TranslationsService.prototype.getKeyTranslation = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return (key) ? this.translations[this.keyTranslations[key]] : '';
            };
        TranslationsService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TranslationsService.ctorParameters = function () { return []; };
        /** @nocollapse */ TranslationsService.ngInjectableDef = i0.defineInjectable({ factory: function TranslationsService_Factory() { return new TranslationsService(); }, token: TranslationsService, providedIn: "root" });
        return TranslationsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TranslationsConfigService = (function () {
        function TranslationsConfigService() {
            this.translationsEndPoint = null;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        TranslationsConfigService.prototype.setTranslationsEndPoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.translationsEndPoint = value;
            };
        /**
         * @return {?}
         */
        TranslationsConfigService.prototype.getTranslationsEndpoint = /**
         * @return {?}
         */
            function () {
                if (!this.translationsEndPoint) {
                    console.warn('Translations endpoint is not set!');
                }
                return this.translationsEndPoint;
            };
        TranslationsConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ TranslationsConfigService.ngInjectableDef = i0.defineInjectable({ factory: function TranslationsConfigService_Factory() { return new TranslationsConfigService(); }, token: TranslationsConfigService, providedIn: "root" });
        return TranslationsConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TranslationsApiService = (function () {
        function TranslationsApiService(http, translationsConfigService) {
            this.http = http;
            this.translationsConfigService = translationsConfigService;
        }
        /**
         * @return {?}
         */
        TranslationsApiService.prototype.getAllTranslations = /**
         * @return {?}
         */
            function () {
                return this.http.get(this.translationsConfigService.getTranslationsEndpoint());
            };
        TranslationsApiService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TranslationsApiService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: TranslationsConfigService }
            ];
        };
        /** @nocollapse */ TranslationsApiService.ngInjectableDef = i0.defineInjectable({ factory: function TranslationsApiService_Factory() { return new TranslationsApiService(i0.inject(i1.HttpClient), i0.inject(TranslationsConfigService)); }, token: TranslationsApiService, providedIn: "root" });
        return TranslationsApiService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DiagnosisConfigService = (function () {
        function DiagnosisConfigService() {
            this.primaryDiagnosesEndpoint = null;
        }
        /**
         * @return {?}
         */
        DiagnosisConfigService.prototype.getPrimaryDiagnosesEndpoint = /**
         * @return {?}
         */
            function () {
                if (!this.primaryDiagnosesEndpoint) {
                    console.warn('Primary diagnoses endpoint is not set!');
                }
                return this.primaryDiagnosesEndpoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DiagnosisConfigService.prototype.setPrimaryDiagnosesEndpoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.primaryDiagnosesEndpoint = value;
            };
        DiagnosisConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ DiagnosisConfigService.ngInjectableDef = i0.defineInjectable({ factory: function DiagnosisConfigService_Factory() { return new DiagnosisConfigService(); }, token: DiagnosisConfigService, providedIn: "root" });
        return DiagnosisConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DiagnosisApiService = (function () {
        function DiagnosisApiService(http, diagnosisConfigService) {
            this.http = http;
            this.diagnosisConfigService = diagnosisConfigService;
            this.pollInstance$ = rxjs.timer(0, 60000);
            this.diagnosesSubject = new rxjs.BehaviorSubject(null);
        }
        /**
         * @return {?}
         */
        DiagnosisApiService.prototype.getDiagnosesSubject = /**
         * @return {?}
         */
            function () {
                return this.diagnosesSubject;
            };
        /**
         * @return {?}
         */
        DiagnosisApiService.prototype.getDiagnosesSubjectValue = /**
         * @return {?}
         */
            function () {
                return this.diagnosesSubject.value;
            };
        /**
         * @return {?}
         */
        DiagnosisApiService.prototype.getAllDiagnoses = /**
         * @return {?}
         */
            function () {
                return this.http.get(this.diagnosisConfigService.getPrimaryDiagnosesEndpoint(), { observe: 'response' });
            };
        /**
         * @return {?}
         */
        DiagnosisApiService.prototype.getPrimaryDiagnosesInterval = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Make an HTTP call on an interval
                return this.pollInstance$.pipe(operators.switchMap(function () { return _this.getAllDiagnoses(); }));
            };
        DiagnosisApiService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        DiagnosisApiService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: DiagnosisConfigService }
            ];
        };
        /** @nocollapse */ DiagnosisApiService.ngInjectableDef = i0.defineInjectable({ factory: function DiagnosisApiService_Factory() { return new DiagnosisApiService(i0.inject(i1.HttpClient), i0.inject(DiagnosisConfigService)); }, token: DiagnosisApiService, providedIn: "root" });
        return DiagnosisApiService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TokenConfigService = (function () {
        function TokenConfigService() {
            this.checkTokenEndPoint = null;
            this.refreshTokenEndPoint = null;
            this.getTokenEndPoint = null;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        TokenConfigService.prototype.setCheckTokenEndPoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.checkTokenEndPoint = value;
            };
        /**
         * @return {?}
         */
        TokenConfigService.prototype.getCheckTokenEndPoint = /**
         * @return {?}
         */
            function () {
                if (!this.checkTokenEndPoint) {
                    console.warn('Check token endpoint is not set!');
                }
                return this.checkTokenEndPoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        TokenConfigService.prototype.setRefreshTokenEndPoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.refreshTokenEndPoint = value;
            };
        /**
         * @return {?}
         */
        TokenConfigService.prototype.getRefreshTokenEndPoint = /**
         * @return {?}
         */
            function () {
                if (!this.refreshTokenEndPoint) {
                    console.warn('Refresh token endpoint is not set!');
                }
                return this.refreshTokenEndPoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        TokenConfigService.prototype.setGetTokenEndPoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.getTokenEndPoint = value;
            };
        /**
         * @return {?}
         */
        TokenConfigService.prototype.getGetTokenEndPoint = /**
         * @return {?}
         */
            function () {
                if (!this.getTokenEndPoint) {
                    console.warn('Get token endpoint is not set!');
                }
                return this.getTokenEndPoint;
            };
        TokenConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ TokenConfigService.ngInjectableDef = i0.defineInjectable({ factory: function TokenConfigService_Factory() { return new TokenConfigService(); }, token: TokenConfigService, providedIn: "root" });
        return TokenConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var User = (function () {
        function User() {
            this.username = null;
            this.password = null;
            this.firstname = null;
            this.lastname = null;
            this.appid = null;
            this.roles = null;
        }
        return User;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TokenApiService = (function () {
        function TokenApiService(http, jwtHelper, config, storage) {
            this.http = http;
            this.jwtHelper = jwtHelper;
            this.config = config;
            this.storage = storage;
            this.jwtTokenName = 'jwt_token';
            this.appId = null;
            this.deviceToken = null;
            this.token$ = new rxjs.Subject();
        }
        /**
         * Check the current token.
         * @return {?}
         */
        TokenApiService.prototype.checkToken = /**
         * Check the current token.
         * @return {?}
         */
            function () {
                var _this = this;
                this.token$.pipe(operators.first()).subscribe(function (token) {
                    /** @type {?} */
                    var decodedToken = _this.jwtHelper.decodeToken(token);
                    if (decodedToken) {
                        /** @type {?} */
                        var user_1 = new User();
                        user_1.username = decodedToken['sub'];
                        user_1.roles = decodedToken['roles'];
                        user_1.firstname = decodedToken['firstname'];
                        user_1.lastname = decodedToken['lastname'];
                        user_1.appid = decodedToken['appid'];
                        // console.log('Existing, valid client side token found. Checking the server.');
                        // console.log('Existing, valid client side token found. Checking the server.');
                        _this.http.post(_this.config.getCheckTokenEndPoint(), user_1).pipe(operators.first()).subscribe(function () {
                            // If we land in here, then the token interceptor on the server validated the token
                            // If we land in here, then the token interceptor on the server validated the token
                            _this.appId = user_1.appid;
                            // console.log('Valid token!');
                            // console.log('Valid token!');
                            _this.token$.next(token);
                        }, function (e) {
                            _this.appId = null;
                            // console.log('Invalid token!');
                            // console.log('Invalid token!');
                            _this.token$.next(null);
                        });
                    }
                    else {
                        // console.log('Removing invalid token from storage.');
                        // console.log('Removing invalid token from storage.');
                        _this.clearToken();
                        _this.token$.next(null);
                    }
                });
                this.getExistingToken();
            };
        /**
         * Refresh the token for the given user.
         *
         * @param {?} user User for which to refresh token.
         * @return {?}
         */
        TokenApiService.prototype.refreshToken = /**
         * Refresh the token for the given user.
         *
         * @param {?} user User for which to refresh token.
         * @return {?}
         */
            function (user) {
                var _this = this;
                if (!user || !user.username) ;
                else {
                    setTimeout(function () {
                        _this.token$.pipe(operators.first()).subscribe(function (token) {
                            // Check whether or not the token is valid according to the server
                            // Check whether or not the token is valid according to the server
                            _this.http.post(_this.config.getRefreshTokenEndPoint(), user, { responseType: 'text' }).pipe(operators.first()).subscribe(function (token) {
                                // console.log('Successfully retrieved updated token [' + token + ']');
                                // console.log('Successfully retrieved updated token [' + token + ']');
                                _this.storage.set(_this.jwtTokenName, token);
                            }, function () {
                                // The server thinks the token is not valid (expired, the secret key changed, etc)
                                // console.log('Invalid token!');
                                // The server thinks the token is not valid (expired, the secret key changed, etc)
                                // console.log('Invalid token!');
                                _this.clearToken();
                                _this.token$.next(null);
                            });
                        });
                        _this.getExistingToken();
                    }, 100);
                }
            };
        /**
         * @param {?} user
         * @return {?}
         */
        TokenApiService.prototype.getToken = /**
         * @param {?} user
         * @return {?}
         */
            function (user) {
                var _this = this;
                // Check whether or not the token is valid according to the server
                this.http.post(this.config.getGetTokenEndPoint(), user, { responseType: 'text' }).pipe(operators.first()).subscribe(function (token) {
                    // console.log('Successfully retrieved new token: [' + token + ']');
                    // console.log('Successfully retrieved new token: [' + token + ']');
                    _this.appId = user.appid;
                    _this.storage.set(_this.jwtTokenName, token)
                        .then(function () {
                        // console.log('New token added to storage. [' + token + ']')
                        // console.log('New token added to storage. [' + token + ']')
                        _this.token$.next(token);
                    }, function () {
                        // console.log('Could not store new token!');
                        // console.log('Could not store new token!');
                        _this.token$.next(null);
                    });
                }, function (e) {
                    // The server thinks the token is not valid (expired, the secret key changed, etc)
                    // console.log('Could not retrieve new token!');
                    // The server thinks the token is not valid (expired, the secret key changed, etc)
                    // console.log('Could not retrieve new token!');
                    _this.token$.next(null);
                });
            };
        /**
         * @return {?}
         */
        TokenApiService.prototype.clearToken = /**
         * @return {?}
         */
            function () {
                this.storage.remove(this.jwtTokenName)
                    .then(function (jwt) {
                    // console.log('JWT removed from storage');
                }, function (reason) {
                    // console.log('JWT could not be removed from storage. Reason = ' + reason);
                });
            };
        /**
         * @return {?}
         */
        TokenApiService.prototype.getExistingToken = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.storage.get(this.jwtTokenName)
                    .then(function (token) {
                    _this.token$.next(token);
                }, function (error) {
                    _this.token$.next(null);
                })
                    .catch(function (error) {
                    _this.token$.next(null);
                });
            };
        /**
         * @return {?}
         */
        TokenApiService.prototype.getAppId = /**
         * @return {?}
         */
            function () {
                return this.appId;
            };
        TokenApiService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TokenApiService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: angularJwt.JwtHelperService },
                { type: TokenConfigService },
                { type: i4.Storage }
            ];
        };
        /** @nocollapse */ TokenApiService.ngInjectableDef = i0.defineInjectable({ factory: function TokenApiService_Factory() { return new TokenApiService(i0.inject(i1.HttpClient), i0.inject(i2.JwtHelperService), i0.inject(TokenConfigService), i0.inject(i4.Storage)); }, token: TokenApiService, providedIn: "root" });
        return TokenApiService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LocationsConfigService = (function () {
        function LocationsConfigService() {
            this.activeFacilitiesEndpoint = null;
            this.activeUnitsEndpoint = null;
        }
        /**
         * @return {?}
         */
        LocationsConfigService.prototype.getActiveFacilitiesEndpoint = /**
         * @return {?}
         */
            function () {
                if (!this.activeFacilitiesEndpoint) {
                    console.warn('Active facilities endpoint is not set!');
                }
                return this.activeFacilitiesEndpoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        LocationsConfigService.prototype.setActiveFacilitiesEndpoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.activeFacilitiesEndpoint = value;
            };
        /**
         * @return {?}
         */
        LocationsConfigService.prototype.getActiveUnitsEndpoint = /**
         * @return {?}
         */
            function () {
                if (!this.activeUnitsEndpoint) {
                    console.warn('Active units endpoint is not set!');
                }
                return this.activeUnitsEndpoint;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        LocationsConfigService.prototype.setActiveUnitsEndpoint = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.activeUnitsEndpoint = value;
            };
        LocationsConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ LocationsConfigService.ngInjectableDef = i0.defineInjectable({ factory: function LocationsConfigService_Factory() { return new LocationsConfigService(); }, token: LocationsConfigService, providedIn: "root" });
        return LocationsConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Locations = (function () {
        function Locations() {
            this.facilities = [];
            this.units = [];
        }
        return Locations;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LocationsApiService = (function () {
        function LocationsApiService(http, locationsConfigService) {
            this.http = http;
            this.locationsConfigService = locationsConfigService;
            this.locations = new Locations();
            this.facilitiesAndUnit$ = new rxjs.Subject();
        }
        /**
         * Updates facilities and units and calls the facilitiesAndUnitSubject when it completes.
         * Will use a cache if they were previously retrieved.
         * @return {?}
         */
        LocationsApiService.prototype.getFacilitiesAndUnits = /**
         * Updates facilities and units and calls the facilitiesAndUnitSubject when it completes.
         * Will use a cache if they were previously retrieved.
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.locations.facilities && this.locations.facilities.length > 0 && this.locations.units && this.locations.units.length > 0) {
                    this.facilitiesAndUnit$.next(this.locations);
                }
                else {
                    /** Receive all facilities and active units and set instance variables for caching */
                    this.facilitySubscription = this.getActiveFacilities().pipe(operators.map(function (f) { return f.facilities; })).subscribe(function (facilities) {
                        if (facilities && facilities.length > 0) {
                            /** @type {?} */
                            var facilityIds = [];
                            try {
                                for (var facilities_1 = __values(facilities), facilities_1_1 = facilities_1.next(); !facilities_1_1.done; facilities_1_1 = facilities_1.next()) {
                                    var facility = facilities_1_1.value;
                                    facilityIds.push(facility.facilityID);
                                }
                            }
                            catch (e_1_1) {
                                e_1 = { error: e_1_1 };
                            }
                            finally {
                                try {
                                    if (facilities_1_1 && !facilities_1_1.done && (_a = facilities_1.return))
                                        _a.call(facilities_1);
                                }
                                finally {
                                    if (e_1)
                                        throw e_1.error;
                                }
                            }
                            _this.unitSubscription = _this.getActiveUnitsForFacilities(facilityIds).pipe((operators.map(function (u) { return u.units; }))).subscribe(function (units) {
                                // filter out facilities with no active units
                                // filter out facilities with no active units
                                _this.locations = new Locations();
                                try {
                                    for (var facilities_2 = __values(facilities), facilities_2_1 = facilities_2.next(); !facilities_2_1.done; facilities_2_1 = facilities_2.next()) {
                                        var f = facilities_2_1.value;
                                        /** @type {?} */
                                        var hasActiveUnits = false;
                                        try {
                                            for (var units_1 = __values(units), units_1_1 = units_1.next(); !units_1_1.done; units_1_1 = units_1.next()) {
                                                var u = units_1_1.value;
                                                if (u.key.facilityID === f.facilityID) {
                                                    hasActiveUnits = true;
                                                    break;
                                                }
                                            }
                                        }
                                        catch (e_2_1) {
                                            e_2 = { error: e_2_1 };
                                        }
                                        finally {
                                            try {
                                                if (units_1_1 && !units_1_1.done && (_a = units_1.return))
                                                    _a.call(units_1);
                                            }
                                            finally {
                                                if (e_2)
                                                    throw e_2.error;
                                            }
                                        }
                                        if (hasActiveUnits) {
                                            _this.locations.facilities.push(f);
                                        }
                                    }
                                }
                                catch (e_3_1) {
                                    e_3 = { error: e_3_1 };
                                }
                                finally {
                                    try {
                                        if (facilities_2_1 && !facilities_2_1.done && (_b = facilities_2.return))
                                            _b.call(facilities_2);
                                    }
                                    finally {
                                        if (e_3)
                                            throw e_3.error;
                                    }
                                }
                                _this.locations.units = units;
                                _this.facilitiesAndUnit$.next(_this.locations);
                                var e_3, _b, e_2, _a;
                            }, function (e) {
                                console.log('Could not update units! Error = ' + e.message);
                            });
                        }
                        var e_1, _a;
                    }, function (e) {
                        console.log('Could not update facilities! Error = ' + e.message);
                    });
                }
            };
        /**
         * @return {?}
         */
        LocationsApiService.prototype.getActiveFacilities = /**
         * @return {?}
         */
            function () {
                console.log('Getting all facilities: ' + this.locationsConfigService.getActiveFacilitiesEndpoint());
                return this.http.get(this.locationsConfigService.getActiveFacilitiesEndpoint());
            };
        /**
         * @param {?} facilities
         * @return {?}
         */
        LocationsApiService.prototype.getActiveUnitsForFacilities = /**
         * @param {?} facilities
         * @return {?}
         */
            function (facilities) {
                console.log('Getting all active units: ' + this.locationsConfigService.getActiveUnitsEndpoint() + facilities);
                return this.http.get(this.locationsConfigService.getActiveUnitsEndpoint() + facilities);
            };
        /**
         * @return {?}
         */
        LocationsApiService.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.facilitySubscription && !this.facilitySubscription.closed) {
                    this.facilitySubscription.unsubscribe();
                }
                if (this.unitSubscription && !this.unitSubscription.closed) {
                    this.unitSubscription.unsubscribe();
                }
            };
        LocationsApiService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LocationsApiService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: LocationsConfigService }
            ];
        };
        /** @nocollapse */ LocationsApiService.ngInjectableDef = i0.defineInjectable({ factory: function LocationsApiService_Factory() { return new LocationsApiService(i0.inject(i1.HttpClient), i0.inject(LocationsConfigService)); }, token: LocationsApiService, providedIn: "root" });
        return LocationsApiService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var UsageConfigService = (function () {
        function UsageConfigService() {
            this.usagePollingInterval = 5000;
        }
        /**
         * @param {?} value Endpoint for sending usage data.
         * @return {?}
         */
        UsageConfigService.prototype.setUsageDataEndPoint = /**
         * @param {?} value Endpoint for sending usage data.
         * @return {?}
         */
            function (value) {
                this.usageDataEndPoint = value;
            };
        /**
         * Endpoint for sending usage data.
         * @return {?}
         */
        UsageConfigService.prototype.getUsageDataEndPoint = /**
         * Endpoint for sending usage data.
         * @return {?}
         */
            function () {
                if (!this.usageDataEndPoint) {
                    console.warn('usage data endpoint is not set!');
                }
                return this.usageDataEndPoint;
            };
        /**
         * Number of milliseconds between polling attempts.
         * @return {?}
         */
        UsageConfigService.prototype.getUsagePollingInterval = /**
         * Number of milliseconds between polling attempts.
         * @return {?}
         */
            function () {
                return this.usagePollingInterval;
            };
        /**
         * @param {?} value Number of milliseconds between polling attempts.
         * @return {?}
         */
        UsageConfigService.prototype.setUsagePollingInterval = /**
         * @param {?} value Number of milliseconds between polling attempts.
         * @return {?}
         */
            function (value) {
                this.usagePollingInterval = value;
            };
        UsageConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ UsageConfigService.ngInjectableDef = i0.defineInjectable({ factory: function UsageConfigService_Factory() { return new UsageConfigService(); }, token: UsageConfigService, providedIn: "root" });
        return UsageConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PatientAccess = (function () {
        function PatientAccess(viewedBy, patient, vipIndicator, vnm, mrn, admitDate, dischargeDate, facilityId, unitId, provider, utcCode, usageCode, viewDate) {
            this.viewedBy = viewedBy;
            this.patient = patient;
            this.vipIndicator = vipIndicator;
            this.vnm = vnm;
            this.mrn = mrn;
            this.admitDate = admitDate;
            this.dischargeDate = dischargeDate;
            this.facilityId = facilityId;
            this.unitId = unitId;
            this.provider = provider;
            this.utcCode = utcCode;
            this.usageCode = usageCode;
            this.viewDate = viewDate;
        }
        return PatientAccess;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var UsageType = {
        Array: 'U',
        Graph: 'G',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$2 = moment_;
    var UsageApiService = (function () {
        // The token service is necessary to get the appId
        function UsageApiService(http, jwtHelper, usageConfigService, locationService, tokenApiService) {
            this.http = http;
            this.jwtHelper = jwtHelper;
            this.usageConfigService = usageConfigService;
            this.locationService = locationService;
            this.tokenApiService = tokenApiService;
            this.usageData = new Array();
            this.viewedVisits = [];
            this.initialized = false;
            this.locationsLoaded$ = new rxjs.Subject();
            this.locationsLoaded = false;
            this.startedLoadingLocations = false;
            this.graphUpdated$ = new rxjs.Subject();
            this.usageDataAdded$ = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        UsageApiService.prototype.init = /**
         * @return {?}
         */
            function () {
                if (!this.initialized) {
                    this.initialized = true;
                }
            };
        /**
         * @return {?}
         */
        UsageApiService.prototype.startUsageReportingService = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.pollInstance$ = rxjs.timer(0, this.usageConfigService.getUsagePollingInterval());
                this.pollInstance$.subscribe(function () {
                    if (_this.usageData && _this.usageData.length > 0) {
                        _this.submitUsageData();
                    }
                });
                if (this.usageData && this.usageData.length > 0) {
                    // Submit now in case the user closes the window before the timer fires
                    this.submitUsageData();
                }
                // get all the locations when the service is initialized
                this.locationService.facilitiesAndUnit$.pipe(operators.first()).subscribe(function (locations) {
                    _this.locations = locations;
                    _this.locationsLoaded = true;
                    _this.locationsLoaded$.next(true);
                });
                this.locationService.getFacilitiesAndUnits();
            };
        /**
         * @return {?}
         */
        UsageApiService.prototype.submitUsageData = /**
         * @return {?}
         */
            function () {
                console.log('Submitting usage data for app ' + this.tokenApiService.getAppId() + ' Size = ' + this.usageData.length);
                /** @type {?} */
                var usageDataCopy = this.usageData.slice();
                this.usageData = [];
                this.http.post(this.usageConfigService.getUsageDataEndPoint(), usageDataCopy).pipe(operators.first()).subscribe();
            };
        /**
         * When the user logs out of the system, we need to clear the cache
         * so that the graph views are sent if they log in again.
         * @return {?}
         */
        UsageApiService.prototype.clearUsageCache = /**
         * When the user logs out of the system, we need to clear the cache
         * so that the graph views are sent if they log in again.
         * @return {?}
         */
            function () {
                this.viewedVisits = [];
            };
        /**
         * Add usage data.
         * @param {?} graphToLog The information that was viewed.
         * @param {?} usageType The context in which the information was viewed.
         * @return {?}
         */
        UsageApiService.prototype.addUsageData = /**
         * Add usage data.
         * @param {?} graphToLog The information that was viewed.
         * @param {?} usageType The context in which the information was viewed.
         * @return {?}
         */
            function (graphToLog, usageType) {
                var _this = this;
                // We have to replace the facility and unit IDs with the real deals
                this.updateFacilityAndUnitIdsForGraph(graphToLog).pipe(operators.first(), operators.tap(function (graph) {
                    _this.tokenApiService.token$.pipe(operators.first()).subscribe(function (token) {
                        if (usageType === UsageType.Array) {
                            // Only log 1 graph view per session when viewed in the array view
                            if (graph && _this.viewedVisits.indexOf(graph.vnm) < 0) {
                                // We only log 1 visit view of a specific type per session
                                // We only log 1 visit view of a specific type per session
                                _this.viewedVisits.push(graph.vnm);
                                _this.addUsageDataFromToken(graph, usageType, token);
                            }
                        }
                        else {
                            // Always add graph views because the user clicked on a graph in the array view
                            // Always add graph views because the user clicked on a graph in the array view
                            _this.addUsageDataFromToken(graph, usageType, token);
                        }
                    });
                    _this.tokenApiService.getExistingToken();
                })).subscribe();
                if (!this.locationsLoaded && !this.startedLoadingLocations) {
                    this.startedLoadingLocations = true;
                    this.locationService.getFacilitiesAndUnits();
                }
            };
        /**
         * lookup and insert the unit id and fac id of graph to log
         * @param {?} graph - graph to log
         * @return {?}
         */
        UsageApiService.prototype.updateFacilityAndUnitIdsForGraph = /**
         * lookup and insert the unit id and fac id of graph to log
         * @param {?} graph - graph to log
         * @return {?}
         */
            function (graph) {
                var _this = this;
                /** @type {?} */
                var cloneGraph = JSON.parse(JSON.stringify(graph));
                if (this.locationsLoaded === true) {
                    return rxjs.of(UsageApiService.assignUnitAndFacIdToPeraGraph(cloneGraph, this.locations));
                }
                else {
                    return this.locationsLoaded$.pipe(operators.map(function () {
                        return UsageApiService.assignUnitAndFacIdToPeraGraph(cloneGraph, _this.locations);
                    }));
                }
            };
        /**
         * helper method for looking up fac and unit ids
         * @param {?} graph - graph to replace unitId and facId of
         * @param {?} locations - all locations available to search
         * @return {?}
         */
        UsageApiService.assignUnitAndFacIdToPeraGraph = /**
         * helper method for looking up fac and unit ids
         * @param {?} graph - graph to replace unitId and facId of
         * @param {?} locations - all locations available to search
         * @return {?}
         */
            function (graph, locations) {
                try {
                    for (var _a = __values(locations.facilities), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var fac = _b.value;
                        if (graph.facilityId === fac.displayName) {
                            graph.facilityId = fac.facilityID;
                            break;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return))
                            _c.call(_a);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                try {
                    for (var _d = __values(locations.units), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var unit = _e.value;
                        if (graph.unitId === unit.displayName) {
                            graph.unitId = unit.key.unitID;
                            break;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_e && !_e.done && (_f = _d.return))
                            _f.call(_d);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return graph;
                var e_1, _c, e_2, _f;
            };
        /**
         * @param {?} graph
         * @param {?} usageType
         * @param {?} token
         * @return {?}
         */
        UsageApiService.prototype.addUsageDataFromToken = /**
         * @param {?} graph
         * @param {?} usageType
         * @param {?} token
         * @return {?}
         */
            function (graph, usageType, token) {
                /** @type {?} */
                var decodedToken = this.jwtHelper.decodeToken(token);
                if (decodedToken) {
                    /** @type {?} */
                    var pa = new PatientAccess(decodedToken['sub'], // The claims subject is the username
                    // The claims subject is the username
                    graph.patient.lname + ', ' + graph.patient.fname, graph.vipIndicator, graph.vnm, graph.patient.medicalRecordNumber, graph.admitDate, graph.dischargeDate, graph.facilityId, graph.unitId, graph.attendingProvider.lastName + ', ' + graph.attendingProvider.firstName, graph.visitUnitType, usageType, moment$2.valueOf());
                    this.usageData.push(pa);
                    // This can be used for testing and for the timing of individual calls to submitUsageData()
                    this.usageDataAdded$.next(pa);
                }
            };
        UsageApiService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        UsageApiService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: angularJwt.JwtHelperService },
                { type: UsageConfigService },
                { type: LocationsApiService },
                { type: TokenApiService }
            ];
        };
        /** @nocollapse */ UsageApiService.ngInjectableDef = i0.defineInjectable({ factory: function UsageApiService_Factory() { return new UsageApiService(i0.inject(i1.HttpClient), i0.inject(i2.JwtHelperService), i0.inject(UsageConfigService), i0.inject(LocationsApiService), i0.inject(TokenApiService)); }, token: UsageApiService, providedIn: "root" });
        return UsageApiService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Facility = (function () {
        function Facility(active, facilityID, displayName, displayOrder, facilityTimezone, fullName, primaryType, secondaryType) {
            this.active = active;
            this.facilityID = facilityID;
            this.displayName = displayName;
            this.displayOrder = displayOrder;
            this.facilityTimezone = facilityTimezone;
            this.fullName = fullName;
            this.primaryType = primaryType;
            this.secondaryType = secondaryType;
        }
        return Facility;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Unit = (function () {
        function Unit(key, displayName, utcCode) {
            this.key = key;
            this.displayName = displayName;
            this.utcCode = utcCode;
        }
        return Unit;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var UnitKey = (function () {
        function UnitKey(fid, uid) {
            this.facilityID = fid;
            this.unitID = uid;
        }
        return UnitKey;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.BrowserService = BrowserService;
    exports.ChartService = ChartService;
    exports.DateService = DateService;
    exports.WarningService = WarningService;
    exports.FlowsheetsApiService = FlowsheetsApiService;
    exports.FlowsheetsConfigService = FlowsheetsConfigService;
    exports.PeragraphApiService = PeragraphApiService;
    exports.PeragraphConfigService = PeragraphConfigService;
    exports.PatientService = PatientService;
    exports.CommonService = CommonService;
    exports.TranslationsService = TranslationsService;
    exports.TranslationsApiService = TranslationsApiService;
    exports.TranslationsConfigService = TranslationsConfigService;
    exports.DiagnosisApiService = DiagnosisApiService;
    exports.DiagnosisConfigService = DiagnosisConfigService;
    exports.TokenConfigService = TokenConfigService;
    exports.TokenApiService = TokenApiService;
    exports.LocationsApiService = LocationsApiService;
    exports.LocationsConfigService = LocationsConfigService;
    exports.UsageConfigService = UsageConfigService;
    exports.UsageApiService = UsageApiService;
    exports.User = User;
    exports.Facility = Facility;
    exports.Unit = Unit;
    exports.PatientAccess = PatientAccess;
    exports.UsageType = UsageType;
    exports.ɵa = UnitKey;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-common-library.umd.js.map