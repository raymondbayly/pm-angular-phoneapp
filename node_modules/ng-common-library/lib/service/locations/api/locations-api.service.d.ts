import { OnDestroy } from '@angular/core';
import { Unit } from '../../../model/Unit';
import { Facility } from '../../../model/Facility';
import { HttpClient } from '@angular/common/http';
import { LocationsConfigService } from '../config/locations-config.service';
import { Observable, Subject } from 'rxjs';
export declare class LocationsApiService implements OnDestroy {
    private http;
    private locationsConfigService;
    private facilitySubscription;
    private unitSubscription;
    readonly facilitiesAndUnit$: Subject<{
        facilities: Facility[];
        units: Unit[];
    }>;
    private locations;
    constructor(http: HttpClient, locationsConfigService: LocationsConfigService);
    /**
     * Updates facilities and units and calls the facilitiesAndUnitSubject when it completes.
     * Will use a cache if they were previously retrieved.
     */
    getFacilitiesAndUnits(): void;
    getActiveFacilities(): Observable<{
        facilities: Array<Facility>;
    }>;
    getActiveUnitsForFacilities(facilities: String[]): Observable<{
        units: Array<Unit>;
    }>;
    ngOnDestroy(): void;
}
