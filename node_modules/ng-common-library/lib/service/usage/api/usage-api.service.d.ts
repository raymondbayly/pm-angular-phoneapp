import { HttpClient } from '@angular/common/http';
import { Subject } from 'rxjs';
import { TokenApiService } from '../../token/api/token-api.service';
import { PatientAccess } from '../../../model/PatientAccess';
import { UsageType } from '../../../model/UsageType';
import { PeraGraph } from '../../../model/PeraGraph';
import { JwtHelperService } from '@auth0/angular-jwt';
import { UsageConfigService } from '../config/usage-config.service';
import { LocationsApiService } from '../../locations/api/locations-api.service';
export declare class UsageApiService {
    private http;
    private jwtHelper;
    private usageConfigService;
    private locationService;
    private tokenApiService;
    usageDataAdded$: Subject<PatientAccess>;
    private pollInstance$;
    private readonly graphUpdated$;
    private usageData;
    private viewedVisits;
    private initialized;
    private locations;
    private locationsLoaded$;
    private locationsLoaded;
    private startedLoadingLocations;
    constructor(http: HttpClient, jwtHelper: JwtHelperService, usageConfigService: UsageConfigService, locationService: LocationsApiService, tokenApiService: TokenApiService);
    init(): void;
    startUsageReportingService(): void;
    submitUsageData(): void;
    /**
     * When the user logs out of the system, we need to clear the cache
     * so that the graph views are sent if they log in again.
     */
    clearUsageCache(): void;
    /**
     * Add usage data.
     * @param graphToLog The information that was viewed.
     * @param usageType The context in which the information was viewed.
     */
    addUsageData(graphToLog: PeraGraph, usageType: UsageType): void;
    /**
     * lookup and insert the unit id and fac id of graph to log
     * @param graph - graph to log
     */
    private updateFacilityAndUnitIdsForGraph(graph);
    /**
     * helper method for looking up fac and unit ids
     * @param graph - graph to replace unitId and facId of
     * @param locations - all locations available to search
     */
    private static assignUnitAndFacIdToPeraGraph(graph, locations);
    private addUsageDataFromToken(graph, usageType, token);
}
