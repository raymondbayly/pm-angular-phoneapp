/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DateService } from './date.service';
import * as moment_ from 'moment-timezone';
import * as i0 from "@angular/core";
import * as i1 from "./date.service";
/** @type {?} */
const moment = moment_;
export class PatientService {
    /**
     * @param {?} dateService
     */
    constructor(dateService) {
        this.dateService = dateService;
    }
    /**
     * Returns the patient age in years, months using the patient DOB
     * @param {?} graph
     * @return {?}
     */
    getPatientAge(graph) {
        if (graph && graph.patient && graph.patient.dob) {
            /** @type {?} */
            const daysOld = Math.floor(Math.round((this.dateService.translateDate(moment.utc().valueOf(), graph.timeZone) - graph.patient.dob) / 86400000));
            /** @type {?} */
            const d = 'd';
            /** @type {?} */
            const w = 'w';
            /** @type {?} */
            const m = 'm';
            /** @type {?} */
            const y = 'y';
            if (daysOld < 7) {
                return Math.floor(daysOld) + d;
            }
            else if (daysOld >= 7 && daysOld < 31) {
                return Math.floor(daysOld / 7) + w + Math.floor(daysOld % 7) + d;
            }
            else if (daysOld >= 31 && daysOld < 365) {
                return Math.floor(daysOld / 29.7) + m + Math.floor((daysOld % 29.7) / 7) + w;
            }
            else if (daysOld >= 365 && daysOld < 730) {
                return Math.floor(daysOld / 365) + y + Math.floor((daysOld % 365) / 29.7) + m;
            }
            else {
                return Math.floor(daysOld / 365) + y;
            }
        }
        else {
            return ' ';
        }
    }
}
PatientService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PatientService.ctorParameters = () => [
    { type: DateService }
];
/** @nocollapse */ PatientService.ngInjectableDef = i0.defineInjectable({ factory: function PatientService_Factory() { return new PatientService(i0.inject(i1.DateService)); }, token: PatientService, providedIn: "root" });
if (false) {
    /** @type {?} */
    PatientService.prototype.dateService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aWVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY29tbW9uLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9wYXRpZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUJBQWlCLENBQUM7Ozs7QUFJM0MsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBS3ZCLE1BQU07Ozs7SUFFSixZQUFtQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtLQUMxQzs7Ozs7O0lBS00sYUFBYSxDQUFDLEtBQWdCO1FBQ25DLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7WUFDaEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDOztZQUV2SCxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7O1lBQ2QsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDOztZQUNkLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQzs7WUFDZCxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7WUFFZCxFQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2hDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2xFO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDOUU7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLEdBQUcsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMvRTtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdEM7U0FDRjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNaOzs7O1lBbENKLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVRPLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQZXJhR3JhcGh9IGZyb20gJy4uL21vZGVsL1BlcmFHcmFwaCc7XG5pbXBvcnQge0RhdGVTZXJ2aWNlfSBmcm9tICcuL2RhdGUuc2VydmljZSc7XG5pbXBvcnQgKiBhcyBtb21lbnRfIGZyb20gJ21vbWVudC10aW1lem9uZSc7XG5cbi8vIFRoZSBKYXZhU2NyaXB0IGNvbXBpbGVyIGdpdmVzIGEgd2VpcmQgXCJtb21lbnQgY2Fubm90IGJlIHVzZWQgYXMgYSBuYW1lc3BhY2VcIiB0eXBlIG9mIGVycm9yXG4vLyBUaGlzIGlzIHRoZSB3b3JrYXJvdW5kLi4uXG5jb25zdCBtb21lbnQgPSBtb21lbnRfO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQYXRpZW50U2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGRhdGVTZXJ2aWNlOiBEYXRlU2VydmljZSkge1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHBhdGllbnQgYWdlIGluIHllYXJzLCBtb250aHMgdXNpbmcgdGhlIHBhdGllbnQgRE9CXG4gICAqL1xuICBwdWJsaWMgZ2V0UGF0aWVudEFnZShncmFwaDogUGVyYUdyYXBoKTogc3RyaW5nIHtcbiAgICBpZiAoZ3JhcGggJiYgZ3JhcGgucGF0aWVudCAmJiBncmFwaC5wYXRpZW50LmRvYikge1xuICAgICAgY29uc3QgZGF5c09sZCA9IE1hdGguZmxvb3IoXG4gICAgICAgIE1hdGgucm91bmQoKHRoaXMuZGF0ZVNlcnZpY2UudHJhbnNsYXRlRGF0ZShtb21lbnQudXRjKCkudmFsdWVPZigpLCBncmFwaC50aW1lWm9uZSkgLSBncmFwaC5wYXRpZW50LmRvYikgLyA4NjQwMDAwMCkpO1xuXG4gICAgICBjb25zdCBkID0gJ2QnO1xuICAgICAgY29uc3QgdyA9ICd3JztcbiAgICAgIGNvbnN0IG0gPSAnbSc7XG4gICAgICBjb25zdCB5ID0gJ3knO1xuXG4gICAgICBpZiAoZGF5c09sZCA8IDcpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZGF5c09sZCkgKyBkO1xuICAgICAgfSBlbHNlIGlmIChkYXlzT2xkID49IDcgJiYgZGF5c09sZCA8IDMxKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKGRheXNPbGQgLyA3KSArIHcgKyBNYXRoLmZsb29yKGRheXNPbGQgJSA3KSArIGQ7XG4gICAgICB9IGVsc2UgaWYgKGRheXNPbGQgPj0gMzEgJiYgZGF5c09sZCA8IDM2NSkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkYXlzT2xkIC8gMjkuNykgKyBtICsgTWF0aC5mbG9vcigoZGF5c09sZCAlIDI5LjcpIC8gNykgKyB3O1xuICAgICAgfSBlbHNlIGlmIChkYXlzT2xkID49IDM2NSAmJiBkYXlzT2xkIDwgNzMwKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKGRheXNPbGQgLyAzNjUpICsgeSArIE1hdGguZmxvb3IoKGRheXNPbGQgJSAzNjUpIC8gMjkuNykgKyBtO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZGF5c09sZCAvIDM2NSkgKyB5O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyAnO1xuICAgIH1cbiAgfVxuXG5cbn1cbiJdfQ==