/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DiagnosisConfigService } from '../config/diagnosis-config.service';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, timer } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../config/diagnosis-config.service";
export class DiagnosisApiService {
    /**
     * @param {?} http
     * @param {?} diagnosisConfigService
     */
    constructor(http, diagnosisConfigService) {
        this.http = http;
        this.diagnosisConfigService = diagnosisConfigService;
        this.pollInstance$ = timer(0, 60000);
        this.diagnosesSubject = new BehaviorSubject(null);
    }
    /**
     * @return {?}
     */
    getDiagnosesSubject() {
        return this.diagnosesSubject;
    }
    /**
     * @return {?}
     */
    getDiagnosesSubjectValue() {
        return this.diagnosesSubject.value;
    }
    /**
     * @return {?}
     */
    getAllDiagnoses() {
        return this.http.get(this.diagnosisConfigService.getPrimaryDiagnosesEndpoint(), { observe: 'response' });
    }
    /**
     * @return {?}
     */
    getPrimaryDiagnosesInterval() {
        // Make an HTTP call on an interval
        return this.pollInstance$.pipe(switchMap(() => this.getAllDiagnoses()));
    }
}
DiagnosisApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DiagnosisApiService.ctorParameters = () => [
    { type: HttpClient },
    { type: DiagnosisConfigService }
];
/** @nocollapse */ DiagnosisApiService.ngInjectableDef = i0.defineInjectable({ factory: function DiagnosisApiService_Factory() { return new DiagnosisApiService(i0.inject(i1.HttpClient), i0.inject(i2.DiagnosisConfigService)); }, token: DiagnosisApiService, providedIn: "root" });
if (false) {
    /** @type {?} */
    DiagnosisApiService.prototype.pollInstance$;
    /** @type {?} */
    DiagnosisApiService.prototype.diagnosesSubject;
    /** @type {?} */
    DiagnosisApiService.prototype.http;
    /** @type {?} */
    DiagnosisApiService.prototype.diagnosisConfigService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ25vc2lzLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY29tbW9uLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9kaWFnbm9zaXMvYXBpL2RpYWdub3Npcy1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUMxRSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFDLGVBQWUsRUFBYyxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDeEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7O0FBS3pDLE1BQU07Ozs7O0lBT0osWUFBb0IsSUFBZ0IsRUFBVSxzQkFBOEM7UUFBeEUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDMUYsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGVBQWUsQ0FBc0IsSUFBSSxDQUFDLENBQUM7S0FDeEU7Ozs7SUFFTSxtQkFBbUI7UUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQzs7Ozs7SUFHeEIsd0JBQXdCO1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDOzs7OztJQUc5QixlQUFlO1FBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsMkJBQTJCLEVBQUUsRUFBRSxFQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDOzs7OztJQUdsRywyQkFBMkI7O1FBRWhDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDNUIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUN4QyxDQUFDOzs7O1lBL0JMLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQU5PLFVBQVU7WUFEVixzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEaWFnbm9zaXNDb25maWdTZXJ2aWNlfSBmcm9tICcuLi9jb25maWcvZGlhZ25vc2lzLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7c3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERpYWdub3Npc0FwaVNlcnZpY2Uge1xuXG4gIC8vIFRoZSB0aW1lciB0aGF0IGZpcmVzIHNvIHRoYXQgY2xpZW50cyBjYW4gZ2V0IHRoZSBsYXRlc3QgZGlhZ25vc2VzXG4gIHByaXZhdGUgcG9sbEluc3RhbmNlJDogT2JzZXJ2YWJsZTxhbnk+O1xuICAvLyBNYXAgb2YgcHJpbWFyeSBkaWFnbm9zaXMga2V5ZWQgYnkgdmlzaXQgSURcbiAgcHJpdmF0ZSByZWFkb25seSBkaWFnbm9zZXNTdWJqZWN0OiBCZWhhdmlvclN1YmplY3Q8TWFwPG51bWJlciwgc3RyaW5nPj47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBwcml2YXRlIGRpYWdub3Npc0NvbmZpZ1NlcnZpY2U6IERpYWdub3Npc0NvbmZpZ1NlcnZpY2UpIHtcbiAgICB0aGlzLnBvbGxJbnN0YW5jZSQgPSB0aW1lcigwLCA2MDAwMCk7XG4gICAgdGhpcy5kaWFnbm9zZXNTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxNYXA8bnVtYmVyLCBzdHJpbmc+PihudWxsKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREaWFnbm9zZXNTdWJqZWN0KCkge1xuICAgIHJldHVybiB0aGlzLmRpYWdub3Nlc1N1YmplY3Q7XG4gIH1cblxuICBwdWJsaWMgZ2V0RGlhZ25vc2VzU3ViamVjdFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmRpYWdub3Nlc1N1YmplY3QudmFsdWU7XG4gIH1cblxuICBwdWJsaWMgZ2V0QWxsRGlhZ25vc2VzKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5kaWFnbm9zaXNDb25maWdTZXJ2aWNlLmdldFByaW1hcnlEaWFnbm9zZXNFbmRwb2ludCgpLCB7b2JzZXJ2ZTogJ3Jlc3BvbnNlJ30pO1xuICB9XG5cbiAgcHVibGljIGdldFByaW1hcnlEaWFnbm9zZXNJbnRlcnZhbCgpIHtcbiAgICAvLyBNYWtlIGFuIEhUVFAgY2FsbCBvbiBhbiBpbnRlcnZhbFxuICAgIHJldHVybiB0aGlzLnBvbGxJbnN0YW5jZSQucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLmdldEFsbERpYWdub3NlcygpKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==