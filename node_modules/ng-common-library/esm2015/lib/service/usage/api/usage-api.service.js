/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of, Subject, timer } from 'rxjs';
import { TokenApiService } from '../../token/api/token-api.service';
import { PatientAccess } from '../../../model/PatientAccess';
import { UsageType } from '../../../model/UsageType';
import { JwtHelperService } from '@auth0/angular-jwt';
import { UsageConfigService } from '../config/usage-config.service';
import { first, map, tap } from 'rxjs/operators';
import * as moment_ from 'moment-timezone';
import { LocationsApiService } from '../../locations/api/locations-api.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@auth0/angular-jwt/src/jwthelper.service";
import * as i3 from "../config/usage-config.service";
import * as i4 from "../../locations/api/locations-api.service";
import * as i5 from "../../token/api/token-api.service";
/** @type {?} */
const moment = moment_;
export class UsageApiService {
    /**
     * @param {?} http
     * @param {?} jwtHelper
     * @param {?} usageConfigService
     * @param {?} locationService
     * @param {?} tokenApiService
     */
    constructor(http, jwtHelper, usageConfigService, locationService, tokenApiService) {
        this.http = http;
        this.jwtHelper = jwtHelper;
        this.usageConfigService = usageConfigService;
        this.locationService = locationService;
        this.tokenApiService = tokenApiService;
        this.usageData = new Array();
        this.viewedVisits = [];
        this.initialized = false;
        this.locationsLoaded$ = new Subject();
        this.locationsLoaded = false;
        this.startedLoadingLocations = false;
        this.graphUpdated$ = new Subject();
        this.usageDataAdded$ = new Subject();
    }
    /**
     * @return {?}
     */
    init() {
        if (!this.initialized) {
            this.initialized = true;
        }
    }
    /**
     * @return {?}
     */
    startUsageReportingService() {
        this.pollInstance$ = timer(0, this.usageConfigService.getUsagePollingInterval());
        this.pollInstance$.subscribe(() => {
            if (this.usageData && this.usageData.length > 0) {
                this.submitUsageData();
            }
        });
        if (this.usageData && this.usageData.length > 0) {
            // Submit now in case the user closes the window before the timer fires
            this.submitUsageData();
        }
        // get all the locations when the service is initialized
        this.locationService.facilitiesAndUnit$.pipe(first()).subscribe((locations) => {
            this.locations = locations;
            this.locationsLoaded = true;
            this.locationsLoaded$.next(true);
        });
        this.locationService.getFacilitiesAndUnits();
    }
    /**
     * @return {?}
     */
    submitUsageData() {
        console.log('Submitting usage data for app ' + this.tokenApiService.getAppId() + ' Size = ' + this.usageData.length);
        /** @type {?} */
        const usageDataCopy = this.usageData.slice();
        this.usageData = [];
        this.http.post(this.usageConfigService.getUsageDataEndPoint(), usageDataCopy).pipe(first()).subscribe();
    }
    /**
     * When the user logs out of the system, we need to clear the cache
     * so that the graph views are sent if they log in again.
     * @return {?}
     */
    clearUsageCache() {
        this.viewedVisits = [];
    }
    /**
     * Add usage data.
     * @param {?} graphToLog The information that was viewed.
     * @param {?} usageType The context in which the information was viewed.
     * @return {?}
     */
    addUsageData(graphToLog, usageType) {
        // We have to replace the facility and unit IDs with the real deals
        this.updateFacilityAndUnitIdsForGraph(graphToLog).pipe(first(), tap((graph) => {
            this.tokenApiService.token$.pipe(first()).subscribe((token) => {
                if (usageType === UsageType.Array) {
                    // Only log 1 graph view per session when viewed in the array view
                    if (graph && this.viewedVisits.indexOf(graph.vnm) < 0) {
                        // We only log 1 visit view of a specific type per session
                        this.viewedVisits.push(graph.vnm);
                        this.addUsageDataFromToken(graph, usageType, token);
                    }
                }
                else {
                    // Always add graph views because the user clicked on a graph in the array view
                    this.addUsageDataFromToken(graph, usageType, token);
                }
            });
            this.tokenApiService.getExistingToken();
        })).subscribe();
        if (!this.locationsLoaded && !this.startedLoadingLocations) {
            this.startedLoadingLocations = true;
            this.locationService.getFacilitiesAndUnits();
        }
    }
    /**
     * lookup and insert the unit id and fac id of graph to log
     * @param {?} graph - graph to log
     * @return {?}
     */
    updateFacilityAndUnitIdsForGraph(graph) {
        /** @type {?} */
        const cloneGraph = JSON.parse(JSON.stringify(graph));
        if (this.locationsLoaded === true) {
            return of(UsageApiService.assignUnitAndFacIdToPeraGraph(cloneGraph, this.locations));
        }
        else {
            return this.locationsLoaded$.pipe(map(() => {
                return UsageApiService.assignUnitAndFacIdToPeraGraph(cloneGraph, this.locations);
            }));
        }
    }
    /**
     * helper method for looking up fac and unit ids
     * @param {?} graph - graph to replace unitId and facId of
     * @param {?} locations - all locations available to search
     * @return {?}
     */
    static assignUnitAndFacIdToPeraGraph(graph, locations) {
        for (const fac of locations.facilities) {
            if (graph.facilityId === fac.displayName) {
                graph.facilityId = fac.facilityID;
                break;
            }
        }
        for (const unit of locations.units) {
            if (graph.unitId === unit.displayName) {
                graph.unitId = unit.key.unitID;
                break;
            }
        }
        return graph;
    }
    /**
     * @param {?} graph
     * @param {?} usageType
     * @param {?} token
     * @return {?}
     */
    addUsageDataFromToken(graph, usageType, token) {
        /** @type {?} */
        const decodedToken = this.jwtHelper.decodeToken(token);
        if (decodedToken) {
            /** @type {?} */
            const pa = new PatientAccess(decodedToken['sub'], // The claims subject is the username
            // The claims subject is the username
            graph.patient.lname + ', ' + graph.patient.fname, graph.vipIndicator, graph.vnm, graph.patient.medicalRecordNumber, graph.admitDate, graph.dischargeDate, graph.facilityId, graph.unitId, graph.attendingProvider.lastName + ', ' + graph.attendingProvider.firstName, graph.visitUnitType, usageType, moment.valueOf());
            this.usageData.push(pa);
            // This can be used for testing and for the timing of individual calls to submitUsageData()
            this.usageDataAdded$.next(pa);
        }
    }
}
UsageApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UsageApiService.ctorParameters = () => [
    { type: HttpClient },
    { type: JwtHelperService },
    { type: UsageConfigService },
    { type: LocationsApiService },
    { type: TokenApiService }
];
/** @nocollapse */ UsageApiService.ngInjectableDef = i0.defineInjectable({ factory: function UsageApiService_Factory() { return new UsageApiService(i0.inject(i1.HttpClient), i0.inject(i2.JwtHelperService), i0.inject(i3.UsageConfigService), i0.inject(i4.LocationsApiService), i0.inject(i5.TokenApiService)); }, token: UsageApiService, providedIn: "root" });
if (false) {
    /** @type {?} */
    UsageApiService.prototype.usageDataAdded$;
    /** @type {?} */
    UsageApiService.prototype.pollInstance$;
    /** @type {?} */
    UsageApiService.prototype.graphUpdated$;
    /** @type {?} */
    UsageApiService.prototype.usageData;
    /** @type {?} */
    UsageApiService.prototype.viewedVisits;
    /** @type {?} */
    UsageApiService.prototype.initialized;
    /** @type {?} */
    UsageApiService.prototype.locations;
    /** @type {?} */
    UsageApiService.prototype.locationsLoaded$;
    /** @type {?} */
    UsageApiService.prototype.locationsLoaded;
    /** @type {?} */
    UsageApiService.prototype.startedLoadingLocations;
    /** @type {?} */
    UsageApiService.prototype.http;
    /** @type {?} */
    UsageApiService.prototype.jwtHelper;
    /** @type {?} */
    UsageApiService.prototype.usageConfigService;
    /** @type {?} */
    UsageApiService.prototype.locationService;
    /** @type {?} */
    UsageApiService.prototype.tokenApiService;
}

//# sourceMappingURL=data:application/json;base64,