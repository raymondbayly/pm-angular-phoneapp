/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class PeragraphConfigService {
    constructor() {
        this.singlePeraGraphEndPoint = null;
        this.allPeraGraphsEndPoint = null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setSinglePeraGraphEndPoint(value) {
        this.singlePeraGraphEndPoint = value;
    }
    /**
     * @return {?}
     */
    getSinglePeraGraphEndPoint() {
        if (!this.singlePeraGraphEndPoint) {
            console.warn('Single PeraGraph endpoint is not set!');
        }
        return this.singlePeraGraphEndPoint;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setAllPeraGraphsEndPoint(value) {
        this.allPeraGraphsEndPoint = value;
    }
    /**
     * @return {?}
     */
    getAllPeraGraphsEndPoint() {
        if (!this.allPeraGraphsEndPoint) {
            console.warn('All PeraGraph endpoint is not set!');
        }
        return this.allPeraGraphsEndPoint;
    }
}
PeragraphConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ PeragraphConfigService.ngInjectableDef = i0.defineInjectable({ factory: function PeragraphConfigService_Factory() { return new PeragraphConfigService(); }, token: PeragraphConfigService, providedIn: "root" });
if (false) {
    /** @type {?} */
    PeragraphConfigService.prototype.singlePeraGraphEndPoint;
    /** @type {?} */
    PeragraphConfigService.prototype.allPeraGraphsEndPoint;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyYWdyYXBoLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY29tbW9uLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9wZXJhZ3JhcGgvY29uZmlnL3BlcmFncmFwaC1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7QUFLekMsTUFBTTs7dUNBRXdDLElBQUk7cUNBQ04sSUFBSTs7Ozs7O0lBRXJDLDBCQUEwQixDQUFDLEtBQWE7UUFDM0MsSUFBSSxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQzs7Ozs7SUFHbEMsMEJBQTBCO1FBQzdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztZQUNoQyxPQUFPLENBQUMsSUFBSSxDQUFDLHVDQUF1QyxDQUFDLENBQUM7U0FDekQ7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDOzs7Ozs7SUFHakMsd0JBQXdCLENBQUMsS0FBYTtRQUN6QyxJQUFJLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDOzs7OztJQUdoQyx3QkFBd0I7UUFDM0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0NBQW9DLENBQUMsQ0FBQztTQUN0RDtRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUM7Ozs7WUEzQnpDLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUGVyYWdyYXBoQ29uZmlnU2VydmljZSB7XG5cbiAgICBwcml2YXRlIHNpbmdsZVBlcmFHcmFwaEVuZFBvaW50OiBzdHJpbmcgPSBudWxsO1xuICAgIHByaXZhdGUgYWxsUGVyYUdyYXBoc0VuZFBvaW50OiBzdHJpbmcgPSBudWxsO1xuXG4gICAgcHVibGljIHNldFNpbmdsZVBlcmFHcmFwaEVuZFBvaW50KHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zaW5nbGVQZXJhR3JhcGhFbmRQb2ludCA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTaW5nbGVQZXJhR3JhcGhFbmRQb2ludCgpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIXRoaXMuc2luZ2xlUGVyYUdyYXBoRW5kUG9pbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignU2luZ2xlIFBlcmFHcmFwaCBlbmRwb2ludCBpcyBub3Qgc2V0IScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZVBlcmFHcmFwaEVuZFBvaW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRBbGxQZXJhR3JhcGhzRW5kUG9pbnQodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFsbFBlcmFHcmFwaHNFbmRQb2ludCA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBbGxQZXJhR3JhcGhzRW5kUG9pbnQoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCF0aGlzLmFsbFBlcmFHcmFwaHNFbmRQb2ludCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdBbGwgUGVyYUdyYXBoIGVuZHBvaW50IGlzIG5vdCBzZXQhJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYWxsUGVyYUdyYXBoc0VuZFBvaW50O1xuICAgIH1cbn1cbiJdfQ==