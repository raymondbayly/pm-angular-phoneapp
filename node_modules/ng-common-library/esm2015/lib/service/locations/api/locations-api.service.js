/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { LocationsConfigService } from '../config/locations-config.service';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { Locations } from '../../../model/Locations';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../config/locations-config.service";
export class LocationsApiService {
    /**
     * @param {?} http
     * @param {?} locationsConfigService
     */
    constructor(http, locationsConfigService) {
        this.http = http;
        this.locationsConfigService = locationsConfigService;
        this.locations = new Locations();
        this.facilitiesAndUnit$ = new Subject();
    }
    /**
     * Updates facilities and units and calls the facilitiesAndUnitSubject when it completes.
     * Will use a cache if they were previously retrieved.
     * @return {?}
     */
    getFacilitiesAndUnits() {
        if (this.locations.facilities && this.locations.facilities.length > 0 && this.locations.units && this.locations.units.length > 0) {
            this.facilitiesAndUnit$.next(this.locations);
        }
        else {
            /** Receive all facilities and active units and set instance variables for caching */
            this.facilitySubscription = this.getActiveFacilities().pipe(map((f) => f.facilities)).subscribe((facilities) => {
                if (facilities && facilities.length > 0) {
                    /** @type {?} */
                    const facilityIds = [];
                    for (const facility of facilities) {
                        facilityIds.push(facility.facilityID);
                    }
                    this.unitSubscription = this.getActiveUnitsForFacilities(facilityIds).pipe((map((u) => u.units))).subscribe((units) => {
                        // filter out facilities with no active units
                        this.locations = new Locations();
                        for (const f of facilities) {
                            /** @type {?} */
                            let hasActiveUnits = false;
                            for (const u of units) {
                                if (u.key.facilityID === f.facilityID) {
                                    hasActiveUnits = true;
                                    break;
                                }
                            }
                            if (hasActiveUnits) {
                                this.locations.facilities.push(f);
                            }
                        }
                        this.locations.units = units;
                        this.facilitiesAndUnit$.next(this.locations);
                    }, (e) => {
                        console.log('Could not update units! Error = ' + e.message);
                    });
                }
            }, (e) => {
                console.log('Could not update facilities! Error = ' + e.message);
            });
        }
    }
    /**
     * @return {?}
     */
    getActiveFacilities() {
        console.log('Getting all facilities: ' + this.locationsConfigService.getActiveFacilitiesEndpoint());
        return this.http.get(this.locationsConfigService.getActiveFacilitiesEndpoint());
    }
    /**
     * @param {?} facilities
     * @return {?}
     */
    getActiveUnitsForFacilities(facilities) {
        console.log('Getting all active units: ' + this.locationsConfigService.getActiveUnitsEndpoint() + facilities);
        return this.http.get(this.locationsConfigService.getActiveUnitsEndpoint() + facilities);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.facilitySubscription && !this.facilitySubscription.closed) {
            this.facilitySubscription.unsubscribe();
        }
        if (this.unitSubscription && !this.unitSubscription.closed) {
            this.unitSubscription.unsubscribe();
        }
    }
}
LocationsApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LocationsApiService.ctorParameters = () => [
    { type: HttpClient },
    { type: LocationsConfigService }
];
/** @nocollapse */ LocationsApiService.ngInjectableDef = i0.defineInjectable({ factory: function LocationsApiService_Factory() { return new LocationsApiService(i0.inject(i1.HttpClient), i0.inject(i2.LocationsConfigService)); }, token: LocationsApiService, providedIn: "root" });
if (false) {
    /** @type {?} */
    LocationsApiService.prototype.facilitySubscription;
    /** @type {?} */
    LocationsApiService.prototype.unitSubscription;
    /** @type {?} */
    LocationsApiService.prototype.facilitiesAndUnit$;
    /** @type {?} */
    LocationsApiService.prototype.locations;
    /** @type {?} */
    LocationsApiService.prototype.http;
    /** @type {?} */
    LocationsApiService.prototype.locationsConfigService;
}

//# sourceMappingURL=data:application/json;base64,