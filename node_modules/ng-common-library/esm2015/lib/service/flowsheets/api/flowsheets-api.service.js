/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FlowsheetsConfigService } from '../config/flowsheets-config.service';
import { BehaviorSubject, timer } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../config/flowsheets-config.service";
export class FlowsheetsApiService {
    /**
     * @param {?} http
     * @param {?} flowsheetConfigService
     */
    constructor(http, flowsheetConfigService) {
        this.http = http;
        this.flowsheetConfigService = flowsheetConfigService;
        this.pollInstance$ = timer(0, 60000);
        this.flowSheetSubject = new BehaviorSubject(null);
        this.riScoresSubject = new BehaviorSubject(null);
    }
    /**
     * @return {?}
     */
    getFlowSheetSubject() {
        return this.flowSheetSubject;
    }
    /**
     * @return {?}
     */
    getFlowSheetSubjectValue() {
        return this.flowSheetSubject.value;
    }
    /**
     * @return {?}
     */
    getRiScoresSubject() {
        return this.riScoresSubject;
    }
    /**
     * @return {?}
     */
    getRiScoresSubjectValue() {
        return this.riScoresSubject.value;
    }
    /**
     * @return {?}
     */
    getSinglePeraGraphFlowSheet() {
        return this.http.get(this.flowsheetConfigService.getSinglePeraGraphFlowSheetEndPoint());
    }
    /**
     * @return {?}
     */
    getDetailedFlowsheetColumn() {
        return this.http.get(this.flowsheetConfigService.getDetailedFlowSheetColumnEndpoint());
    }
    /**
     * @return {?}
     */
    getAllPeraGraphFlowSheets() {
        return this.http.get(this.flowsheetConfigService.getAllPeragraphFlowSheetsEndPoint(), { observe: 'response' });
    }
    /**
     * @return {?}
     */
    getAllRiScores() {
        return this.http.get(this.flowsheetConfigService.getLatestRiScoresEndPoint(), { observe: 'response' });
    }
    /**
     * @return {?}
     */
    getFlowSheetInterval() {
        // Make an HTTP call on an interval
        return this.pollInstance$.pipe(switchMap(() => this.getAllPeraGraphFlowSheets()));
    }
    /**
     * @return {?}
     */
    getLatestRiScoresInterval() {
        // Make an HTTP call on an interval
        return this.pollInstance$.pipe(switchMap(() => this.getAllRiScores()));
    }
}
FlowsheetsApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FlowsheetsApiService.ctorParameters = () => [
    { type: HttpClient },
    { type: FlowsheetsConfigService }
];
/** @nocollapse */ FlowsheetsApiService.ngInjectableDef = i0.defineInjectable({ factory: function FlowsheetsApiService_Factory() { return new FlowsheetsApiService(i0.inject(i1.HttpClient), i0.inject(i2.FlowsheetsConfigService)); }, token: FlowsheetsApiService, providedIn: "root" });
if (false) {
    /** @type {?} */
    FlowsheetsApiService.prototype.flowSheetSubject;
    /** @type {?} */
    FlowsheetsApiService.prototype.riScoresSubject;
    /** @type {?} */
    FlowsheetsApiService.prototype.pollInstance$;
    /** @type {?} */
    FlowsheetsApiService.prototype.http;
    /** @type {?} */
    FlowsheetsApiService.prototype.flowsheetConfigService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvd3NoZWV0cy1hcGkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWNvbW1vbi1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvZmxvd3NoZWV0cy9hcGkvZmxvd3NoZWV0cy1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDNUUsT0FBTyxFQUFDLGVBQWUsRUFBYyxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFeEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7O0FBS3pDLE1BQU07Ozs7O0lBUUosWUFBb0IsSUFBZ0IsRUFDaEI7UUFEQSxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLDJCQUFzQixHQUF0QixzQkFBc0I7UUFDeEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGVBQWUsQ0FBb0MsSUFBSSxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBc0IsSUFBSSxDQUFDLENBQUM7S0FDdkU7Ozs7SUFFTSxtQkFBbUI7UUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQzs7Ozs7SUFHeEIsd0JBQXdCO1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDOzs7OztJQUc5QixrQkFBa0I7UUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7Ozs7O0lBR3ZCLHVCQUF1QjtRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUM7Ozs7O0lBR3BDLDJCQUEyQjtRQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLG1DQUFtQyxFQUFFLENBQUMsQ0FBQztLQUM5Rjs7OztJQUVELDBCQUEwQjtRQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLGtDQUFrQyxFQUFFLENBQUMsQ0FBQztLQUM3Rjs7OztJQUVELHlCQUF5QjtRQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGlDQUFpQyxFQUFFLEVBQUUsRUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztLQUM5Rzs7OztJQUVELGNBQWM7UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLHlCQUF5QixFQUFFLEVBQUUsRUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztLQUN0Rzs7OztJQUVNLG9CQUFvQjs7UUFFekIsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM1QixTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUMsQ0FDbEQsQ0FBQzs7Ozs7SUFHRyx5QkFBeUI7O1FBRTlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDNUIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUN2QyxDQUFDOzs7O1lBN0RMLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVJPLFVBQVU7WUFDVix1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge0Zsb3dzaGVldHNDb25maWdTZXJ2aWNlfSBmcm9tICcuLi9jb25maWcvZmxvd3NoZWV0cy1jb25maWcuc2VydmljZSc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtGbG93U2hlZXRCYXNlfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9GbG93U2hlZXRCYXNlJztcbmltcG9ydCB7c3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEZsb3dzaGVldHNBcGlTZXJ2aWNlIHtcblxuICBwcml2YXRlIHJlYWRvbmx5IGZsb3dTaGVldFN1YmplY3Q6IEJlaGF2aW9yU3ViamVjdDxNYXA8bnVtYmVyLCBBcnJheTxGbG93U2hlZXRCYXNlPj4+O1xuICAvLyBNYXAgb2YgbnVtZXJpYyBSSSBzY29yZSBrZXllZCBieSBWaXNpdCBJRFxuICBwcml2YXRlIHJlYWRvbmx5IHJpU2NvcmVzU3ViamVjdDogQmVoYXZpb3JTdWJqZWN0PE1hcDxudW1iZXIsIG51bWJlcj4+O1xuICAvLyBUaGUgdGltZXIgdGhhdCBmaXJlcyBzbyB0aGF0IGNsaWVudHMgY2FuIGdldCB0aGUgbGF0ZXN0IGZsb3dzaGVldCBhbmQgUkkgc2NvcmUgdmFsdWVzXG4gIHByaXZhdGUgcG9sbEluc3RhbmNlJDogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBmbG93c2hlZXRDb25maWdTZXJ2aWNlOiBGbG93c2hlZXRzQ29uZmlnU2VydmljZSkge1xuICAgIHRoaXMucG9sbEluc3RhbmNlJCA9IHRpbWVyKDAsIDYwMDAwKTtcbiAgICB0aGlzLmZsb3dTaGVldFN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE1hcDxudW1iZXIsIEFycmF5PEZsb3dTaGVldEJhc2U+Pj4obnVsbCk7XG4gICAgdGhpcy5yaVNjb3Jlc1N1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE1hcDxudW1iZXIsIG51bWJlcj4+KG51bGwpO1xuICB9XG5cbiAgcHVibGljIGdldEZsb3dTaGVldFN1YmplY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmxvd1NoZWV0U3ViamVjdDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRGbG93U2hlZXRTdWJqZWN0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmxvd1NoZWV0U3ViamVjdC52YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSaVNjb3Jlc1N1YmplY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMucmlTY29yZXNTdWJqZWN0O1xuICB9XG5cbiAgcHVibGljIGdldFJpU2NvcmVzU3ViamVjdFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnJpU2NvcmVzU3ViamVjdC52YWx1ZTtcbiAgfVxuXG4gIGdldFNpbmdsZVBlcmFHcmFwaEZsb3dTaGVldCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PGFueT4odGhpcy5mbG93c2hlZXRDb25maWdTZXJ2aWNlLmdldFNpbmdsZVBlcmFHcmFwaEZsb3dTaGVldEVuZFBvaW50KCkpO1xuICB9XG5cbiAgZ2V0RGV0YWlsZWRGbG93c2hlZXRDb2x1bW4oKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxhbnk+KHRoaXMuZmxvd3NoZWV0Q29uZmlnU2VydmljZS5nZXREZXRhaWxlZEZsb3dTaGVldENvbHVtbkVuZHBvaW50KCkpO1xuICB9XG5cbiAgZ2V0QWxsUGVyYUdyYXBoRmxvd1NoZWV0cygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMuZmxvd3NoZWV0Q29uZmlnU2VydmljZS5nZXRBbGxQZXJhZ3JhcGhGbG93U2hlZXRzRW5kUG9pbnQoKSwge29ic2VydmU6ICdyZXNwb25zZSd9KTtcbiAgfVxuXG4gIGdldEFsbFJpU2NvcmVzKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5mbG93c2hlZXRDb25maWdTZXJ2aWNlLmdldExhdGVzdFJpU2NvcmVzRW5kUG9pbnQoKSwge29ic2VydmU6ICdyZXNwb25zZSd9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRGbG93U2hlZXRJbnRlcnZhbCgpIHtcbiAgICAvLyBNYWtlIGFuIEhUVFAgY2FsbCBvbiBhbiBpbnRlcnZhbFxuICAgIHJldHVybiB0aGlzLnBvbGxJbnN0YW5jZSQucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLmdldEFsbFBlcmFHcmFwaEZsb3dTaGVldHMoKSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGdldExhdGVzdFJpU2NvcmVzSW50ZXJ2YWwoKSB7XG4gICAgLy8gTWFrZSBhbiBIVFRQIGNhbGwgb24gYW4gaW50ZXJ2YWxcbiAgICByZXR1cm4gdGhpcy5wb2xsSW5zdGFuY2UkLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5nZXRBbGxSaVNjb3JlcygpKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==