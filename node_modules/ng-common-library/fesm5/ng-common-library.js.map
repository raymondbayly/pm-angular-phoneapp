{"version":3,"file":"ng-common-library.js.map","sources":["ng://ng-common-library/lib/service/browser.service.ts","ng://ng-common-library/lib/model/MarkerColors.ts","ng://ng-common-library/lib/service/date.service.ts","ng://ng-common-library/lib/service/chart.service.ts","ng://ng-common-library/lib/service/warning.service.ts","ng://ng-common-library/lib/service/flowsheets/config/flowsheets-config.service.ts","ng://ng-common-library/lib/service/flowsheets/api/flowsheets-api.service.ts","ng://ng-common-library/lib/service/peragraph/config/peragraph-config.service.ts","ng://ng-common-library/lib/service/peragraph/api/peragraph-api.service.ts","ng://ng-common-library/lib/service/patient.service.ts","ng://ng-common-library/lib/service/common.service.ts","ng://ng-common-library/lib/service/translations/translations.service.ts","ng://ng-common-library/lib/service/translations/config/translations-config.service.ts","ng://ng-common-library/lib/service/translations/api/translations-api.service.ts","ng://ng-common-library/lib/service/diagnosis/config/diagnosis-config.service.ts","ng://ng-common-library/lib/service/diagnosis/api/diagnosis-api.service.ts","ng://ng-common-library/lib/service/token/config/token-config.service.ts","ng://ng-common-library/lib/model/User.ts","ng://ng-common-library/lib/service/token/api/token-api.service.ts","ng://ng-common-library/lib/service/locations/config/locations-config.service.ts","ng://ng-common-library/lib/model/Locations.ts","ng://ng-common-library/lib/service/locations/api/locations-api.service.ts","ng://ng-common-library/lib/service/usage/config/usage-config.service.ts","ng://ng-common-library/lib/model/PatientAccess.ts","ng://ng-common-library/lib/model/UsageType.ts","ng://ng-common-library/lib/service/usage/api/usage-api.service.ts","ng://ng-common-library/lib/model/Facility.ts","ng://ng-common-library/lib/model/Unit.ts","ng://ng-common-library/lib/model/UnitKey.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrowserService {\n\n  constructor() {\n  }\n\n  /**\n   * Triggers a browser resize event - needed for the Highchart to resize properly - takes into account the browser type too\n   */\n  public resize() {\n    if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0) {\n      const evt = document.createEvent('UIEvents');\n      evt.initUIEvent('resize', true, false, window, 0);\n      window.dispatchEvent(evt);\n    } else {\n      window.dispatchEvent(new Event('resize'));\n    }\n  }\n}\n","export enum MarkerColors {\n  Normal = 'black',\n  IntensiveCare = '#F23A27',\n  StepDown= 'blue'\n}\n","import {Injectable} from '@angular/core';\nimport * as moment_ from 'moment-timezone';\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DateService {\n  /**\n   * Formats the date to be displayed based on the parameters provided\n   * @param dateMil The date/time in milliseconds\n   * @param timeZone Each PeraGraph has one. Just pass it as a parameter.\n   * @param formatString A string param that defines the format in which the date needs to be displayed. e.g : MM/DD/YY HH:mm z\n   */\n  public getDateFormat(timeZone: string, dateMil: number, formatString: string) {\n    return moment(dateMil).utc().tz(timeZone).format(formatString);\n  }\n\n  /**\n   * Translate a date from a UTC offset.\n   *\n   * @param date The date to translate.\n   * @param timezone The timezone that the date was originally created in.\n   */\n  public translateDate(date: number, timezone: string) {\n    return date + ((3600000 / 60) * moment(date).tz(timezone).utcOffset());\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from '../model/PeraGraph';\nimport {MarkerColors} from '../model/MarkerColors';\nimport {DateService} from './date.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartService {\n\n  constructor(private dateService: DateService) {\n  }\n\n  /**\n   * Create the line across the 0 axis for when RI scores go below zero in a graph.\n   * @param minRiScore Minimum RI score.\n   */\n  public createZeroAxisLine(minRiScore: number) {\n    return [\n      {\n        color: '#000000',\n        width: minRiScore < 0 ? 1 : null,\n        value: minRiScore < 0 ? 0 : null,\n        zIndex: 3\n      }];\n  }\n\n  /**\n   * Create an alert plot line for a graph.\n   *\n   * @param alertCreatedDate The created date of the alert.\n   * @param timeZone The timezone that the alert was created in.\n   */\n  public updateAlertPlotLine(graph: PeraGraph) {\n    const plotLines = [];\n    if (graph && graph.activeWarning) {\n      plotLines.push({\n        color: '#CE2029',\n        value: this.dateService.translateDate(graph.activeWarning.createdDate, graph.timeZone),\n        width: 2,\n        zIndex: 3\n      });\n    }\n    return plotLines;\n  }\n\n  public getMinYAxisTick(minRiScore): number {\n    return (minRiScore > 0) ? 0 : 20 * Math.floor(minRiScore / 20);\n  }\n\n  /**\n   * Used in the graph to depict the unit type where a health score was recorded.\n   * @param unitType Type of unit to get the marker color for.\n   */\n  public getMarkerColor(unitType: string): string {\n    let markerColor = MarkerColors.Normal;\n    switch (unitType) {\n      case 'N':\n        markerColor = MarkerColors.IntensiveCare;\n        break;\n      case 'C':\n        markerColor = MarkerColors.IntensiveCare;\n        break;\n      case 'P':\n        markerColor = MarkerColors.StepDown;\n        break;\n    }\n    return markerColor;\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WarningService {\n\n  constructor() {\n  }\n\n  /**\n   * Returns the correct warning color CSS class\n   *\n   * @param warning Warning category\n   */\n  public getWarningClass(warning: string): string {\n    let warningClass: string = null;\n    switch (warning) {\n      case 'V':\n        warningClass = 'vh-warning';\n        break;\n      case 'H':\n        warningClass = 'h-warning';\n        break;\n      case 'M':\n        warningClass = 'm-warning';\n        break;\n      default:\n        break;\n    }\n    return warningClass;\n  }\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FlowsheetsConfigService {\n\n    private singlePeraGraphFlowSheetEndPoint: string = null;\n    private allPeragraphFlowSheetsEndPoint: string = null;\n    private detailedFlowSheetColumnEndpoint: string = null;\n    private latestRiScoresEndPoint: string = null;\n\n    setSinglePeraGraphFlowSheetEndPoint(value: string): void {\n        this.singlePeraGraphFlowSheetEndPoint = value;\n    }\n\n    getSinglePeraGraphFlowSheetEndPoint(): string {\n        if (!this.singlePeraGraphFlowSheetEndPoint) {\n            console.warn('Single PeraGraph flowsheet endpoint is not set!');\n        }\n        return this.singlePeraGraphFlowSheetEndPoint;\n    }\n\n    setAllPeragraphFlowSheetsEndPoint(value: string): void {\n        this.allPeragraphFlowSheetsEndPoint = value;\n    }\n\n    getAllPeragraphFlowSheetsEndPoint(): string {\n        if (!this.allPeragraphFlowSheetsEndPoint) {\n            console.warn('All PeraGraph flowsheets endpoint is not set!');\n        }\n        return this.allPeragraphFlowSheetsEndPoint;\n    }\n\n    setDetailedFlowSheetColumnEndpoint(value: string): void {\n        this.detailedFlowSheetColumnEndpoint = value;\n    }\n\n    getDetailedFlowSheetColumnEndpoint(): string {\n        if (!this.detailedFlowSheetColumnEndpoint) {\n            console.warn('Detailed flowsheet column endpoint is not set!');\n        }\n        return this.detailedFlowSheetColumnEndpoint;\n    }\n\n    setLatestRiScoresEndPoint(value: string): void {\n        this.latestRiScoresEndPoint = value;\n    }\n\n    getLatestRiScoresEndPoint(): string {\n        if (!this.latestRiScoresEndPoint) {\n            console.warn('Latest RI Scores endpoint is not set!');\n        }\n        return this.latestRiScoresEndPoint;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {FlowsheetsConfigService} from '../config/flowsheets-config.service';\nimport {BehaviorSubject, Observable, timer} from 'rxjs';\nimport {FlowSheetBase} from '../../../model/FlowSheetBase';\nimport {switchMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FlowsheetsApiService {\n\n  private readonly flowSheetSubject: BehaviorSubject<Map<number, Array<FlowSheetBase>>>;\n  // Map of numeric RI score keyed by Visit ID\n  private readonly riScoresSubject: BehaviorSubject<Map<number, number>>;\n  // The timer that fires so that clients can get the latest flowsheet and RI score values\n  private pollInstance$: Observable<any>;\n\n  constructor(private http: HttpClient,\n              private flowsheetConfigService: FlowsheetsConfigService) {\n    this.pollInstance$ = timer(0, 60000);\n    this.flowSheetSubject = new BehaviorSubject<Map<number, Array<FlowSheetBase>>>(null);\n    this.riScoresSubject = new BehaviorSubject<Map<number, number>>(null);\n  }\n\n  public getFlowSheetSubject() {\n    return this.flowSheetSubject;\n  }\n\n  public getFlowSheetSubjectValue() {\n    return this.flowSheetSubject.value;\n  }\n\n  public getRiScoresSubject() {\n    return this.riScoresSubject;\n  }\n\n  public getRiScoresSubjectValue() {\n    return this.riScoresSubject.value;\n  }\n\n  getSinglePeraGraphFlowSheet(): Observable<any> {\n    return this.http.get<any>(this.flowsheetConfigService.getSinglePeraGraphFlowSheetEndPoint());\n  }\n\n  getDetailedFlowsheetColumn(): Observable<any> {\n    return this.http.get<any>(this.flowsheetConfigService.getDetailedFlowSheetColumnEndpoint());\n  }\n\n  getAllPeraGraphFlowSheets(): Observable<any> {\n    return this.http.get(this.flowsheetConfigService.getAllPeragraphFlowSheetsEndPoint(), {observe: 'response'});\n  }\n\n  getAllRiScores(): Observable<any> {\n    return this.http.get(this.flowsheetConfigService.getLatestRiScoresEndPoint(), {observe: 'response'});\n  }\n\n  public getFlowSheetInterval() {\n    // Make an HTTP call on an interval\n    return this.pollInstance$.pipe(\n      switchMap(() => this.getAllPeraGraphFlowSheets())\n    );\n  }\n\n  public getLatestRiScoresInterval() {\n    // Make an HTTP call on an interval\n    return this.pollInstance$.pipe(\n      switchMap(() => this.getAllRiScores())\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PeragraphConfigService {\n\n    private singlePeraGraphEndPoint: string = null;\n    private allPeraGraphsEndPoint: string = null;\n\n    public setSinglePeraGraphEndPoint(value: string): void {\n        this.singlePeraGraphEndPoint = value;\n    }\n\n    public getSinglePeraGraphEndPoint(): string {\n        if (!this.singlePeraGraphEndPoint) {\n            console.warn('Single PeraGraph endpoint is not set!');\n        }\n        return this.singlePeraGraphEndPoint;\n    }\n\n    public setAllPeraGraphsEndPoint(value: string): void {\n        this.allPeraGraphsEndPoint = value;\n    }\n\n    public getAllPeraGraphsEndPoint(): string {\n        if (!this.allPeraGraphsEndPoint) {\n            console.warn('All PeraGraph endpoint is not set!');\n        }\n        return this.allPeraGraphsEndPoint;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, Observable, timer} from 'rxjs';\nimport {PeraGraph} from '../../../model/PeraGraph';\nimport {switchMap} from 'rxjs/operators';\nimport {PeragraphConfigService} from '../config/peragraph-config.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PeragraphApiService {\n\n    private readonly _peraGraphSubject: BehaviorSubject<Array<PeraGraph>>;\n    private pollInstance$: Observable<any>;\n\n    constructor(private http: HttpClient,\n                private peragraphConfigService: PeragraphConfigService) {\n        this.pollInstance$ = timer(0, 60000);\n        this._peraGraphSubject = new BehaviorSubject<Array<PeraGraph>>([]);\n    }\n\n    public getPeraGraphSubject() {\n        return this._peraGraphSubject;\n    }\n\n    public getSinglePeragraph(): Observable<PeraGraph> {\n        return this.http.get<PeraGraph>(this.peragraphConfigService.getSinglePeraGraphEndPoint());\n    }\n\n    public getAllPeragraphs(): Observable<any> {\n        return this.http.get(this.peragraphConfigService.getAllPeraGraphsEndPoint());\n    }\n\n    public getPeraGraphInterval() {\n        // Make an HTTP call on an interval\n        return this.pollInstance$.pipe(\n            switchMap(() => this.getAllPeragraphs()));\n\n        /*\n         TODO Have a different method with the filtering criteria, using the same subject,\n         and call it when the filter changes. Then we push the change.\n\n         Do the same thing with sorting.\n         */\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {PeraGraph} from '../model/PeraGraph';\nimport {DateService} from './date.service';\nimport * as moment_ from 'moment-timezone';\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n\n  constructor(public dateService: DateService) {\n  }\n\n  /**\n   * Returns the patient age in years, months using the patient DOB\n   */\n  public getPatientAge(graph: PeraGraph): string {\n    if (graph && graph.patient && graph.patient.dob) {\n      const daysOld = Math.floor(\n        Math.round((this.dateService.translateDate(moment.utc().valueOf(), graph.timeZone) - graph.patient.dob) / 86400000));\n\n      const d = 'd';\n      const w = 'w';\n      const m = 'm';\n      const y = 'y';\n\n      if (daysOld < 7) {\n        return Math.floor(daysOld) + d;\n      } else if (daysOld >= 7 && daysOld < 31) {\n        return Math.floor(daysOld / 7) + w + Math.floor(daysOld % 7) + d;\n      } else if (daysOld >= 31 && daysOld < 365) {\n        return Math.floor(daysOld / 29.7) + m + Math.floor((daysOld % 29.7) / 7) + w;\n      } else if (daysOld >= 365 && daysOld < 730) {\n        return Math.floor(daysOld / 365) + y + Math.floor((daysOld % 365) / 29.7) + m;\n      } else {\n        return Math.floor(daysOld / 365) + y;\n      }\n    } else {\n      return ' ';\n    }\n  }\n\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CommonService {\n\n    /**\n     * Parse any primitive value (string, number, boolean, undefined or null) to a boolean true or false.\n     * @param value Value to parse.\n     */\n    public primitiveToBoolean(value?: string | number | boolean | null): boolean {\n        if (value == null) {\n            return false;\n        }\n\n        if (value === 'true' || value === 'True' || value === 'TRUE') {\n            return true;\n        }\n\n        return typeof value === 'string'\n            ? !!+value   // we parse string to number first\n            : !!value;\n    }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationsService {\n\n  translations = [];\n\n  private keyTranslations = {\n    'ACTIVE': 'perahealth.translation.ACTIVE',\n    'DATA_UPDATED': 'perahealth.translation.DATA_UPDATED',\n    'ELAPSED': 'perahealth.translation.ELAPSED',\n    'OVERRIDDEN': 'perahealth.translation.OVERRIDDEN',\n    'RESUMED': 'perahealth.translation.RESUMED',\n    'V': 'perahealth.translation.VH',\n    'H': 'perahealth.translation.H',\n    'M': 'perahealth.translation.M',\n    'N': 'perahealth.translation.N'\n  };\n\n  constructor() {\n  }\n\n  getTranslation(key: string): string {\n    return (key) ? this.translations[key] : '';\n  }\n\n  public getKeyTranslation(key: string): string {\n    return (key) ? this.translations[this.keyTranslations[key]] : '';\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TranslationsConfigService {\n\n    private translationsEndPoint: string = null;\n\n    public setTranslationsEndPoint(value: string): void {\n        this.translationsEndPoint = value;\n    }\n\n    public getTranslationsEndpoint(): string {\n        if (!this.translationsEndPoint) {\n            console.warn('Translations endpoint is not set!');\n        }\n        return this.translationsEndPoint;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\nimport {TranslationsConfigService} from '../config/translations-config.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TranslationsApiService {\n\n    constructor(private http: HttpClient,\n                private translationsConfigService: TranslationsConfigService) {\n    }\n\n    getAllTranslations(): Observable<any> {\n        return this.http.get<any>(this.translationsConfigService.getTranslationsEndpoint());\n    }\n\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DiagnosisConfigService {\n\n    private primaryDiagnosesEndpoint: string = null;\n\n    public getPrimaryDiagnosesEndpoint(): string {\n        if (!this.primaryDiagnosesEndpoint) {\n            console.warn('Primary diagnoses endpoint is not set!');\n        }\n        return this.primaryDiagnosesEndpoint;\n    }\n\n    public setPrimaryDiagnosesEndpoint(value: string): void {\n        this.primaryDiagnosesEndpoint = value;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {DiagnosisConfigService} from '../config/diagnosis-config.service';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, Observable, timer} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiagnosisApiService {\n\n  // The timer that fires so that clients can get the latest diagnoses\n  private pollInstance$: Observable<any>;\n  // Map of primary diagnosis keyed by visit ID\n  private readonly diagnosesSubject: BehaviorSubject<Map<number, string>>;\n\n  constructor(private http: HttpClient, private diagnosisConfigService: DiagnosisConfigService) {\n    this.pollInstance$ = timer(0, 60000);\n    this.diagnosesSubject = new BehaviorSubject<Map<number, string>>(null);\n  }\n\n  public getDiagnosesSubject() {\n    return this.diagnosesSubject;\n  }\n\n  public getDiagnosesSubjectValue() {\n    return this.diagnosesSubject.value;\n  }\n\n  public getAllDiagnoses(): Observable<any> {\n    return this.http.get(this.diagnosisConfigService.getPrimaryDiagnosesEndpoint(), {observe: 'response'});\n  }\n\n  public getPrimaryDiagnosesInterval() {\n    // Make an HTTP call on an interval\n    return this.pollInstance$.pipe(\n      switchMap(() => this.getAllDiagnoses())\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TokenConfigService {\n    private checkTokenEndPoint: string = null;\n    private refreshTokenEndPoint: string = null;\n    private getTokenEndPoint: string = null;\n\n    public setCheckTokenEndPoint(value: string): void {\n        this.checkTokenEndPoint = value;\n    }\n\n    public getCheckTokenEndPoint(): string {\n        if (!this.checkTokenEndPoint) {\n            console.warn('Check token endpoint is not set!');\n        }\n        return this.checkTokenEndPoint;\n    }\n\n    public setRefreshTokenEndPoint(value: string): void {\n        this.refreshTokenEndPoint = value;\n    }\n\n    public getRefreshTokenEndPoint(): string {\n        if (!this.refreshTokenEndPoint) {\n            console.warn('Refresh token endpoint is not set!');\n        }\n        return this.refreshTokenEndPoint;\n    }\n\n    public setGetTokenEndPoint(value: string): void {\n        this.getTokenEndPoint = value;\n    }\n\n    public getGetTokenEndPoint(): string {\n        if (!this.getTokenEndPoint) {\n            console.warn('Get token endpoint is not set!');\n        }\n        return this.getTokenEndPoint;\n    }\n}\n","export class User {\n  username: string = null;\n  password: string = null;\n  firstname: string = null;\n  lastname: string = null;\n  appid: string = null;\n  roles: Array<string> = null;\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {User} from '../../../model/User';\nimport {TokenConfigService} from '../config/token-config.service';\nimport {Storage} from '@ionic/storage';\nimport {first} from 'rxjs/operators';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TokenApiService {\n    private jwtTokenName = 'jwt_token';\n    // Make the appId available to other services\n    private appId: string = null;\n\n    private deviceToken: string = null;\n\n    // Used to report when a token has been retrieved from storage\n    public readonly token$: Subject<string> = new Subject<string>();\n\n    constructor(private http: HttpClient,\n                private jwtHelper: JwtHelperService,\n                private config: TokenConfigService,\n                private storage: Storage) {\n    }\n\n    /**\n     * Check the current token.\n     */\n    public checkToken() {\n        this.token$.pipe(first()).subscribe((token: string) => {\n            const decodedToken = this.jwtHelper.decodeToken(token);\n            if (decodedToken) {\n                // Convert to a user object to send to the REST service\n                const user = new User();\n                user.username = decodedToken['sub'];\n                user.roles = decodedToken['roles'];\n                user.firstname = decodedToken['firstname'];\n                user.lastname = decodedToken['lastname'];\n                user.appid = decodedToken['appid'];\n\n                // console.log('Existing, valid client side token found. Checking the server.');\n                this.http.post(this.config.getCheckTokenEndPoint(), user).pipe(first()).subscribe(() => {\n                    // If we land in here, then the token interceptor on the server validated the token\n                    this.appId = user.appid;\n                    // console.log('Valid token!');\n                    this.token$.next(token);\n                }, (e) => {\n                    this.appId = null;\n                    // console.log('Invalid token!');\n                    this.token$.next(null);\n                });\n            } else {\n                // console.log('Removing invalid token from storage.');\n                this.clearToken();\n                this.token$.next(null);\n            }\n        });\n        this.getExistingToken();\n    }\n\n    /**\n     * Refresh the token for the given user.\n     *\n     * @param user User for which to refresh token.\n     */\n    public refreshToken(user: User) {\n        if (!user || !user.username) {\n            // console.log('Valid user not supplied, cannot refresh token!');\n        } else {\n            setTimeout(() => {\n                this.token$.pipe(first()).subscribe((token: string) => {\n                    // Check whether or not the token is valid according to the server\n                    this.http.post(this.config.getRefreshTokenEndPoint(), user, {responseType: 'text'}).pipe(first()).subscribe((token: string) => {\n                            // console.log('Successfully retrieved updated token [' + token + ']');\n                            this.storage.set(this.jwtTokenName, token)\n                        },\n                        () => {\n                            // The server thinks the token is not valid (expired, the secret key changed, etc)\n                            // console.log('Invalid token!');\n                            this.clearToken();\n                            this.token$.next(null);\n                        });\n                });\n                this.getExistingToken();\n            }, 100);\n        }\n    }\n\n    public getToken(user: User) {\n        // Check whether or not the token is valid according to the server\n        this.http.post(this.config.getGetTokenEndPoint(), user, {responseType: 'text'}).pipe(first()).subscribe((token: string) => {\n                // console.log('Successfully retrieved new token: [' + token + ']');\n                this.appId = user.appid;\n                this.storage.set(this.jwtTokenName, token)\n                    .then(() => {\n                        // console.log('New token added to storage. [' + token + ']')\n                        this.token$.next(token);\n                    }, () => {\n                        // console.log('Could not store new token!');\n                        this.token$.next(null);\n                    });\n            },\n            (e) => {\n                // The server thinks the token is not valid (expired, the secret key changed, etc)\n                // console.log('Could not retrieve new token!');\n                this.token$.next(null);\n            });\n    }\n\n    public clearToken() {\n        this.storage.remove(this.jwtTokenName)\n            .then((jwt: string) => {\n                // console.log('JWT removed from storage');\n            }, (reason: any) => {\n                // console.log('JWT could not be removed from storage. Reason = ' + reason);\n            });\n    }\n\n    public getExistingToken() {\n        this.storage.get(this.jwtTokenName)\n            .then((token: string) => {\n                this.token$.next(token);\n            }, (error) => {\n                this.token$.next(null);\n            })\n            .catch((error) => {\n                this.token$.next(null);\n            });\n    }\n\n    public getAppId(): string {\n        return this.appId;\n    }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LocationsConfigService {\n    private activeFacilitiesEndpoint: string = null;\n    private activeUnitsEndpoint: string = null;\n\n    public getActiveFacilitiesEndpoint(): string {\n        if (!this.activeFacilitiesEndpoint) {\n            console.warn('Active facilities endpoint is not set!');\n        }\n        return this.activeFacilitiesEndpoint;\n    }\n\n    public setActiveFacilitiesEndpoint(value: string): void {\n        this.activeFacilitiesEndpoint = value;\n    }\n\n    public getActiveUnitsEndpoint(): string {\n        if (!this.activeUnitsEndpoint) {\n            console.warn('Active units endpoint is not set!');\n        }\n        return this.activeUnitsEndpoint;\n    }\n\n    public setActiveUnitsEndpoint(value: string): void {\n        this.activeUnitsEndpoint = value;\n    }\n}\n","import {Facility} from './Facility';\nimport {Unit} from './Unit';\n\nexport class Locations {\n  public facilities: Facility[] = [];\n  public units: Unit[] = [];\n}\n","import {Injectable, OnDestroy} from '@angular/core';\nimport {Unit} from '../../../model/Unit';\nimport {Facility} from '../../../model/Facility';\nimport {HttpClient} from '@angular/common/http';\nimport {LocationsConfigService} from '../config/locations-config.service';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Locations} from '../../../model/Locations';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationsApiService implements OnDestroy {\n\n  private facilitySubscription: Subscription;\n  private unitSubscription: Subscription;\n\n  public readonly facilitiesAndUnit$: Subject<{ facilities: Facility[], units: Unit[] }>;\n\n  private locations: Locations = new Locations();\n\n  constructor(\n    private http: HttpClient,\n    private locationsConfigService: LocationsConfigService) {\n    this.facilitiesAndUnit$ = new Subject<{ facilities: Facility[], units: Unit[] }>();\n  }\n\n  /**\n   * Updates facilities and units and calls the facilitiesAndUnitSubject when it completes.\n   * Will use a cache if they were previously retrieved.\n   */\n  public getFacilitiesAndUnits() {\n    if (this.locations.facilities && this.locations.facilities.length > 0 && this.locations.units && this.locations.units.length > 0) {\n      this.facilitiesAndUnit$.next(this.locations);\n    } else {\n      /** Receive all facilities and active units and set instance variables for caching */\n      this.facilitySubscription = this.getActiveFacilities().pipe(map((f) => f.facilities)).subscribe((facilities: Facility[]) => {\n        if (facilities && facilities.length > 0) {\n          const facilityIds: String[] = [];\n          for (const facility of facilities) {\n            facilityIds.push(facility.facilityID);\n          }\n          this.unitSubscription = this.getActiveUnitsForFacilities(facilityIds).pipe((map((u) => u.units))).subscribe((units: Unit[]) => {\n            // filter out facilities with no active units\n            this.locations = new Locations();\n            for (const f of facilities) {\n              let hasActiveUnits = false;\n              for (const u of units) {\n                if (u.key.facilityID === f.facilityID) {\n                  hasActiveUnits = true;\n                  break;\n                }\n              }\n              if (hasActiveUnits) {\n                this.locations.facilities.push(f);\n              }\n            }\n            this.locations.units = units;\n            this.facilitiesAndUnit$.next(this.locations);\n          }, (e) => {\n            console.log('Could not update units! Error = ' + e.message);\n          });\n        }\n      }, (e) => {\n        console.log('Could not update facilities! Error = ' + e.message);\n      });\n    }\n  }\n\n  getActiveFacilities(): Observable<{ facilities: Array<Facility> }> {\n    console.log('Getting all facilities: ' + this.locationsConfigService.getActiveFacilitiesEndpoint());\n    return this.http.get<{ facilities: Array<Facility> }>(this.locationsConfigService.getActiveFacilitiesEndpoint());\n  }\n\n  getActiveUnitsForFacilities(facilities: String[]): Observable<{ units: Array<Unit> }> {\n    console.log('Getting all active units: ' + this.locationsConfigService.getActiveUnitsEndpoint() + facilities);\n    return this.http.get<{ units: Array<Unit> }>(this.locationsConfigService.getActiveUnitsEndpoint() + facilities);\n  }\n\n  ngOnDestroy(): void {\n    if (this.facilitySubscription && !this.facilitySubscription.closed) {\n      this.facilitySubscription.unsubscribe();\n    }\n    if (this.unitSubscription && !this.unitSubscription.closed) {\n      this.unitSubscription.unsubscribe();\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsageConfigService {\n  private usageDataEndPoint: string;\n  // Default to polling every 5 seconds\n  private usagePollingInterval = 5000;\n\n  /** @param value Endpoint for sending usage data. */\n  public setUsageDataEndPoint(value: string): void {\n    this.usageDataEndPoint = value;\n  }\n\n  /** Endpoint for sending usage data. */\n  public getUsageDataEndPoint(): string {\n    if (!this.usageDataEndPoint) {\n      console.warn('usage data endpoint is not set!');\n    }\n    return this.usageDataEndPoint;\n  }\n\n  /** Number of milliseconds between polling attempts. */\n  public getUsagePollingInterval(): number {\n    return this.usagePollingInterval;\n  }\n\n  /** @param value Number of milliseconds between polling attempts. */\n  public setUsagePollingInterval(value: number): void {\n    this.usagePollingInterval = value;\n  }\n}\n","export class PatientAccess {\n  public viewedBy: string;\n  public patient: string;\n  public vipIndicator: string;\n  public vnm: string;\n  public mrn: string;\n  public admitDate: number;\n  public dischargeDate: number;\n  public facilityId: string;\n  public unitId: string;\n  public provider: string;\n  public utcCode: string;\n  public usageCode: string;\n  public viewDate: number;\n\n\n  constructor(viewedBy: string,\n              patient: string,\n              vipIndicator: string,\n              vnm: string,\n              mrn: string,\n              admitDate: number,\n              dischargeDate: number,\n              facilityId: string,\n              unitId: string,\n              provider: string,\n              utcCode: string,\n              usageCode: string,\n              viewDate: number) {\n    this.viewedBy = viewedBy;\n    this.patient = patient;\n    this.vipIndicator = vipIndicator;\n    this.vnm = vnm;\n    this.mrn = mrn;\n    this.admitDate = admitDate;\n    this.dischargeDate = dischargeDate;\n    this.facilityId = facilityId;\n    this.unitId = unitId;\n    this.provider = provider;\n    this.utcCode = utcCode;\n    this.usageCode = usageCode;\n    this.viewDate = viewDate;\n  }\n}\n","export enum UsageType {\n  Array = 'U',\n  Graph = 'G'\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, Observable, of, Subject, Subscription, timer} from 'rxjs';\nimport {TokenApiService} from '../../token/api/token-api.service';\nimport {PatientAccess} from '../../../model/PatientAccess';\nimport {UsageType} from '../../../model/UsageType';\nimport {PeraGraph} from '../../../model/PeraGraph';\nimport {JwtHelperService} from '@auth0/angular-jwt';\nimport {UsageConfigService} from '../config/usage-config.service';\nimport {first, map, tap} from 'rxjs/operators';\nimport * as moment_ from 'moment-timezone';\nimport {LocationsApiService} from '../../locations/api/locations-api.service';\nimport {Locations} from \"../../../model/Locations\";\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UsageApiService {\n\n    public usageDataAdded$: Subject<PatientAccess>;\n    private pollInstance$: Observable<any>;\n    private readonly graphUpdated$: Subject<PeraGraph>;\n    private usageData: Array<PatientAccess> = new Array<PatientAccess>();\n    // Visits that have been viewed in the array view are only added to usageData once per session\n    private viewedVisits: string[] = [];\n    private initialized = false;\n    private locations: Locations;\n    private locationsLoaded$: Subject<boolean> = new Subject<boolean>();\n    private locationsLoaded: boolean = false;\n    private startedLoadingLocations = false;\n\n    // The token service is necessary to get the appId\n    constructor(private http: HttpClient,\n                private jwtHelper: JwtHelperService,\n                private usageConfigService: UsageConfigService,\n                private locationService: LocationsApiService,\n                private tokenApiService: TokenApiService) {\n        this.graphUpdated$ = new Subject<PeraGraph>();\n        this.usageDataAdded$ = new Subject<PatientAccess>();\n    }\n\n    public init() {\n        if (!this.initialized) {\n            this.initialized = true;\n        }\n    }\n\n    public startUsageReportingService(): void {\n        this.pollInstance$ = timer(0, this.usageConfigService.getUsagePollingInterval());\n        this.pollInstance$.subscribe(() => {\n            if (this.usageData && this.usageData.length > 0) {\n                this.submitUsageData();\n            }\n        });\n        if (this.usageData && this.usageData.length > 0) {\n            // Submit now in case the user closes the window before the timer fires\n            this.submitUsageData();\n        }\n        // get all the locations when the service is initialized\n        this.locationService.facilitiesAndUnit$.pipe(first()).subscribe((locations: Locations) => {\n            this.locations = locations;\n            this.locationsLoaded = true;\n            this.locationsLoaded$.next(true);\n        });\n        this.locationService.getFacilitiesAndUnits();\n    }\n\n    public submitUsageData(): void {\n        console.log('Submitting usage data for app ' + this.tokenApiService.getAppId() + ' Size = ' + this.usageData.length);\n        const usageDataCopy = this.usageData.slice();\n        this.usageData = [];\n        this.http.post(this.usageConfigService.getUsageDataEndPoint(), usageDataCopy).pipe(first()).subscribe();\n    }\n\n    /**\n     * When the user logs out of the system, we need to clear the cache\n     * so that the graph views are sent if they log in again.\n     */\n    public clearUsageCache(): void {\n        this.viewedVisits = [];\n    }\n\n    /**\n     * Add usage data.\n     * @param graphToLog The information that was viewed.\n     * @param usageType The context in which the information was viewed.\n     */\n    public addUsageData(graphToLog: PeraGraph, usageType: UsageType): void {\n        // We have to replace the facility and unit IDs with the real deals\n        this.updateFacilityAndUnitIdsForGraph(graphToLog).pipe(first(), tap((graph: PeraGraph) => {\n            this.tokenApiService.token$.pipe(first()).subscribe((token: string) => {\n                if (usageType === UsageType.Array) {\n                    // Only log 1 graph view per session when viewed in the array view\n                    if (graph && this.viewedVisits.indexOf(graph.vnm) < 0) {\n                        // We only log 1 visit view of a specific type per session\n                        this.viewedVisits.push(graph.vnm);\n                        this.addUsageDataFromToken(graph, usageType, token);\n                    }\n                } else {\n                    // Always add graph views because the user clicked on a graph in the array view\n                    this.addUsageDataFromToken(graph, usageType, token);\n                }\n            });\n            this.tokenApiService.getExistingToken();\n        })).subscribe();\n        if (!this.locationsLoaded && !this.startedLoadingLocations) {\n            this.startedLoadingLocations = true;\n            this.locationService.getFacilitiesAndUnits();\n        }\n    }\n\n    /**\n     * lookup and insert the unit id and fac id of graph to log\n     * @param graph - graph to log\n     */\n    private updateFacilityAndUnitIdsForGraph(graph: PeraGraph): Observable<PeraGraph> {\n        // Create a clone of the original graph since we are updating the facility and unit\n        // to their original IDs for Usage.\n        const cloneGraph: PeraGraph = JSON.parse(JSON.stringify(graph));\n        if (this.locationsLoaded === true) {\n            return of(UsageApiService.assignUnitAndFacIdToPeraGraph(cloneGraph, this.locations));\n        } else {\n            return this.locationsLoaded$.pipe(map(() => {\n                return UsageApiService.assignUnitAndFacIdToPeraGraph(cloneGraph, this.locations);\n            }));\n        }\n    }\n\n    /**\n     * helper method for looking up fac and unit ids\n     * @param graph - graph to replace unitId and facId of\n     * @param locations - all locations available to search\n     */\n    private static assignUnitAndFacIdToPeraGraph(graph: PeraGraph, locations: Locations): PeraGraph {\n        for (const fac of locations.facilities) {\n            if (graph.facilityId === fac.displayName) {\n                graph.facilityId = fac.facilityID;\n                break;\n            }\n        }\n        for (const unit of locations.units) {\n            if (graph.unitId === unit.displayName) {\n                graph.unitId = unit.key.unitID;\n                break;\n            }\n        }\n        return graph;\n    }\n\n    private addUsageDataFromToken(graph: PeraGraph, usageType: UsageType, token: string): void {\n        const decodedToken = this.jwtHelper.decodeToken(token);\n        if (decodedToken) {\n            // Convert to a user object to send to the REST service\n            const pa: PatientAccess = new PatientAccess(\n                decodedToken['sub'], // The claims subject is the username\n                graph.patient.lname + ', ' + graph.patient.fname,\n                graph.vipIndicator,\n                graph.vnm,\n                graph.patient.medicalRecordNumber,\n                graph.admitDate,\n                graph.dischargeDate,\n                graph.facilityId,\n                graph.unitId,\n                graph.attendingProvider.lastName + ', ' + graph.attendingProvider.firstName,\n                graph.visitUnitType,\n                usageType,\n                moment.valueOf()\n            );\n            this.usageData.push(pa);\n            // This can be used for testing and for the timing of individual calls to submitUsageData()\n            this.usageDataAdded$.next(pa);\n        }\n    }\n}\n","export class Facility {\n\n  public active: number;\n  public facilityID: string;\n  public displayName: string;\n  public displayOrder: number;\n  public facilityTimezone: string;\n  public fullName: String;\n  public primaryType: String;\n  public secondaryType: String;\n\n\n    constructor(active: number, facilityID: string, displayName: string, displayOrder: number, facilityTimezone: string, fullName: String, primaryType: String, secondaryType: String) {\n        this.active = active;\n        this.facilityID = facilityID;\n        this.displayName = displayName;\n        this.displayOrder = displayOrder;\n        this.facilityTimezone = facilityTimezone;\n        this.fullName = fullName;\n        this.primaryType = primaryType;\n        this.secondaryType = secondaryType;\n    }\n}\n","import {UnitKey} from './UnitKey';\n\nexport class Unit {\n\n  public key: UnitKey;\n  public displayName: string;\n  public utcCode: any;\n\n  constructor(key: UnitKey, displayName: string, utcCode: any) {\n    this.key = key;\n    this.displayName = displayName;\n    this.utcCode = utcCode;\n  }\n}\n","export class UnitKey {\n\n    public facilityID: string;\n    public unitID: string;\n\n    constructor(fid: string, uid: string) {\n        this.facilityID = fid;\n        this.unitID = uid;\n    }\n}\n"],"names":["moment","tslib_1.__values"],"mappings":"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"}
