/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as moment_ from 'moment';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
// The JavaScript compiler gives a weird "moment cannot be used as a namespace" type of error
// This is the workaround...
/** @type {?} */
const moment = moment_;
export class ArrayViewConfigService {
    constructor() {
        this.configurationLoaded$ = new BehaviorSubject(false);
        this.currentTimestamp = null;
        this.toolTipInfoEndPoint = null;
    }
    /**
     * @return {?}
     */
    getToolTipInfoEndPoint() {
        if (!this.toolTipInfoEndPoint) {
            console.warn('Tooltip endpoint is not set!');
        }
        return this.toolTipInfoEndPoint;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    setToolTipInfoEndPoint(val) {
        this.toolTipInfoEndPoint = val;
    }
    /**
     * @return {?}
     */
    getCurrentTimestamp() {
        return this.currentTimestamp;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setCurrentTimestamp(value) {
        this.currentTimestamp = value;
    }
}
ArrayViewConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ ArrayViewConfigService.ngInjectableDef = i0.defineInjectable({ factory: function ArrayViewConfigService_Factory() { return new ArrayViewConfigService(); }, token: ArrayViewConfigService, providedIn: "root" });
if (false) {
    /** @type {?} */
    ArrayViewConfigService.prototype.configurationLoaded$;
    /**
     * @type {?}
     * @private
     */
    ArrayViewConfigService.prototype.currentTimestamp;
    /**
     * @type {?}
     * @private
     */
    ArrayViewConfigService.prototype.toolTipInfoEndPoint;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktdmlldy1jb25maWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWFycmF5LXZpZXctbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2FycmF5LXZpZXctY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxLQUFLLE9BQU8sTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFDLGVBQWUsRUFBVSxNQUFNLE1BQU0sQ0FBQzs7Ozs7TUFJeEMsTUFBTSxHQUFHLE9BQU87QUFLdEIsTUFBTSxPQUFPLHNCQUFzQjtJQUhuQztRQUlXLHlCQUFvQixHQUE2QixJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUNwRixxQkFBZ0IsR0FBVyxJQUFJLENBQUM7UUFDaEMsd0JBQW1CLEdBQVcsSUFBSSxDQUFDO0tBb0I5Qzs7OztJQWxCVSxzQkFBc0I7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLENBQUM7U0FDaEQ7UUFDRCxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztJQUNwQyxDQUFDOzs7OztJQUVNLHNCQUFzQixDQUFDLEdBQVc7UUFDckMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEdBQUcsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRU0sbUJBQW1CO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRU0sbUJBQW1CLENBQUMsS0FBYTtRQUNwQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0lBQ2xDLENBQUM7OztZQXpCSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7O0lBRUcsc0RBQTRGOzs7OztJQUM1RixrREFBd0M7Ozs7O0lBQ3hDLHFEQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBtb21lbnRfIGZyb20gJ21vbWVudCc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbi8vIFRoZSBKYXZhU2NyaXB0IGNvbXBpbGVyIGdpdmVzIGEgd2VpcmQgXCJtb21lbnQgY2Fubm90IGJlIHVzZWQgYXMgYSBuYW1lc3BhY2VcIiB0eXBlIG9mIGVycm9yXG4vLyBUaGlzIGlzIHRoZSB3b3JrYXJvdW5kLi4uXG5jb25zdCBtb21lbnQgPSBtb21lbnRfO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFycmF5Vmlld0NvbmZpZ1NlcnZpY2Uge1xuICAgIHB1YmxpYyBjb25maWd1cmF0aW9uTG9hZGVkJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG4gICAgcHJpdmF0ZSBjdXJyZW50VGltZXN0YW1wOiBudW1iZXIgPSBudWxsO1xuICAgIHByaXZhdGUgdG9vbFRpcEluZm9FbmRQb2ludDogc3RyaW5nID0gbnVsbDtcblxuICAgIHB1YmxpYyBnZXRUb29sVGlwSW5mb0VuZFBvaW50KCkge1xuICAgICAgICBpZiAoIXRoaXMudG9vbFRpcEluZm9FbmRQb2ludCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdUb29sdGlwIGVuZHBvaW50IGlzIG5vdCBzZXQhJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbFRpcEluZm9FbmRQb2ludDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0VG9vbFRpcEluZm9FbmRQb2ludCh2YWw6IHN0cmluZykge1xuICAgICAgICB0aGlzLnRvb2xUaXBJbmZvRW5kUG9pbnQgPSB2YWw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEN1cnJlbnRUaW1lc3RhbXAoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRpbWVzdGFtcDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0Q3VycmVudFRpbWVzdGFtcCh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWVzdGFtcCA9IHZhbHVlO1xuICAgIH1cbn1cbiJdfQ==