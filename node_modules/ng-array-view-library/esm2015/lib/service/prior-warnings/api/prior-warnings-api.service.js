/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { PriorWarningsConfigService } from '../config/prior-warnings-config.service';
import { BehaviorSubject, timer } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../config/prior-warnings-config.service";
export class PriorWarningsApiService {
    /**
     * @param {?} http
     * @param {?} priorWarningsConfigService
     */
    constructor(http, priorWarningsConfigService) {
        this.http = http;
        this.priorWarningsConfigService = priorWarningsConfigService;
        this.pollInstance$ = timer(0, 60000);
        this._priorWarningSubject = new BehaviorSubject(null);
    }
    /**
     * @return {?}
     */
    getPriorWarningSubjectValue() {
        return this._priorWarningSubject.value;
    }
    /**
     * @return {?}
     */
    getPriorWarningSubject() {
        return this._priorWarningSubject;
    }
    /**
     * @return {?}
     */
    getPriorWarnings() {
        return this.http.get(this.priorWarningsConfigService.getPriorWarningEndPoint(), { observe: 'response' });
    }
    /**
     * @return {?}
     */
    getPriorWarningInterval() {
        return this.pollInstance$.pipe(switchMap(() => this.getPriorWarnings()));
    }
}
PriorWarningsApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PriorWarningsApiService.ctorParameters = () => [
    { type: HttpClient },
    { type: PriorWarningsConfigService }
];
/** @nocollapse */ PriorWarningsApiService.ngInjectableDef = i0.defineInjectable({ factory: function PriorWarningsApiService_Factory() { return new PriorWarningsApiService(i0.inject(i1.HttpClient), i0.inject(i2.PriorWarningsConfigService)); }, token: PriorWarningsApiService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    PriorWarningsApiService.prototype._priorWarningSubject;
    /**
     * @type {?}
     * @private
     */
    PriorWarningsApiService.prototype.pollInstance$;
    /**
     * @type {?}
     * @private
     */
    PriorWarningsApiService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    PriorWarningsApiService.prototype.priorWarningsConfigService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpb3Itd2FybmluZ3MtYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1hcnJheS12aWV3LWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9wcmlvci13YXJuaW5ncy9hcGkvcHJpb3Itd2FybmluZ3MtYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBQywwQkFBMEIsRUFBQyxNQUFNLHlDQUF5QyxDQUFDO0FBQ25GLE9BQU8sRUFBQyxlQUFlLEVBQWMsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3hELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUt6QyxNQUFNLE9BQU8sdUJBQXVCOzs7OztJQUtsQyxZQUFvQixJQUFnQixFQUNoQiwwQkFBc0Q7UUFEdEQsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQiwrQkFBMEIsR0FBMUIsMEJBQTBCLENBQTRCO1FBQ3hFLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxlQUFlLENBQXNCLElBQUksQ0FBQyxDQUFDO0lBQzdFLENBQUM7Ozs7SUFFTSwyQkFBMkI7UUFDaEMsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFTSxzQkFBc0I7UUFDM0IsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELGdCQUFnQjtRQUNkLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLHVCQUF1QixFQUFFLEVBQUUsRUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztJQUN6RyxDQUFDOzs7O0lBRU0sdUJBQXVCO1FBQzVCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQzVCLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7O1lBN0JGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVBPLFVBQVU7WUFDViwwQkFBMEI7Ozs7Ozs7O0lBU2hDLHVEQUE0RTs7Ozs7SUFDNUUsZ0RBQXVDOzs7OztJQUUzQix1Q0FBd0I7Ozs7O0lBQ3hCLDZEQUE4RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7UHJpb3JXYXJuaW5nc0NvbmZpZ1NlcnZpY2V9IGZyb20gJy4uL2NvbmZpZy9wcmlvci13YXJuaW5ncy1jb25maWcuc2VydmljZSc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUHJpb3JXYXJuaW5nc0FwaVNlcnZpY2Uge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX3ByaW9yV2FybmluZ1N1YmplY3Q6IEJlaGF2aW9yU3ViamVjdDxNYXA8bnVtYmVyLCBzdHJpbmc+PjtcbiAgcHJpdmF0ZSBwb2xsSW5zdGFuY2UkOiBPYnNlcnZhYmxlPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgICAgICAgICAgICBwcml2YXRlIHByaW9yV2FybmluZ3NDb25maWdTZXJ2aWNlOiBQcmlvcldhcm5pbmdzQ29uZmlnU2VydmljZSkge1xuICAgIHRoaXMucG9sbEluc3RhbmNlJCA9IHRpbWVyKDAsIDYwMDAwKTtcbiAgICB0aGlzLl9wcmlvcldhcm5pbmdTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxNYXA8bnVtYmVyLCBzdHJpbmc+PihudWxsKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRQcmlvcldhcm5pbmdTdWJqZWN0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByaW9yV2FybmluZ1N1YmplY3QudmFsdWU7XG4gIH1cblxuICBwdWJsaWMgZ2V0UHJpb3JXYXJuaW5nU3ViamVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJpb3JXYXJuaW5nU3ViamVjdDtcbiAgfVxuXG4gIGdldFByaW9yV2FybmluZ3MoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLnByaW9yV2FybmluZ3NDb25maWdTZXJ2aWNlLmdldFByaW9yV2FybmluZ0VuZFBvaW50KCksIHtvYnNlcnZlOiAncmVzcG9uc2UnfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UHJpb3JXYXJuaW5nSW50ZXJ2YWwoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9sbEluc3RhbmNlJC5waXBlKFxuICAgICAgc3dpdGNoTWFwKCgpID0+IHRoaXMuZ2V0UHJpb3JXYXJuaW5ncygpKSk7XG4gIH1cblxufVxuIl19