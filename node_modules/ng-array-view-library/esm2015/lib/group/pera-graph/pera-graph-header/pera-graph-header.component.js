/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';
import { PeraGraphService } from '../service/pera-graph.service';
import { WarningService } from 'ng-common-library';
import { ArrayViewService } from '../../../service/array-view.service';
export class PeraGraphHeaderComponent {
    /**
     * @param {?} peraGraphService
     * @param {?} warningService
     * @param {?} arrayViewService
     * @param {?} ref
     */
    constructor(peraGraphService, warningService, arrayViewService, ref) {
        this.peraGraphService = peraGraphService;
        this.warningService = warningService;
        this.arrayViewService = arrayViewService;
        this.ref = ref;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Subscribe to the chart title subject and invoke change detection when new value is pushed.
        this.arrayViewService.chartTitleSubject$.subscribe(() => {
            if (this.ref) {
                this.ref.detectChanges();
            }
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // If the latest RI or graph changed, update the header color
        if (changes.latestRi || changes.graph) {
            this.updateHeaderColor();
        }
        this.priorWarningIndicator = this.warningService.getWarningClass(this.priorWarning);
        // This is so that QA can find the prior warning indicator and ensure that it has the correct color
        this.priorWarningIndicatorId = 'priorWarningIndicator-' + this.graph.vnm;
    }
    /**
     * @return {?}
     */
    updateHeaderColor() {
        /** @type {?} */
        const warning = (this.graph) ? this.graph.activeWarning : null;
        this.style = {
            backgroundColor: this.peraGraphService.getBackgroundColorByWarningAndRi(warning, this.latestRi, this.graph.discharged),
            width: '100%',
        };
    }
}
PeraGraphHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'phlib-pera-graph-header',
                template: "<div id=\"{{ arrayViewService.chartTitleSubject$.value.returnFunc(this.graph) }}\" class=\"ph-header\">\n    <!-- Match the background color to the warning level-->\n    <div id=\"headerbackground\" class=\"inner\" [ngStyle]=\"style\">&nbsp;</div>\n    <!-- Display the prior warning indicator on the right side of the header -->\n    <div id=\"{{priorWarningIndicatorId}}}\" class=\"inner {{priorWarningIndicator}}\" style=\"width: 100%; background-color: transparent\"></div>\n    <!-- Display the graph title... could be the Patient's Name, the MRN, the VNM, etc-->\n    <div class=\"inner ph-header-title\" style=\"background-color: transparent\">\n      {{ arrayViewService.chartTitleSubject$.value.returnFunc(this.graph) }}\n    </div>\n    <!-- Display the Rothman Index on the right side of the header -->\n    <div class=\"inner ph-header-score\" style=\"background-color: transparent\">\n        {{ this.peraGraphService.getRiScoreToDisplay(this.latestRi) }}\n    </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".inner{position:absolute}.ph-header{color:#fff;width:100%;white-space:nowrap}.ph-header-title{text-shadow:1px 1px 3px #000;font-size:.8em;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:table-cell;vertical-align:middle;padding-left:5px;padding-right:5px;padding-top:1px;width:90%}.ph-header-score{font-size:.8em;text-shadow:1px 1px 3px #000;padding-right:5px;width:100%;text-align:right;align-content:right;padding-top:1px}.hide-on-compact{display:none}div{float:left}#headerbackground{height:16%;border-bottom:1px solid #000}.m-warning{width:0;height:0;padding-left:12%;padding-top:12%;overflow:hidden;float:right}.m-warning:after{content:\"\";display:block;width:0;height:0;margin-left:-500px;margin-top:-500px;float:right;border-left:500px solid transparent;border-top:500px solid #f6cc5d}.h-warning{width:0;height:0;padding-left:12%;padding-top:12%;overflow:hidden;float:right}.h-warning:after{content:\"\";display:block;width:0;height:0;margin-left:-500px;margin-top:-500px;float:right;border-left:500px solid transparent;border-top:500px solid #ee834c}.vh-warning{width:0;height:0;padding-left:12%;padding-top:12%;overflow:hidden;float:right}.vh-warning:after{content:\"\";display:block;width:0;height:0;margin-left:-500px;margin-top:-500px;float:right;border-left:500px solid transparent;border-top:500px solid #d51c19}"]
            }] }
];
/** @nocollapse */
PeraGraphHeaderComponent.ctorParameters = () => [
    { type: PeraGraphService },
    { type: WarningService },
    { type: ArrayViewService },
    { type: ChangeDetectorRef }
];
PeraGraphHeaderComponent.propDecorators = {
    graph: [{ type: Input }],
    latestRi: [{ type: Input }],
    priorWarning: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PeraGraphHeaderComponent.prototype.graph;
    /** @type {?} */
    PeraGraphHeaderComponent.prototype.latestRi;
    /** @type {?} */
    PeraGraphHeaderComponent.prototype.style;
    /** @type {?} */
    PeraGraphHeaderComponent.prototype.priorWarningIndicator;
    /** @type {?} */
    PeraGraphHeaderComponent.prototype.priorWarningIndicatorId;
    /** @type {?} */
    PeraGraphHeaderComponent.prototype.priorWarning;
    /** @type {?} */
    PeraGraphHeaderComponent.prototype.peraGraphService;
    /** @type {?} */
    PeraGraphHeaderComponent.prototype.warningService;
    /** @type {?} */
    PeraGraphHeaderComponent.prototype.arrayViewService;
    /** @type {?} */
    PeraGraphHeaderComponent.prototype.ref;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyYS1ncmFwaC1oZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctYXJyYXktdmlldy1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2dyb3VwL3BlcmEtZ3JhcGgvcGVyYS1ncmFwaC1oZWFkZXIvcGVyYS1ncmFwaC1oZWFkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQzFDLFNBQVMsRUFDVCxLQUFLLEVBSVIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDL0QsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBUXJFLE1BQU0sT0FBTyx3QkFBd0I7Ozs7Ozs7SUFnQm5DLFlBQW1CLGdCQUFrQyxFQUNsQyxjQUE4QixFQUM5QixnQkFBa0MsRUFDbEMsR0FBc0I7UUFIdEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxRQUFHLEdBQUgsR0FBRyxDQUFtQjtJQUN6QyxDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLDZGQUE2RjtRQUM3RixJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNwRCxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUM1QjtRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsNkRBQTZEO1FBQzdELElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwRixtR0FBbUc7UUFDbkcsSUFBSSxDQUFDLHVCQUF1QixHQUFHLHdCQUF3QixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzNFLENBQUM7Ozs7SUFFRCxpQkFBaUI7O2NBQ1QsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUM5RCxJQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1gsZUFBZSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQ0FBZ0MsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztZQUN0SCxLQUFLLEVBQUUsTUFBTTtTQUNkLENBQUM7SUFDSixDQUFDOzs7WUFyREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLDArQkFBaUQ7Z0JBRWpELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUNoRDs7OztZQVRPLGdCQUFnQjtZQUNoQixjQUFjO1lBQ2QsZ0JBQWdCO1lBVEssaUJBQWlCOzs7b0JBbUIzQyxLQUFLO3VCQUdMLEtBQUs7MkJBUUwsS0FBSzs7OztJQVhOLHlDQUNNOztJQUVOLDRDQUNTOztJQUVULHlDQUFxQjs7SUFFckIseURBQXNCOztJQUN0QiwyREFBd0I7O0lBRXhCLGdEQUNxQjs7SUFFVCxvREFBeUM7O0lBQ3pDLGtEQUFxQzs7SUFDckMsb0RBQXlDOztJQUN6Qyx1Q0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBDb21wb25lbnQsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE9uSW5pdCxcbiAgICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQZXJhR3JhcGhTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlL3BlcmEtZ3JhcGguc2VydmljZSc7XG5pbXBvcnQge1dhcm5pbmdTZXJ2aWNlfSBmcm9tICduZy1jb21tb24tbGlicmFyeSc7XG5pbXBvcnQge0FycmF5Vmlld1NlcnZpY2V9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2UvYXJyYXktdmlldy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncGhsaWItcGVyYS1ncmFwaC1oZWFkZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcGVyYS1ncmFwaC1oZWFkZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9wZXJhLWdyYXBoLWhlYWRlci5jb21wb25lbnQuY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFBlcmFHcmFwaEhlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKVxuICBncmFwaDtcblxuICBASW5wdXQoKVxuICBsYXRlc3RSaTtcblxuICBwdWJsaWMgc3R5bGU6IG9iamVjdDtcblxuICBwcmlvcldhcm5pbmdJbmRpY2F0b3I7XG4gIHByaW9yV2FybmluZ0luZGljYXRvcklkO1xuXG4gIEBJbnB1dCgpXG4gIHByaW9yV2FybmluZzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwZXJhR3JhcGhTZXJ2aWNlOiBQZXJhR3JhcGhTZXJ2aWNlLFxuICAgICAgICAgICAgICBwdWJsaWMgd2FybmluZ1NlcnZpY2U6IFdhcm5pbmdTZXJ2aWNlLFxuICAgICAgICAgICAgICBwdWJsaWMgYXJyYXlWaWV3U2VydmljZTogQXJyYXlWaWV3U2VydmljZSxcbiAgICAgICAgICAgICAgcHVibGljIHJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgICAgLy8gU3Vic2NyaWJlIHRvIHRoZSBjaGFydCB0aXRsZSBzdWJqZWN0IGFuZCBpbnZva2UgY2hhbmdlIGRldGVjdGlvbiB3aGVuIG5ldyB2YWx1ZSBpcyBwdXNoZWQuXG4gICAgICB0aGlzLmFycmF5Vmlld1NlcnZpY2UuY2hhcnRUaXRsZVN1YmplY3QkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMucmVmKSB7XG4gICAgICAgICAgICAgIHRoaXMucmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAvLyBJZiB0aGUgbGF0ZXN0IFJJIG9yIGdyYXBoIGNoYW5nZWQsIHVwZGF0ZSB0aGUgaGVhZGVyIGNvbG9yXG4gICAgaWYgKGNoYW5nZXMubGF0ZXN0UmkgfHwgY2hhbmdlcy5ncmFwaCkge1xuICAgICAgdGhpcy51cGRhdGVIZWFkZXJDb2xvcigpO1xuICAgIH1cbiAgICB0aGlzLnByaW9yV2FybmluZ0luZGljYXRvciA9IHRoaXMud2FybmluZ1NlcnZpY2UuZ2V0V2FybmluZ0NsYXNzKHRoaXMucHJpb3JXYXJuaW5nKTtcbiAgICAvLyBUaGlzIGlzIHNvIHRoYXQgUUEgY2FuIGZpbmQgdGhlIHByaW9yIHdhcm5pbmcgaW5kaWNhdG9yIGFuZCBlbnN1cmUgdGhhdCBpdCBoYXMgdGhlIGNvcnJlY3QgY29sb3JcbiAgICB0aGlzLnByaW9yV2FybmluZ0luZGljYXRvcklkID0gJ3ByaW9yV2FybmluZ0luZGljYXRvci0nICsgdGhpcy5ncmFwaC52bm07XG4gIH1cblxuICB1cGRhdGVIZWFkZXJDb2xvcigpIHtcbiAgICBjb25zdCB3YXJuaW5nID0gKHRoaXMuZ3JhcGgpID8gdGhpcy5ncmFwaC5hY3RpdmVXYXJuaW5nIDogbnVsbDtcbiAgICB0aGlzLnN0eWxlID0ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLnBlcmFHcmFwaFNlcnZpY2UuZ2V0QmFja2dyb3VuZENvbG9yQnlXYXJuaW5nQW5kUmkod2FybmluZywgdGhpcy5sYXRlc3RSaSwgdGhpcy5ncmFwaC5kaXNjaGFyZ2VkKSxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgfTtcbiAgfVxuXG59XG4iXX0=