/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WarningColors } from '../../../model/WarningColors';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class PeraGraphService {
    constructor() {
        // Subject for navigating to the PSG
        this.graphClicked$ = new Subject();
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    graphClickedEvent(graph) {
        this.closeToolTip();
        this.graphClicked$.next(graph);
    }
    /**
     * @param {?} warning
     * @param {?} latestRi
     * @param {?} isDischarged
     * @return {?}
     */
    getBackgroundColorByWarningAndRi(warning, latestRi, isDischarged) {
        /** @type {?} */
        let backgroundColor;
        if (warning && !isDischarged) {
            switch (warning.category) {
                case 'V':
                    backgroundColor = WarningColors.VeryHigh;
                    break;
                case 'H':
                    backgroundColor = WarningColors.High;
                    break;
                case 'M':
                    backgroundColor = WarningColors.Medium;
                    break;
            }
        }
        else if (latestRi && !isDischarged) {
            backgroundColor = WarningColors.NoCurrent;
        }
        else {
            backgroundColor = WarningColors.NoRi;
        }
        return backgroundColor;
    }
    /**
     * @param {?} latestRi
     * @return {?}
     */
    getRiScoreToDisplay(latestRi) {
        return (latestRi) ? latestRi + '' : '--';
    }
    /**
     * @return {?}
     */
    closeToolTip() {
        if (this.tooltip && this.tooltip.isOpen) {
            this.tooltip.close();
        }
    }
}
PeraGraphService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PeraGraphService.ctorParameters = () => [];
/** @nocollapse */ PeraGraphService.ngInjectableDef = i0.defineInjectable({ factory: function PeraGraphService_Factory() { return new PeraGraphService(); }, token: PeraGraphService, providedIn: "root" });
if (false) {
    /** @type {?} */
    PeraGraphService.prototype.graphClicked$;
    /** @type {?} */
    PeraGraphService.prototype.tooltip;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyYS1ncmFwaC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctYXJyYXktdmlldy1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2dyb3VwL3BlcmEtZ3JhcGgvc2VydmljZS9wZXJhLWdyYXBoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBRTNELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBTTdCLE1BQU0sT0FBTyxnQkFBZ0I7SUFRekI7O1FBTk8sa0JBQWEsR0FBdUIsSUFBSSxPQUFPLEVBQWEsQ0FBQztJQU9wRSxDQUFDOzs7OztJQUVNLGlCQUFpQixDQUFDLEtBQWdCO1FBQ3JDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7O0lBRU0sZ0NBQWdDLENBQUMsT0FBTyxFQUFFLFFBQWdCLEVBQUUsWUFBcUI7O1lBQ2hGLGVBQWU7UUFDbkIsSUFBSSxPQUFPLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDMUIsUUFBUSxPQUFPLENBQUMsUUFBUSxFQUFFO2dCQUN0QixLQUFLLEdBQUc7b0JBQ0osZUFBZSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7b0JBQ3pDLE1BQU07Z0JBQ1YsS0FBSyxHQUFHO29CQUNKLGVBQWUsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDO29CQUNyQyxNQUFNO2dCQUNWLEtBQUssR0FBRztvQkFDSixlQUFlLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQztvQkFDdkMsTUFBTTthQUNiO1NBQ0o7YUFBTSxJQUFJLFFBQVEsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNsQyxlQUFlLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQztTQUM3QzthQUFNO1lBQ0gsZUFBZSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUM7U0FDeEM7UUFFRCxPQUFPLGVBQWUsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVNLG1CQUFtQixDQUFDLFFBQWdCO1FBQ3ZDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzdDLENBQUM7Ozs7SUFFRCxZQUFZO1FBQ1IsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDeEI7SUFDTCxDQUFDOzs7WUFsREosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7Ozs7O0lBR0cseUNBQW9FOztJQUlwRSxtQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtXYXJuaW5nQ29sb3JzfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9XYXJuaW5nQ29sb3JzJztcbmltcG9ydCB7TmdiUG9wb3Zlcn0gZnJvbSAnQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7UGVyYUdyYXBofSBmcm9tICduZy1jb21tb24tbGlicmFyeSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUGVyYUdyYXBoU2VydmljZSB7XG4gICAgLy8gU3ViamVjdCBmb3IgbmF2aWdhdGluZyB0byB0aGUgUFNHXG4gICAgcHVibGljIGdyYXBoQ2xpY2tlZCQ6IFN1YmplY3Q8UGVyYUdyYXBoPiA9IG5ldyBTdWJqZWN0PFBlcmFHcmFwaD4oKTtcblxuICAgIC8vIFRoZSBjdXJyZW50bHkgZGlzcGxheWVkIHRvb2x0aXBcbiAgICAvLyBOT1RFOiBUaGlzIHdhcyBpbXBsZW1lbnRlZCB0byBzb2x2ZSBhIHByb2JsZW0gd2hlcmUgbXVsdGlwbGUgdG9vbHRpcHMgd291bGQgYmUgb3BlbiBhdCB0aGUgc2FtZSB0aW1lXG4gICAgcHVibGljIHRvb2x0aXA6IE5nYlBvcG92ZXI7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ3JhcGhDbGlja2VkRXZlbnQoZ3JhcGg6IFBlcmFHcmFwaCkge1xuICAgICAgICB0aGlzLmNsb3NlVG9vbFRpcCgpO1xuICAgICAgICB0aGlzLmdyYXBoQ2xpY2tlZCQubmV4dChncmFwaCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEJhY2tncm91bmRDb2xvckJ5V2FybmluZ0FuZFJpKHdhcm5pbmcsIGxhdGVzdFJpOiBudW1iZXIsIGlzRGlzY2hhcmdlZDogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgIGxldCBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGlmICh3YXJuaW5nICYmICFpc0Rpc2NoYXJnZWQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAod2FybmluZy5jYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ1YnOlxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBXYXJuaW5nQ29sb3JzLlZlcnlIaWdoO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yID0gV2FybmluZ0NvbG9ycy5IaWdoO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yID0gV2FybmluZ0NvbG9ycy5NZWRpdW07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGxhdGVzdFJpICYmICFpc0Rpc2NoYXJnZWQpIHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA9IFdhcm5pbmdDb2xvcnMuTm9DdXJyZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yID0gV2FybmluZ0NvbG9ycy5Ob1JpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJhY2tncm91bmRDb2xvcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UmlTY29yZVRvRGlzcGxheShsYXRlc3RSaTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIChsYXRlc3RSaSkgPyBsYXRlc3RSaSArICcnIDogJy0tJztcbiAgICB9XG5cbiAgICBjbG9zZVRvb2xUaXAoKSB7XG4gICAgICAgIGlmICh0aGlzLnRvb2x0aXAgJiYgdGhpcy50b29sdGlwLmlzT3Blbikge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=