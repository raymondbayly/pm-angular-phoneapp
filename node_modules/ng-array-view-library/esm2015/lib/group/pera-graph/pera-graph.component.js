/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';
import { ArrayViewService } from '../../service/array-view.service';
import { PeraGraphService } from './service/pera-graph.service';
import { HttpClient } from '@angular/common/http';
import { TooltipService } from './service/tooltip.service';
import { FlowsheetsApiService, UsageApiService, UsageType } from 'ng-common-library';
import { PriorWarningsApiService } from '../../service/prior-warnings/api/prior-warnings-api.service';
export class PeraGraphComponent {
    /**
     * @param {?} service
     * @param {?} flowsheetsApiService
     * @param {?} priorWarningsApiService
     * @param {?} usageService
     * @param {?} graphService
     * @param {?} toolTipService
     * @param {?} http
     * @param {?} ref
     */
    constructor(service, flowsheetsApiService, priorWarningsApiService, usageService, graphService, toolTipService, http, ref) {
        this.service = service;
        this.flowsheetsApiService = flowsheetsApiService;
        this.priorWarningsApiService = priorWarningsApiService;
        this.usageService = usageService;
        this.graphService = graphService;
        this.toolTipService = toolTipService;
        this.http = http;
        this.ref = ref;
        this.margin = 10;
        this.isMouseOverPeraGraph = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscribeToPeraGraphDataFeeds();
        this.subscribeToToolTipInfoEvent();
        this.style = {
            width: this.peraGraphWidth - this.margin + 'px',
            height: this.peraGraphHeight - this.margin + 'px'
        };
        this.usageService.addUsageData(this.graph, UsageType.Array);
        // Manage change detection explicitly
        this.ref.detach();
    }
    /**
     * Subscribe to the interval observables/subjects that pass information the PeraGraph needs
     *
     * Currently, this includes prior warnings and flowsheets
     * @return {?}
     */
    subscribeToPeraGraphDataFeeds() {
        this.flowSheetMap$ = this.flowsheetsApiService.getFlowSheetSubject().subscribe((fscMap) => {
            this.getFlowSheetsForVisit(fscMap);
            if (this.ref) {
                this.ref.detectChanges();
            }
        });
        this.priorWarningMap$ = this.priorWarningsApiService.getPriorWarningSubject().subscribe((pwMap) => {
            this.getPriorWarningsForVisit(pwMap);
            if (this.ref) {
                this.ref.detectChanges();
            }
        });
    }
    /**
     * @return {?}
     */
    subscribeToToolTipInfoEvent() {
        this.toolTipInfoEvent$ = this.toolTipService.toolTipInfoUpdated$.subscribe((toolTipInfo) => {
            // Ensure that the user hasn't moved onto a new graph with a different during the time that the call was made to the server
            if (this.isMouseOverPeraGraph && toolTipInfo.visitId === this.graph.visitId) {
                // If the service takes a second to respond and the popover is no longer there, don't try to open it
                if (this.tooltip) {
                    this.graphService.tooltip = this.tooltip;
                    this.tooltip.open();
                }
                if (this.ref) {
                    this.ref.detectChanges();
                }
            }
        });
    }
    /**
     * This only fires when the user passes the mouse over the graph to get the tooltip.
     * For those graphs, force a change detection cycle so that the ToolTip component updates.
     * @param {?} po
     * @return {?}
     */
    mouseEnterHandler(po) {
        if (!this.isMouseOverPeraGraph && !po.isOpen()) {
            this.isMouseOverPeraGraph = true;
            this.tooltip = po;
            if (this.graph) {
                // Close any existing tooltip
                this.graphService.closeToolTip();
                this.toolTipService.updateToolTipInfo(this.graph);
            }
        }
    }
    /**
     * This fires when the user passes the mouse over the graph, and then moves the mouse off of the graph
     * For those graphs, close the tooltip
     *
     * @param {?} po
     * @return {?}
     */
    mouseLeaveHandler(po) {
        this.isMouseOverPeraGraph = false;
        if (po.isOpen()) {
            po.close();
        }
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    graphClicked(graph) {
        if (this.tooltip && this.tooltip.isOpen()) {
            // console.log('Forcefully closing tooltip');
            this.tooltip.close();
            this.tooltip = null;
        }
        this.graphService.graphClickedEvent(graph);
        this.service.tokenRefresh$.next();
    }
    /**
     * @param {?} po
     * @return {?}
     */
    isShown(po) {
        if (!this.tooltip) {
            // Closing tooltip
            setTimeout(() => po.close(), 1);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // If the item size changed, update style
        if (changes && changes.peraGraphWidth && changes.peraGraphWidth.previousValue !== changes.peraGraphWidth.currentValue) {
            this.style = {
                width: this.peraGraphWidth - this.margin + 'px',
                height: this.peraGraphHeight - this.margin + 'px'
            };
        }
        // If the graph changed, update the related data so that we're showing the right information
        if (changes &&
            changes.graph &&
            changes.graph.currentValue !== changes.graph.previousValue &&
            !changes.graph.firstChange &&
            changes.graph.currentValue.visitId !== changes.graph.previousValue.visitId) {
            // console.log('ArrayView change: Adding usage data for ' + this.graph.vnm);
            this.usageService.addUsageData(this.graph, UsageType.Array);
            // The graph that we're displaying changed so get the new FSCs from the map
            /** @type {?} */
            const fscMap = this.flowsheetsApiService.getFlowSheetSubjectValue();
            this.getFlowSheetsForVisit(fscMap);
            // Get the prior warning for this graph instead of the stale graph
            /** @type {?} */
            const priorWarnings = this.priorWarningsApiService.getPriorWarningSubjectValue();
            this.getPriorWarningsForVisit(priorWarnings);
            // Push the changes
            if (this.ref) {
                this.ref.detectChanges();
            }
        }
    }
    /**
     * @param {?} fscMap
     * @return {?}
     */
    getFlowSheetsForVisit(fscMap) {
        if (fscMap) {
            /** @type {?} */
            const fsc = fscMap[this.graph.visitId];
            // Update the RI-related fields if necessary
            if (fsc && !(this.flowsheets === fsc) && JSON.stringify(this.flowsheets) !== JSON.stringify(fsc)) {
                // Note this may trigger extra changes based on how browsers handle JSON object order
                this.flowsheets = fsc;
                this.latestRi = fsc[this.flowsheets.length - 1].riScore;
            }
            else if (!fsc && this.flowsheets !== null) {
                // Clear the RI-related fields
                this.flowsheets = [];
                this.latestRi = null;
            }
        }
    }
    /**
     * @param {?} priorWarnings
     * @return {?}
     */
    getPriorWarningsForVisit(priorWarnings) {
        if (priorWarnings) {
            /** @type {?} */
            const pw = priorWarnings[this.graph.visitId];
            // TODO can we set this.priorWarning = pw without the logic below?
            // If we have a prior warning and it's not the same, trigger a change
            if (pw && pw !== this.priorWarning) {
                this.priorWarning = pw;
            }
            else if (!pw) {
                // No prior warning exists, update our prior warning to reflect this
                this.priorWarning = null;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.ref) {
            this.ref.detach();
            this.ref = null;
        }
        // Unsubscribe when the component is destroyed
        if (this.flowSheetMap$ && !this.flowSheetMap$.closed) {
            this.flowSheetMap$.unsubscribe();
        }
        if (this.priorWarningMap$ && !this.priorWarningMap$.closed) {
            this.priorWarningMap$.unsubscribe();
        }
        if (this.toolTipInfoEvent$ && !this.toolTipInfoEvent$.closed) {
            this.toolTipInfoEvent$.unsubscribe();
        }
    }
}
PeraGraphComponent.decorators = [
    { type: Component, args: [{
                selector: 'phlib-pera-graph',
                template: "<div class=\"ph-pera-graph\"\n     id=\"{{ graph.vnm }}\"\n     (click)=\"graphClicked(graph)\"\n     [ngStyle]=\"style\">\n\n    <phlib-pera-graph-tile *ngIf=\"service.isDisplayingTiles();else displayPeraGraph\" [graph]=\"graph\"\n                           [latestRi]=\"latestRi\" [priorWarning]=\"priorWarning\"\n                           (mouseenter)=\"mouseEnterHandler(po)\"\n                           (mouseleave)=\"mouseLeaveHandler(po)\"\n                           #po=\"ngbPopover\"\n                           class=\"width-adjustment\"\n                           [ngbPopover]=\"popTemplate\"\n                           [autoClose]=\"true\"\n                           popoverTitle=\"Visit Info\"\n                           placement=\"auto\"\n                           triggers=\"manual\"\n                           container='body'>\n              <ng-template #popTemplate>\n                <phlib-chart-tooltip [graph]=\"graph\"></phlib-chart-tooltip>\n              </ng-template>\n    </phlib-pera-graph-tile>\n\n    <ng-template #displayPeraGraph>\n      <phlib-pera-graph-header class=\"peraGraphHeader\"\n                               [graph]=\"graph\"\n                               [latestRi]=\"latestRi\"\n                               [priorWarning]=\"priorWarning\"></phlib-pera-graph-header>\n      <phlib-chart\n          [graph]=\"graph\"\n          [flowsheets]=\"flowsheets\"\n          class=\"width-adjustment\"\n          (mouseenter)=\"mouseEnterHandler(po)\"\n          (mouseleave)=\"mouseLeaveHandler(po)\"\n          #po=\"ngbPopover\"\n          [ngbPopover]=\"popTemplate\"\n          [autoClose]=\"true\"\n          (shown)=\"isShown(po)\"\n          triggers=\"manual\"\n          popoverTitle=\"Visit Info\"\n          placement=\"auto\"\n          container='body'>\n        </phlib-chart>\n        <ng-template #popTemplate>\n          <phlib-chart-tooltip [graph]=\"graph\"></phlib-chart-tooltip>\n        </ng-template>\n    </ng-template>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".ph-pera-graph{border:1px solid #000;padding-top:auto;margin-right:5px;background-color:#fff!important;display:inline-flex;position:relative}.width-adjustment{width:inherit}"]
            }] }
];
/** @nocollapse */
PeraGraphComponent.ctorParameters = () => [
    { type: ArrayViewService },
    { type: FlowsheetsApiService },
    { type: PriorWarningsApiService },
    { type: UsageApiService },
    { type: PeraGraphService },
    { type: TooltipService },
    { type: HttpClient },
    { type: ChangeDetectorRef }
];
PeraGraphComponent.propDecorators = {
    graph: [{ type: Input }],
    peraGraphWidth: [{ type: Input }],
    peraGraphHeight: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PeraGraphComponent.prototype.graph;
    /** @type {?} */
    PeraGraphComponent.prototype.peraGraphWidth;
    /** @type {?} */
    PeraGraphComponent.prototype.peraGraphHeight;
    /** @type {?} */
    PeraGraphComponent.prototype.style;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.margin;
    /** @type {?} */
    PeraGraphComponent.prototype.flowsheets;
    /** @type {?} */
    PeraGraphComponent.prototype.priorWarning;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.flowSheetMap$;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.priorWarningMap$;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.toolTipInfoEvent$;
    /** @type {?} */
    PeraGraphComponent.prototype.latestRi;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.isMouseOverPeraGraph;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.tooltip;
    /** @type {?} */
    PeraGraphComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.flowsheetsApiService;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.priorWarningsApiService;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.usageService;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.graphService;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.toolTipService;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    PeraGraphComponent.prototype.ref;
}
//# sourceMappingURL=data:application/json;base64,