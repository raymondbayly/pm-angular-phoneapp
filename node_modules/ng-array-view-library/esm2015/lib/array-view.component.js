/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { ArrayViewService } from './service/array-view.service';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { filter, first, map, mergeMap, tap } from 'rxjs/operators';
import { PeraGraphService } from './group/pera-graph/service/pera-graph.service';
import { ArrayViewConfigService } from './service/array-view-config.service';
import { PriorWarningsConfigService } from './service/prior-warnings/config/prior-warnings-config.service';
import { PriorWarningsApiService } from './service/prior-warnings/api/prior-warnings-api.service';
import { FlowsheetsApiService, PeragraphApiService } from 'ng-common-library';
import { FilterService, SortService, GroupService } from 'ng-filters-library';
export class ArrayViewComponent {
    /**
     * @param {?} arrayViewService
     * @param {?} arrayViewConfigService
     * @param {?} peragraphApiService
     * @param {?} filterService
     * @param {?} flowsheetsApiService
     * @param {?} priorWarningsConfigService
     * @param {?} priorWarningsApiService
     * @param {?} peraGraphService
     * @param {?} sortService
     * @param {?} groupService
     * @param {?} ref
     */
    constructor(arrayViewService, arrayViewConfigService, peragraphApiService, filterService, flowsheetsApiService, priorWarningsConfigService, priorWarningsApiService, peraGraphService, sortService, groupService, ref) {
        this.arrayViewService = arrayViewService;
        this.arrayViewConfigService = arrayViewConfigService;
        this.peragraphApiService = peragraphApiService;
        this.filterService = filterService;
        this.flowsheetsApiService = flowsheetsApiService;
        this.priorWarningsConfigService = priorWarningsConfigService;
        this.priorWarningsApiService = priorWarningsApiService;
        this.peraGraphService = peraGraphService;
        this.sortService = sortService;
        this.groupService = groupService;
        this.ref = ref;
        // collects all the peraGraphs from their input sources combines them, filters them, and then passes them onto the groups
        this.filteredPeraGraphs$ = new BehaviorSubject([]);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.numGroupsDisplay = this.groupService.changeNumberOfGroupsToShow$;
        this.expandedSubject$ = this.groupService.expandGroups$;
        this.groups$ = this.groupService.groupSubject$;
        // Load the configuration for the array view and subscribe to the PeraGraphs and Flowsheet services.
        this.arrayViewConfigService.configurationLoaded$.pipe(filter((isReady) => isReady), first()).subscribe(() => this.initializeArrayView());
        this.updateBehaviorBasedOnInputs();
    }
    /**
     * @return {?}
     */
    initializeArrayView() {
        // Once we have the configuration, we can get the rest of the information that we need
        this.arrayViewService.calcCurrentTimestamp();
        // get all Peragraphs on an interval and push them into the peraGraphSubject to be filtered
        this.peraGraphSubscription = this.peragraphApiService.getPeraGraphInterval().subscribe(peraGraphs => {
            this.peragraphApiService.getPeraGraphSubject().next(peraGraphs);
        });
        // uses combineLatest to update the array view when either new graphs are added (peraGraph Subject - sourced by peraGraphInterval and manual graph refreshes) or new filters are added (filterSubject)
        // and then filters before pushing to groups
        this.filteredPeraGraphsSubscription = combineLatest(this.peragraphApiService.getPeraGraphSubject(), this.filterService.filterSubject$).pipe(map((peraGraphsAndFilters) => peraGraphsAndFilters[0].filter(peraGraph => this.arrayViewService.filterPeragraph(peraGraph, this.filterService.activeFilters))), mergeMap((peraGraphs) => this.arrayViewService.addRIToPeraGraphs(peraGraphs)), map((peraGraphs) => peraGraphs.sort((peraGraphA, peraGraphB) => this.arrayViewService.sortGraphs(peraGraphA, peraGraphB, this.sortService.activeSortFunction))), tap((peraGraphs) => {
            // if this iteration of the filtered graphs subject was triggered by the apply filters button
            // then recalculate and close the proper groups
            // if generated by refresh button or interval, don't reset the closed groups
            /** @type {?} */
            const groupDisplay = this.arrayViewService.calculateNumberOfGroupsToShow(peraGraphs);
            if (this.groupService.changeGroupsClosed) {
                this.groupService.changeNumberOfGroupsToShow$.next(groupDisplay.groupsToShow);
                this.groupService.changeGroupsClosed = false;
            }
            this.groupService.expandGroups$.next(groupDisplay.expanded);
        })).subscribe((peraGraphs) => {
            // Assign an index to the anonymous property of the PeraGraph - used by the Anonymous Patient chart title.
            /** @type {?} */
            let anonymousIndex = 1;
            peraGraphs.forEach(graph => {
                graph.anonymous = anonymousIndex;
                anonymousIndex++;
            });
            this.filteredPeraGraphs$.next(peraGraphs);
            this.arrayViewService.completedRefresh$.next();
            // Push the new Chart title selection through the Subject.
            this.arrayViewService.chartTitleSubject$.next(this.arrayViewService.selectedChartTitle);
        });
        // Whenever we get new FSCs (on an interval) push them out through the subject so the groups receive the updated map of FSCs
        this.flowSheetSubscription = this.flowsheetsApiService.getFlowSheetInterval().subscribe(flowsheets => this.flowsheetsApiService.getFlowSheetSubject().next(flowsheets.body));
        // Whenever we get new prior warnings (on an interval) push them out through the subject so the groups receive the updated map of warnings
        if (this.priorWarningsConfigService.getPriorWarningEndPoint()) {
            this.priorWarningSubscription = this.priorWarningsApiService.getPriorWarningInterval().subscribe(priorWarnings => this.priorWarningsApiService.getPriorWarningSubject().next(priorWarnings.body));
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.scrollContainerWidth !== this.getScrollContainerWidth()) {
            this.scrollContainerWidth = this.getScrollContainerWidth();
            if (this.ref) {
                this.ref.detectChanges();
            }
        }
    }
    /**
     * Used to dynamically set the width of the scroll container (based on the width of the array view component)
     * @return {?}
     */
    getScrollContainerWidth() {
        /** @type {?} */
        const width = this.arrayViewElementRef.nativeElement.offsetWidth;
        // Ensure that the container has padding
        /** @type {?} */
        const padding = width * .11;
        // Get the number of graphs that we should be able to display in the window (taking the padding into account)
        /** @type {?} */
        const numGraphsInRow = Math.floor((width - padding) / this.arrayViewService.peraGraphWidth);
        // Return the width
        return numGraphsInRow * this.arrayViewService.peraGraphWidth + 'px';
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.updateBehaviorBasedOnInputs();
        // TODO update this when we add the ability to change the title/grouping/sorting
    }
    /**
     * Updates the fields in the array view service and in this component based on the input so that we see the desired behavior
     * @private
     * @return {?}
     */
    updateBehaviorBasedOnInputs() {
        this.disableGroupsIfAppropriate();
        this.setPeraGraphSortingFunction();
        this.updatePeraGraphDimensions();
    }
    /**
     * If we pass in an explicit width/height, use them
     * @private
     * @return {?}
     */
    updatePeraGraphDimensions() {
        if (this.peraGraphHeight && this.peraGraphWidth) {
            this.arrayViewService.peraGraphWidth = this.peraGraphWidth;
            this.arrayViewService.peraGraphHeight = this.peraGraphHeight;
            this.arrayViewService.refreshViewPort();
        }
    }
    /**
     * This sets the array view service's sorting function to the input passed to the array view component
     * @private
     * @return {?}
     */
    setPeraGraphSortingFunction() {
        if (this.peraGraphSortingFunction) {
            this.arrayViewService.sortGraphs = this.peraGraphSortingFunction;
        }
    }
    /**
     * If groups are disabled or absent, add a single group that will catch all graphs and not display a header
     * @private
     * @return {?}
     */
    disableGroupsIfAppropriate() {
        // If groups are disabled or if we don't have groups
        if (this.disableGroups || this.groups$ == null) {
            this.groups$ = of([[null, function (peraGraph) {
                        return true;
                    }]]);
        }
    }
    // not sure if this is needed since we are using combinedLatest above but I left it just in case
    // public filterChanged() {
    //   // Get the current list of PeraGraphs without making another call
    //   let peraGraphs = this.peragraphApiService.getPeraGraphSubject().value;
    //   // Filter the list according to the updated matchesFilter function within the arrayView service
    //   peraGraphs = this.arrayViewService.filterPeragraphs(peraGraphs, this.filterService.activeFilters)
    //   // Publish result to all subscribing groups
    //   this.peragraphApiService.getPeraGraphSubject().next(peraGraphs);
    // }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.ref) {
            this.ref.detach();
            this.ref = null;
        }
        if (this.peraGraphSubscription && !this.peraGraphSubscription.closed) {
            this.peraGraphSubscription.unsubscribe();
        }
        if (this.flowSheetSubscription && !this.flowSheetSubscription.closed) {
            this.flowSheetSubscription.unsubscribe();
        }
        if (this.priorWarningSubscription && !this.priorWarningSubscription.closed) {
            this.priorWarningSubscription.unsubscribe();
        }
        if (this.filteredPeraGraphsSubscription && !this.filteredPeraGraphs$.closed) {
            this.filteredPeraGraphsSubscription.unsubscribe();
        }
    }
}
ArrayViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'phlib-array-view',
                template: "<div class=\"array-view\" #arrayView>\n    <!--<button class=\"btn btn-outline-success my-2 my-sm-0\" (click)=\"arrayViewService.toggleTileView()\">Tile View</button>-->\n    <phlib-group *ngFor=\"let group of groups$ | async; let i = index\"\n                 [showPeraGraphs]=\"i < numGroupsDisplay.value\"\n                 [expanded]=\"expandedSubject$.value\"\n                 [group]=\"group\" [peraGraphWidth]=\"arrayViewService.peraGraphWidth\"\n                 [peraGraphHeight]=\"arrayViewService.peraGraphHeight\" [scrollContainerWidth]=\"scrollContainerWidth\"\n                 [filteredPeraGraphs$]=\"filteredPeraGraphs$\"\n    ></phlib-group>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ArrayViewComponent.ctorParameters = () => [
    { type: ArrayViewService },
    { type: ArrayViewConfigService },
    { type: PeragraphApiService },
    { type: FilterService },
    { type: FlowsheetsApiService },
    { type: PriorWarningsConfigService },
    { type: PriorWarningsApiService },
    { type: PeraGraphService },
    { type: SortService },
    { type: GroupService },
    { type: ChangeDetectorRef }
];
ArrayViewComponent.propDecorators = {
    peraGraphSortingFunction: [{ type: Input }],
    peraGraphTitleFunction: [{ type: Input }],
    disableGroups: [{ type: Input }],
    numGroupsDisplay: [{ type: Input }],
    peraGraphHeight: [{ type: Input }],
    peraGraphWidth: [{ type: Input }],
    arrayViewElementRef: [{ type: ViewChild, args: ['arrayView',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.peraGraphSubscription;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.flowSheetSubscription;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.priorWarningSubscription;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.filteredPeraGraphsSubscription;
    /** @type {?} */
    ArrayViewComponent.prototype.filteredPeraGraphs$;
    /** @type {?} */
    ArrayViewComponent.prototype.peraGraphSortingFunction;
    /** @type {?} */
    ArrayViewComponent.prototype.peraGraphTitleFunction;
    /** @type {?} */
    ArrayViewComponent.prototype.groups$;
    /** @type {?} */
    ArrayViewComponent.prototype.disableGroups;
    /** @type {?} */
    ArrayViewComponent.prototype.numGroupsDisplay;
    /** @type {?} */
    ArrayViewComponent.prototype.peraGraphHeight;
    /** @type {?} */
    ArrayViewComponent.prototype.peraGraphWidth;
    /** @type {?} */
    ArrayViewComponent.prototype.arrayViewElementRef;
    /** @type {?} */
    ArrayViewComponent.prototype.scrollContainerWidth;
    /** @type {?} */
    ArrayViewComponent.prototype.expandedSubject$;
    /** @type {?} */
    ArrayViewComponent.prototype.arrayViewService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.arrayViewConfigService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.peragraphApiService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.flowsheetsApiService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.priorWarningsConfigService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.priorWarningsApiService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.peraGraphService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.sortService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.groupService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewComponent.prototype.ref;
}
//# sourceMappingURL=data:application/json;base64,