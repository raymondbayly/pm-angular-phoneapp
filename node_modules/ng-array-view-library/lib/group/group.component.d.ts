import { ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { ArrayViewService } from '../service/array-view.service';
import { BehaviorSubject, Observable, Subscription } from 'rxjs';
import { ResizeEvent } from 'angular-resizable-element';
import { PeraGraphService } from './pera-graph/service/pera-graph.service';
import { PeraGraph } from 'ng-common-library/lib/model/PeraGraph';
import { PeragraphApiService } from 'ng-common-library';
import { FilterService } from "ng-filters-library";
export declare class GroupComponent implements OnInit, OnChanges, OnDestroy {
    private arrayViewService;
    private filterService;
    private peraGraphService;
    private peragraphApiService;
    private ref;
    private elementRef;
    private renderer;
    showPeraGraphs: boolean;
    expanded: boolean;
    group: {
        laneFunction: (peraGraph: PeraGraph) => boolean;
        laneTitle: string;
    };
    peraGraphHeight: number;
    peraGraphWidth: number;
    scrollContainerWidth: string;
    filteredPeraGraphs$: BehaviorSubject<PeraGraph[]>;
    groupName: string;
    private filterFunction;
    private nonExpandedRows;
    private expandedRows;
    private currentNumberOfRowsDisplayed;
    peraGraphs$: Observable<Array<PeraGraph>>;
    peraGraphs_length$: Subscription;
    options$: BehaviorSubject<{
        itemHeight: number;
        itemWidth: number;
        numAdditionalRows: number;
    }>;
    private previousPeraGraphs;
    private currentPeraGraphs;
    groupLength: number;
    private clickTimer;
    private preventSingleClick;
    private viewContainerMaxHeight;
    style: object;
    hideGroup: boolean;
    constructor(arrayViewService: ArrayViewService, filterService: FilterService, peraGraphService: PeraGraphService, peragraphApiService: PeragraphApiService, ref: ChangeDetectorRef, elementRef: ElementRef, renderer: Renderer2);
    ngOnInit(): void;
    ngOnChanges(): void;
    hideOrDisplayGroup(): void;
    private updatePeraGraphs;
    /**
     * When we're not displaying PeraGraphs, we don't pass the observable to the virtual scroll which typically populates the group length.
     * This function will conditionally get the group length through other means.
     */
    maintainGroupLength(): void;
    /**
     * This function determines which graphs belong to this group
     *
     * @param peraGraph
     * @returns
     */
    matchesGroup(peraGraph: PeraGraph): boolean;
    /**
     * Function to determine equality, given two indicies in the array (optional, default: (p,c) => p === c))
     *
     * @param prevDataIndex
     * @param curDataIndex
     * @returns
     */
    equals: (prevDataIndex: number, curDataIndex: number) => boolean;
    /**
     * Called when the viewport is being resized manually
     *
     * @param event
     */
    onResizing(event: ResizeEvent): void;
    /**
     * Called when the header is clicked
     */
    click(): void;
    /**
     * Called when the header is double clicked
     */
    doubleClick(): void;
    /**
     * Updates the height/width of the viewport container as well as the height/width/number of items in the viewport
     */
    updateViewPortPerCurrentRows(): void;
    /**
     * Toggles whether or not any PeraGraphs are shown in the group
     */
    toggleShow(): void;
    /**
     * This function toggles expansion of the viewport height
     */
    toggleExpand(): void;
    /**
     * If ngIf is currently evaluating to false, trigger a change and update the view container
     */
    startRenderingPeraGraphs(): void;
    /**
     * Updates item size and the number of rows being rendered
     */
    updateNumberOfItemsInViewport(): void;
    /**
     * Applies a buffer to the number of rows being displayed to improve scrolling performance
     *
     * @returns
     */
    getNumberOfRowsToRender(): number;
    /**
     * Set the height and width of the viewport container
     *
     * @param height
     */
    setStyle(height: string): void;
    /**
     * Returns the ideal viewport height for the number of rows passed to the function
     *
     * @param rows
     * @returns
     */
    getViewPortHeightFromRowsAsString(rows: number): string;
    ngOnDestroy(): void;
}
