import { HttpClient } from '@angular/common/http';
import { ArrayViewConfigService } from './array-view-config.service';
import { DateService, FlowsheetsApiService, PeragraphApiService } from 'ng-common-library';
import { PeraGraph } from 'ng-common-library/lib/model/PeraGraph';
import { FilterQueryRestService, FilterService, GroupService, SortService } from 'ng-filters-library';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
export declare class ArrayViewService {
    private http;
    private configService;
    private filterService;
    private filterQueryRestService;
    private flowsheetsApiService;
    private peragraphApiService;
    private sortService;
    private groupService;
    private dateService;
    titleChoices: {
        description: string;
        returnFunc: (peraGraph: PeraGraph) => any;
    }[];
    selectedChartTitle: {
        description: string;
        returnFunc: (peraGraph: PeraGraph) => any;
    };
    chartTitleSubject$: BehaviorSubject<{
        description: string;
        returnFunc: (peraGraph: PeraGraph) => any;
    }>;
    private maxGraphCountPerGroup;
    private maxGraphsInDom;
    private currentTimestamp;
    private displayTiles;
    private peraGraphDefaultHeight;
    private peraGraphDefaultWidth;
    private peraGraphTileDefault;
    peraGraphHeight: number;
    peraGraphWidth: number;
    startedRefresh$: Subject<void>;
    completedRefresh$: Subject<void>;
    tokenRefresh$: Subject<void>;
    constructor(http: HttpClient, configService: ArrayViewConfigService, filterService: FilterService, filterQueryRestService: FilterQueryRestService, flowsheetsApiService: FlowsheetsApiService, peragraphApiService: PeragraphApiService, sortService: SortService, groupService: GroupService, dateService: DateService);
    /**
     * runs the peragraph through all the filters and returns true if none of them return false
     * @param peraGraph - peragraph to evaluate
     * @param filters - object of filter functions
     */
    filterPeragraph(peraGraph: any, filters: any): boolean;
    /**
     * limit the number of groups to load open on application of filtering/sorting/grouping based on the number of graphs in the dom
     * @param peraGraphs - graphs to make count based off of
     */
    calculateNumberOfGroupsToShow(peraGraphs: PeraGraph[]): {
        groupsToShow: number;
        expanded: boolean;
    };
    /**
     * if sorting by RI Score...get RI Scores from server and append to peraGraphs
     * @param peraGraphs - peraGraphs to have Ris attached to
     */
    addRIToPeraGraphs(peraGraphs: PeraGraph[]): Observable<PeraGraph[]>;
    /**
     * sorts peraGraphs based on function passed in through sort parameter then subsorts if needed based on the default sort method
     * if no function is provided, the default sort function is used
     * @param peraGraphA - peraGraph to be sorted
     * @param peraGraphB - peraGraph to be sorted
     * @param sortFunction - function to sort peraGraphs
     */
    sortGraphs(peraGraphA: any, peraGraphB: any, sortFunction?: (peragraphA: PeraGraph, peraGraphB: PeraGraph) => number): any;
    /**
     * If a timestamp is provided by config use that, otherwise update the current timestamp every 5 seconds
     */
    calcCurrentTimestamp(): void;
    /**
     * returns the timestamp sent by the server if it isn't null
     * otherwise calls Date.now() to get an up to date timestamp to
     * return
     */
    getCurrentTimestamp(): number;
    isDisplayingTiles(): boolean;
    toggleTileView(): void;
    refreshViewPort(): void;
    /**
     * Called on manual refresh or application of filters - refreshes graphs and FSCs
     * and fires completedRefresh$ Subject upon completion
     */
    refreshGraphs(getFilterQuery?: boolean): void;
}
