{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ng-array-view-library/lib/service/array-view-config.service.ts","ng://ng-array-view-library/lib/service/chartTitleEnum.ts","ng://ng-array-view-library/lib/service/array-view.service.ts","ng://ng-array-view-library/lib/model/WarningColors.ts","ng://ng-array-view-library/lib/group/pera-graph/service/pera-graph.service.ts","ng://ng-array-view-library/lib/service/prior-warnings/config/prior-warnings-config.service.ts","ng://ng-array-view-library/lib/service/prior-warnings/api/prior-warnings-api.service.ts","ng://ng-array-view-library/lib/array-view.component.ts","ng://ng-array-view-library/lib/group/group.component.ts","ng://ng-array-view-library/lib/group/pera-graph/service/tooltip.service.ts","ng://ng-array-view-library/lib/group/pera-graph/pera-graph.component.ts","ng://ng-array-view-library/lib/group/pera-graph/chart/chart.component.ts","ng://ng-array-view-library/lib/group/pera-graph/pera-graph-tile/pera-graph-tile.component.ts","ng://ng-array-view-library/lib/group/group-header/group-header.component.ts","ng://ng-array-view-library/lib/group/pera-graph/pera-graph-header/pera-graph-header.component.ts","ng://ng-array-view-library/lib/group/pera-graph/tooltip/tooltip.component.ts","ng://ng-array-view-library/lib/array-view.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","ArrayViewConfigService","configurationLoaded$","BehaviorSubject","currentTimestamp","toolTipInfoEndPoint","getToolTipInfoEndPoint","console","warn","setToolTipInfoEndPoint","val","getCurrentTimestamp","setCurrentTimestamp","Injectable","args","providedIn","ArrayViewService","http","configService","filterService","filterQueryRestService","flowsheetsApiService","peragraphApiService","sortService","groupService","dateService","_this","titleChoices","description","ChartTitleChoices","returnFunc","peraGraph","vnm","timeZone","admitDate","getDateFormat","patient","medicalRecordNumber","vipIndicator","aliasLastName","aliasFirstName","displayName","unitId","room","bed","anonymous","selectedChartTitle","chartTitleSubject$","maxGraphCountPerGroup","maxGraphsInDom","displayTiles","peraGraphDefaultHeight","peraGraphDefaultWidth","peraGraphTileDefault","peraGraphHeight","peraGraphWidth","startedRefresh$","Subject","completedRefresh$","tokenRefresh$","filterPeragraph","filters","keys","constructor","filter","calculateNumberOfGroupsToShow","peraGraphs","groupsToShow","graphCount","numOfGroupsWithGraphs","_c","tslib_1.__values","groupSubject$","_d","group","groupGraphCount","groupIsFresh","peraGraphs_1","peraGraphs_1_1","laneFunction","expanded","addRIToPeraGraphs","activeSortName","getAllRiScores","pipe","map","riScores","riMap","body","peraGraphs_2","peraGraphs_2_1","visitId","latestRi","of","sortGraphs","peraGraphA","peraGraphB","sortFunction","comparison","defaultSort","nonStandardSortFunctionActive","nonStandardSortFunction","calcCurrentTimestamp","Date","now","isDisplayingTiles","toggleTileView","refreshViewPort","previousPeraGraphs","getPeraGraphSubject","setTimeout","refreshGraphs","getFilterQuery","forkJoin","getFilteredVisits","getActiveServerFilterCriteria","getAllPeragraphs","subscribe","graphsAndFilteredVisits","serverFilteredVisits","filterSubject$","activeFilters","graphs","getAllPeraGraphFlowSheets","flowsheets","getFlowSheetSubject","HttpClient","FilterService","FilterQueryRestService","FlowsheetsApiService","PeragraphApiService","SortService","GroupService","DateService","PeraGraphService","graphClicked$","graphClickedEvent","graph","closeToolTip","getBackgroundColorByWarningAndRi","warning","isDischarged","backgroundColor","category","WarningColors","getRiScoreToDisplay","tooltip","isOpen","close","PriorWarningsConfigService","setPriorWarningEndPoint","priorWarningEndPoint","getPriorWarningEndPoint","PriorWarningsApiService","priorWarningsConfigService","pollInstance$","timer","_priorWarningSubject","getPriorWarningSubjectValue","getPriorWarningSubject","getPriorWarnings","get","observe","getPriorWarningInterval","switchMap","ArrayViewComponent","arrayViewService","arrayViewConfigService","priorWarningsApiService","peraGraphService","ref","filteredPeraGraphs$","ngOnInit","numGroupsDisplay","changeNumberOfGroupsToShow$","expandedSubject$","expandGroups$","groups$","isReady","first","initializeArrayView","updateBehaviorBasedOnInputs","peraGraphSubscription","getPeraGraphInterval","filteredPeraGraphsSubscription","combineLatest","peraGraphsAndFilters","mergeMap","sort","activeSortFunction","tap","groupDisplay","changeGroupsClosed","anonymousIndex","forEach","flowSheetSubscription","getFlowSheetInterval","priorWarningSubscription","priorWarnings","ngAfterViewChecked","scrollContainerWidth","getScrollContainerWidth","detectChanges","width","arrayViewElementRef","nativeElement","offsetWidth","padding","Math","floor","ngOnChanges","disableGroupsIfAppropriate","setPeraGraphSortingFunction","updatePeraGraphDimensions","peraGraphSortingFunction","disableGroups","ngOnDestroy","detach","closed","unsubscribe","Component","selector","template","ChangeDetectorRef","Input","ViewChild","GroupComponent","elementRef","renderer","showPeraGraphs","filterFunction","nonExpandedRows","expandedRows","currentNumberOfRowsDisplayed","options$","clickTimer","preventSingleClick","style","maxHeight","viewContainerMaxHeight","hideGroup","equals","prevDataIndex","curDataIndex","curPeraGraph","currentPeraGraphs","previousPeraGraph","JSON","stringify","groupName","laneTitle","updatePeraGraphs","updateNumberOfItemsInViewport","updateViewPortPerCurrentRows","maintainGroupLength","hideOrDisplayGroup","groupLength","setStyle","peraGraphs$","matchesGroup","peraGraphs_length$","onResizing","event","rectangle","height","ceil","click","toggleShow","doubleClick","clearTimeout","toggleExpand","getViewPortHeightFromRowsAsString","startRenderingPeraGraphs","itemHeight","itemWidth","numAdditionalRows","getNumberOfRowsToRender","additionalRowsToRender","rows","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Renderer2","TooltipService","graphService","loginService","tokenApiService","toolTipInfoUpdated$","updateToolTipInfo","refreshToken","getCurrentUser","pid","toolTipInfo","numberOfOtherVisitsWithValidRi","numberVisitsWithValidRI","diagnosis","tmpDiag","replace","LoginService","TokenApiService","PeraGraphComponent","service","usageService","toolTipService","margin","isMouseOverPeraGraph","subscribeToPeraGraphDataFeeds","subscribeToToolTipInfoEvent","addUsageData","UsageType","Array","flowSheetMap$","fscMap","getFlowSheetsForVisit","priorWarningMap$","pwMap","getPriorWarningsForVisit","toolTipInfoEvent$","open","mouseEnterHandler","po","mouseLeaveHandler","graphClicked","isShown","changes","previousValue","currentValue","firstChange","getFlowSheetSubjectValue","fsc","riScore","pw","priorWarning","UsageApiService","Highcharts","require","moment","moment_","ChartComponent","chartService","X_AXIS_DAYS","DAY_IN_MILLISECONDS","minRiScore","minRecordedDt","maxRecordedDt","series","getChartSeries","chartOptions","getChartOptions","updateChart","updateXAxis","updateYAxis","minYAxisTick","getMinYAxisTick","yAxis","min","plotLines","createZeroAxisLine","xAxis","getXaxis","chart","type","spacing","marginLeft","marginRight","plotBackgroundColor","reflow","animation","alignTicks","enabled","plotOptions","color","turboThreshold","enableMouseTracking","stickyTracking","shadow","dataLabels","textShadow","line","credits","legend","title","text","getYaxis","push","startOnTick","endOnTick","tickInterval","gridLineWidth","updateAlertPlotLine","labels","distance","font-size","formatter","utcOffset","format","step","getMinXAxisValue","max","getMaxXAxisValue","translateDate","align","offset","tickPositioner","tick","ticks","name","data","getDataPoints","showInLegend","linearGradient","x1","x2","y1","y2","stops","getArrayOfLocationChanges","marker","getMarkerColor","unitType","radius","fscList","range","colors","xval","key","recordedDt","dataPoints","random","ChartService","PeraGraphTileComponent","warningService","updateBackgroundColor","activeWarning","discharged","priorWarningIndicator","getWarningClass","WarningService","GroupHeaderComponent","PeraGraphHeaderComponent","updateHeaderColor","priorWarningIndicatorId","TooltipComponent","getAdmitDate","getDischargeDate","dischargeDate","ArrayViewModule","forRoot","ngModule","providers","FilterQueryConfigService","NgModule","imports","CommonModule","HighchartsChartModule","VirtualScrollModule","ResizableModule","NgbModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Injectable} from '@angular/core';\nimport * as moment_ from 'moment';\nimport {BehaviorSubject, Subject} from 'rxjs';\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ArrayViewConfigService {\n    public configurationLoaded$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    private currentTimestamp: number = null;\n    private toolTipInfoEndPoint: string = null;\n\n    public getToolTipInfoEndPoint() {\n        if (!this.toolTipInfoEndPoint) {\n            console.warn('Tooltip endpoint is not set!');\n        }\n        return this.toolTipInfoEndPoint;\n    }\n\n    public setToolTipInfoEndPoint(val: string) {\n        this.toolTipInfoEndPoint = val;\n    }\n\n    public getCurrentTimestamp(): number {\n        return this.currentTimestamp;\n    }\n\n    public setCurrentTimestamp(value: number): void {\n        this.currentTimestamp = value;\n    }\n}\n","export enum ChartTitleChoices {\n    VNM = 'Visit Number',\n    ADMIT_DATE = 'Admission Date',\n    MRN = 'Medical Record Number',\n    PATIENT_NAME = 'Patient Name',\n    LOCATION = 'Room Number',\n    ANONYMOUS = 'Anonymous'\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {map} from 'rxjs/operators';\nimport * as moment_ from 'moment-timezone';\nimport {ArrayViewConfigService} from './array-view-config.service';\nimport {DateService, FlowsheetsApiService, PeragraphApiService} from 'ng-common-library';\nimport {PeraGraph} from 'ng-common-library/lib/model/PeraGraph';\nimport {FilterQueryRestService, FilterService, GroupService, SortService} from 'ng-filters-library';\nimport {BehaviorSubject, forkJoin, Observable, of, Subject} from 'rxjs';\nimport {ChartTitleChoices} from './chartTitleEnum';\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ArrayViewService {\n\n    // The possible chart title selections\n    titleChoices: {description: string, returnFunc: (peraGraph: PeraGraph) => any}[] = [\n        {\n            description: ChartTitleChoices.VNM,\n            returnFunc: (peraGraph: PeraGraph) => {\n                return peraGraph.vnm;\n            }\n        },\n        {\n            description: ChartTitleChoices.ADMIT_DATE,\n            returnFunc: (peraGraph: PeraGraph) => {\n                if (peraGraph && peraGraph.timeZone && peraGraph.admitDate) {\n                    return this.dateService.getDateFormat(peraGraph.timeZone, peraGraph.admitDate, 'MM/DD/YY HH:mm z');\n                }\n                return '';\n            }\n        },\n        {\n            description: ChartTitleChoices.MRN,\n            returnFunc: (peraGraph: PeraGraph) => {\n                return peraGraph.patient.medicalRecordNumber;\n            }\n        },\n        {\n            description: ChartTitleChoices.PATIENT_NAME,\n            returnFunc: (peraGraph: PeraGraph) => {\n                if (peraGraph.vipIndicator) {\n                    return peraGraph.patient.aliasLastName + ', ' + peraGraph.patient.aliasFirstName;\n                } else {\n                    return peraGraph.displayName;\n                }\n            }\n        },\n        {\n            description: ChartTitleChoices.LOCATION,\n            returnFunc: (peraGraph: PeraGraph) => {\n                return peraGraph.unitId + '-' + peraGraph.room + '-' + peraGraph.bed;\n            }\n        },\n        {\n            description: ChartTitleChoices.ANONYMOUS,\n            returnFunc: (peraGraph: PeraGraph) => {\n                return 'Chart ' + peraGraph.anonymous;\n            }\n        }\n    ];\n\n    // Current chart title selection - defaults to Patient Name\n    selectedChartTitle: {description: string, returnFunc: (peraGraph: PeraGraph) => any} = {\n        description: ChartTitleChoices.PATIENT_NAME,\n        returnFunc: (peraGraph: PeraGraph) => {\n            return peraGraph.displayName;\n        }\n    };\n\n    // Subject for the title selection\n    public chartTitleSubject$ = new BehaviorSubject<{description: string,\n        returnFunc: (peraGraph: PeraGraph) => any}>(this.selectedChartTitle);\n\n    private maxGraphCountPerGroup = 50;\n    private maxGraphsInDom = 150;\n    private currentTimestamp = null;\n    private displayTiles = false;\n    private peraGraphDefaultHeight = 145;\n    private peraGraphDefaultWidth = 185;\n    private peraGraphTileDefault = 75;\n    public peraGraphHeight: number = this.peraGraphDefaultHeight;\n    public peraGraphWidth: number = this.peraGraphDefaultWidth;\n    public startedRefresh$: Subject<void> = new Subject<void>();\n    public completedRefresh$: Subject<void> = new Subject<void>();\n    public tokenRefresh$: Subject<void> = new Subject<void>();\n\n    constructor(private http: HttpClient,\n                private configService: ArrayViewConfigService,\n                private filterService: FilterService,\n                private filterQueryRestService: FilterQueryRestService,\n                private flowsheetsApiService: FlowsheetsApiService,\n                private peragraphApiService: PeragraphApiService,\n                private sortService: SortService,\n                private groupService: GroupService,\n                private dateService: DateService) {\n    }\n\n    /**\n     * runs the peragraph through all the filters and returns true if none of them return false\n     * @param peraGraph - peragraph to evaluate\n     * @param filters - object of filter functions\n     */\n    filterPeragraph(peraGraph, filters): boolean {\n        // return true if filter object has no properties\n        if ((Object.keys(filters).length === 0 && filters.constructor === Object)) {\n            return true;\n        } else {\n            // traverse filter object and test peragraph against each filter until one returns false\n            for (const filter in filters) {\n                if (filters.hasOwnProperty(filter)) {\n                    if (!(filters[filter](peraGraph))) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * limit the number of groups to load open on application of filtering/sorting/grouping based on the number of graphs in the dom\n     * @param peraGraphs - graphs to make count based off of\n     */\n    calculateNumberOfGroupsToShow(peraGraphs: PeraGraph[]): {groupsToShow: number, expanded: boolean} {\n        let groupsToShow = 0;\n        let graphCount = 0;\n        let expanded = true;\n        let numOfGroupsWithGraphs = 0;\n        // for each group, count the number of graphs in that group, capped at the maxGraphsPerGroup variable\n        // once the graphs exceed the maxGraphs in dom value return the number of groupstoShow to be applied to groups\n        for (const group of this.groupService.groupSubject$.value) {\n            let groupGraphCount = 0;\n            // helper variable for tracking how many groups have graphs\n            let groupIsFresh = true;\n            for(const peraGraph of peraGraphs) {\n                if(group.laneFunction(peraGraph)) {\n                    if(groupIsFresh) {\n                        numOfGroupsWithGraphs++;\n                        groupIsFresh = false;\n                    }\n                    groupGraphCount++;\n                    if(groupGraphCount >= this.maxGraphCountPerGroup) {\n                        break;\n                    }\n                }\n            }\n            graphCount += groupGraphCount;\n            groupsToShow++;\n            if (graphCount > this.maxGraphsInDom) {\n                groupsToShow--;\n                break;\n            }\n        }\n        return {groupsToShow: groupsToShow, expanded: numOfGroupsWithGraphs <= 1};\n    }\n\n    /**\n     * if sorting by RI Score...get RI Scores from server and append to peraGraphs\n     * @param peraGraphs - peraGraphs to have Ris attached to\n     */\n    addRIToPeraGraphs(peraGraphs: PeraGraph[]): Observable<PeraGraph[]> {\n        if (this.sortService.activeSortName === 'latestRi') {\n            return this.flowsheetsApiService.getAllRiScores().pipe(map((riScores) => {\n                const riMap = riScores.body;\n                for(const peraGraph of peraGraphs) {\n                    if (riScores.body[peraGraph.visitId]) {\n                        peraGraph.latestRi = riMap[peraGraph.visitId];\n                    }\n                }\n                return peraGraphs;\n            }));\n        } else {\n            return of(peraGraphs);\n        }\n    }\n\n    /**\n     * sorts peraGraphs based on function passed in through sort parameter then subsorts if needed based on the default sort method\n     * if no function is provided, the default sort function is used\n     * @param peraGraphA - peraGraph to be sorted\n     * @param peraGraphB - peraGraph to be sorted\n     * @param sortFunction - function to sort peraGraphs\n     */\n    sortGraphs(peraGraphA, peraGraphB, sortFunction?: (peragraphA: PeraGraph, peraGraphB: PeraGraph) => number) {\n        // default sort method for peragraphs\n        const defaultSort = function (peraGraphA: PeraGraph, peraGraphB: PeraGraph): number {\n            let comparison = 0;\n            if (peraGraphA.displayName > peraGraphB.displayName) {\n                comparison = 1;\n            } else if (peraGraphA.displayName < peraGraphB.displayName) {\n                comparison = -1;\n            }\n            return comparison;\n        };\n\n        if (this.sortService.nonStandardSortFunctionActive && this.sortService.nonStandardSortFunction) {\n           sortFunction = this.sortService.nonStandardSortFunction;\n        }\n\n        // if a function is passed in -> use it. if not use the default sort\n        if (!sortFunction) {\n            // if no function is provided, use default sort\n            return defaultSort(peraGraphA, peraGraphB)\n        }\n        let comparison;\n        comparison = sortFunction(peraGraphA, peraGraphB);\n        if (comparison == 0) {\n            comparison = defaultSort(peraGraphA, peraGraphB);\n        }\n        return comparison;\n    }\n\n    /**\n     * If a timestamp is provided by config use that, otherwise update the current timestamp every 5 seconds\n     */\n    calcCurrentTimestamp() {\n        if (this.configService.getCurrentTimestamp()) {\n            this.currentTimestamp = this.configService.getCurrentTimestamp();\n        }\n    }\n\n    /**\n     * returns the timestamp sent by the server if it isn't null\n     * otherwise calls Date.now() to get an up to date timestamp to\n     * return\n     */\n    public getCurrentTimestamp(): number {\n        /*\n            The currentTimestamp property is only set if the server sends a specific timestamp\n            it wants us to use. If that is not provided, we call Date.now() to get the up to date\n            timestamp every time this function is invoked\n        */\n        return this.currentTimestamp ? this.currentTimestamp : Date.now();\n    }\n\n    public isDisplayingTiles(): boolean {\n        return this.displayTiles;\n    }\n\n    public toggleTileView() {\n        // Toggle whether or not we display the tile view and set the width/height accordingly\n        this.displayTiles = !this.displayTiles;\n        this.peraGraphHeight = (this.displayTiles) ? this.peraGraphTileDefault : this.peraGraphDefaultHeight;\n        this.peraGraphWidth = (this.displayTiles) ? this.peraGraphTileDefault : this.peraGraphDefaultWidth;\n        this.refreshViewPort();\n    }\n\n    // Force a refresh of the viewport by toggling the data\n    public refreshViewPort() {\n        const previousPeraGraphs = this.peragraphApiService.getPeraGraphSubject().value;\n        this.peragraphApiService.getPeraGraphSubject().next([]);\n        setTimeout(() => {\n            this.peragraphApiService.getPeraGraphSubject().next(previousPeraGraphs);\n        }, 1);\n    }\n\n    /**\n     * Called on manual refresh or application of filters - refreshes graphs and FSCs\n     * and fires completedRefresh$ Subject upon completion\n     */\n    public refreshGraphs(getFilterQuery?: boolean) {\n        this.startedRefresh$.next();\n        if (getFilterQuery) {\n            // we use fork join here to combine the REST calls for server side filtering and getting new PeraGraphs\n            // quick aside on fork join - all it does is wait for both observables to COMPLETE and then feed you both results\n            // before getting to the fork join the vnms from the server side filter query are stored in the filter service\n            //      -> this is done to ensure that once the forkjoin completes, client side filtering can commence\n            // after filtering the graphs, they are passed to the array view per usual\n            forkJoin(this.filterQueryRestService.getFilteredVisits(this.filterService.getActiveServerFilterCriteria()), this.peragraphApiService.getAllPeragraphs()).subscribe((graphsAndFilteredVisits) => {\n                this.peragraphApiService.getPeraGraphSubject().next(graphsAndFilteredVisits[1]);\n                this.filterService.serverFilteredVisits = graphsAndFilteredVisits[0];\n                this.filterService.filterSubject$.next(this.filterService.activeFilters);\n                this.completedRefresh$.next();\n            });\n        } else {\n            // if we don't need to do server side filtering -> filter in the client immediately\n            this.peragraphApiService.getAllPeragraphs().subscribe((graphs) => {\n                this.peragraphApiService.getPeraGraphSubject().next(graphs);\n            });\n        }\n        this.flowsheetsApiService.getAllPeraGraphFlowSheets().subscribe((flowsheets) => this.flowsheetsApiService.getFlowSheetSubject().next(flowsheets.body));\n    }\n\n}\n","export enum WarningColors {\n    VeryHigh = '#D51C19',\n    High = '#EE834C',\n    Medium = '#F6CC5D',\n    NoCurrent = '#3185B8',\n    NoRi = '#AAABAC',\n}\n","import {Injectable} from '@angular/core';\nimport {WarningColors} from '../../../model/WarningColors';\nimport {NgbPopover} from '@ng-bootstrap/ng-bootstrap';\nimport {Subject} from 'rxjs';\nimport {PeraGraph} from 'ng-common-library';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PeraGraphService {\n    // Subject for navigating to the PSG\n    public graphClicked$: Subject<PeraGraph> = new Subject<PeraGraph>();\n\n    // The currently displayed tooltip\n    // NOTE: This was implemented to solve a problem where multiple tooltips would be open at the same time\n    public tooltip: NgbPopover;\n\n    constructor() {\n    }\n\n    public graphClickedEvent(graph: PeraGraph) {\n        this.closeToolTip();\n        this.graphClicked$.next(graph);\n    }\n\n    public getBackgroundColorByWarningAndRi(warning, latestRi: number, isDischarged: boolean): string {\n        let backgroundColor;\n        if (warning && !isDischarged) {\n            switch (warning.category) {\n                case 'V':\n                    backgroundColor = WarningColors.VeryHigh;\n                    break;\n                case 'H':\n                    backgroundColor = WarningColors.High;\n                    break;\n                case 'M':\n                    backgroundColor = WarningColors.Medium;\n                    break;\n            }\n        } else if (latestRi && !isDischarged) {\n            backgroundColor = WarningColors.NoCurrent;\n        } else {\n            backgroundColor = WarningColors.NoRi;\n        }\n\n        return backgroundColor;\n    }\n\n    public getRiScoreToDisplay(latestRi: number): string {\n        return (latestRi) ? latestRi + '' : '--';\n    }\n\n    closeToolTip() {\n        if (this.tooltip && this.tooltip.isOpen) {\n            this.tooltip.close();\n        }\n    }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PriorWarningsConfigService {\n\n  private priorWarningEndPoint: string;\n\n  constructor() {\n  }\n\n  setPriorWarningEndPoint(value: string): void {\n    this.priorWarningEndPoint = value;\n  }\n\n  getPriorWarningEndPoint(): string {\n    return this.priorWarningEndPoint;\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {PriorWarningsConfigService} from '../config/prior-warnings-config.service';\nimport {BehaviorSubject, Observable, timer} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PriorWarningsApiService {\n\n  private readonly _priorWarningSubject: BehaviorSubject<Map<number, string>>;\n  private pollInstance$: Observable<any>;\n\n  constructor(private http: HttpClient,\n              private priorWarningsConfigService: PriorWarningsConfigService) {\n    this.pollInstance$ = timer(0, 60000);\n    this._priorWarningSubject = new BehaviorSubject<Map<number, string>>(null);\n  }\n\n  public getPriorWarningSubjectValue() {\n    return this._priorWarningSubject.value;\n  }\n\n  public getPriorWarningSubject() {\n    return this._priorWarningSubject;\n  }\n\n  getPriorWarnings(): Observable<any> {\n    return this.http.get(this.priorWarningsConfigService.getPriorWarningEndPoint(), {observe: 'response'});\n  }\n\n  public getPriorWarningInterval() {\n    return this.pollInstance$.pipe(\n      switchMap(() => this.getPriorWarnings()));\n  }\n\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {ArrayViewService} from './service/array-view.service';\nimport {BehaviorSubject, combineLatest, of} from 'rxjs';\nimport {filter, first, map, mergeMap, tap} from 'rxjs/operators';\nimport {PeraGraphService} from './group/pera-graph/service/pera-graph.service';\nimport {ArrayViewConfigService} from './service/array-view-config.service';\nimport {PeraGraph} from 'ng-common-library/lib/model/PeraGraph';\nimport {PriorWarningsConfigService} from './service/prior-warnings/config/prior-warnings-config.service';\nimport {PriorWarningsApiService} from './service/prior-warnings/api/prior-warnings-api.service';\nimport {FlowsheetsApiService, PeragraphApiService} from 'ng-common-library';\nimport {FilterService, SortService, GroupService} from 'ng-filters-library';\n\n@Component({\n    selector: 'phlib-array-view',\n    templateUrl: './array-view.component.html',\n    styleUrls: ['./array-view.component.css']\n})\nexport class ArrayViewComponent implements OnInit, OnDestroy, OnChanges, AfterViewChecked {\n\n    private peraGraphSubscription;\n    private flowSheetSubscription;\n    private priorWarningSubscription;\n    private filteredPeraGraphsSubscription;\n\n    // collects all the peraGraphs from their input sources combines them, filters them, and then passes them onto the groups\n    filteredPeraGraphs$ = new BehaviorSubject<PeraGraph[]>([]);\n\n    @Input()\n    peraGraphSortingFunction: (firstGraph: PeraGraph, secondGraph: PeraGraph) => number;\n\n    @Input()\n    peraGraphTitleFunction: (graph: PeraGraph) => string;\n\n    groups$;\n\n    @Input()\n    disableGroups: boolean;\n\n    @Input()\n    numGroupsDisplay: BehaviorSubject<number>;\n\n    @Input()\n    peraGraphHeight: number;\n\n    @Input()\n    peraGraphWidth: number;\n\n    @ViewChild('arrayView')\n    arrayViewElementRef: ElementRef;\n\n    scrollContainerWidth: string;\n\n    expandedSubject$: BehaviorSubject<boolean>;\n\n    constructor(public arrayViewService: ArrayViewService,\n                private arrayViewConfigService: ArrayViewConfigService,\n                private peragraphApiService: PeragraphApiService,\n                private filterService: FilterService,\n                private flowsheetsApiService: FlowsheetsApiService,\n                private priorWarningsConfigService: PriorWarningsConfigService,\n                private priorWarningsApiService: PriorWarningsApiService,\n                private peraGraphService: PeraGraphService,\n                private sortService: SortService,\n                private groupService: GroupService,\n                private ref: ChangeDetectorRef) {\n    }\n\n    ngOnInit() {\n        this.numGroupsDisplay = this.groupService.changeNumberOfGroupsToShow$;\n        this.expandedSubject$ = this.groupService.expandGroups$;\n        this.groups$ = this.groupService.groupSubject$;\n        // Load the configuration for the array view and subscribe to the PeraGraphs and Flowsheet services.\n        this.arrayViewConfigService.configurationLoaded$.pipe(filter((isReady: boolean) => isReady), first()).subscribe(() => this.initializeArrayView());\n\n        this.updateBehaviorBasedOnInputs();\n    }\n\n    initializeArrayView() {\n\n        // Once we have the configuration, we can get the rest of the information that we need\n        this.arrayViewService.calcCurrentTimestamp();\n\n        // get all Peragraphs on an interval and push them into the peraGraphSubject to be filtered\n        this.peraGraphSubscription = this.peragraphApiService.getPeraGraphInterval().subscribe(\n            peraGraphs => {\n                this.peragraphApiService.getPeraGraphSubject().next(peraGraphs);\n            }\n        );\n\n        // uses combineLatest to update the array view when either new graphs are added (peraGraph Subject - sourced by peraGraphInterval and manual graph refreshes) or new filters are added (filterSubject)\n        // and then filters before pushing to groups\n        this.filteredPeraGraphsSubscription = combineLatest(this.peragraphApiService.getPeraGraphSubject(), this.filterService.filterSubject$).pipe(\n            map((peraGraphsAndFilters) => peraGraphsAndFilters[0].filter(peraGraph =>\n            this.arrayViewService.filterPeragraph(peraGraph, this.filterService.activeFilters))\n        ), mergeMap((peraGraphs) => this.arrayViewService.addRIToPeraGraphs(peraGraphs)\n        ), map((peraGraphs: PeraGraph[]) => peraGraphs.sort((peraGraphA: PeraGraph, peraGraphB: PeraGraph) => this.arrayViewService.sortGraphs(peraGraphA, peraGraphB, this.sortService.activeSortFunction)\n        )), tap((peraGraphs: PeraGraph[]) => {\n            // if this iteration of the filtered graphs subject was triggered by the apply filters button\n            // then recalculate and close the proper groups\n            // if generated by refresh button or interval, don't reset the closed groups\n            const groupDisplay: {groupsToShow: number, expanded: boolean} = this.arrayViewService.calculateNumberOfGroupsToShow(peraGraphs);\n            if (this.groupService.changeGroupsClosed) {\n                this.groupService.changeNumberOfGroupsToShow$.next(groupDisplay.groupsToShow);\n                this.groupService.changeGroupsClosed = false;\n            }\n            this.groupService.expandGroups$.next(groupDisplay.expanded);\n        })).subscribe((peraGraphs: PeraGraph[]) => {\n            // Assign an index to the anonymous property of the PeraGraph - used by the Anonymous Patient chart title.\n            let anonymousIndex = 1;\n            peraGraphs.forEach(graph => {\n                graph.anonymous = anonymousIndex;\n                anonymousIndex++;\n            });\n            this.filteredPeraGraphs$.next(peraGraphs);\n            this.arrayViewService.completedRefresh$.next();\n\n            // Push the new Chart title selection through the Subject.\n            this.arrayViewService.chartTitleSubject$.next(this.arrayViewService.selectedChartTitle);\n        });\n\n        // Whenever we get new FSCs (on an interval) push them out through the subject so the groups receive the updated map of FSCs\n        this.flowSheetSubscription = this.flowsheetsApiService.getFlowSheetInterval().subscribe(\n            flowsheets => this.flowsheetsApiService.getFlowSheetSubject().next(flowsheets.body));\n\n        // Whenever we get new prior warnings (on an interval) push them out through the subject so the groups receive the updated map of warnings\n        if (this.priorWarningsConfigService.getPriorWarningEndPoint()) {\n            this.priorWarningSubscription = this.priorWarningsApiService.getPriorWarningInterval().subscribe(\n                priorWarnings => this.priorWarningsApiService.getPriorWarningSubject().next(priorWarnings.body));\n        }\n    }\n\n    ngAfterViewChecked(): void {\n        if (this.scrollContainerWidth !== this.getScrollContainerWidth()) {\n            this.scrollContainerWidth = this.getScrollContainerWidth();\n            if (this.ref) {\n                this.ref.detectChanges();\n            }\n        }\n    }\n\n    /**\n     * Used to dynamically set the width of the scroll container (based on the width of the array view component)\n     */\n    public getScrollContainerWidth(): string {\n        const width = this.arrayViewElementRef.nativeElement.offsetWidth;\n        // Ensure that the container has padding\n        const padding = width * .11;\n        // Get the number of graphs that we should be able to display in the window (taking the padding into account)\n        const numGraphsInRow = Math.floor((width - padding) / this.arrayViewService.peraGraphWidth);\n        // Return the width\n        return numGraphsInRow * this.arrayViewService.peraGraphWidth + 'px';\n    }\n\n    ngOnChanges() {\n        this.updateBehaviorBasedOnInputs();\n        // TODO update this when we add the ability to change the title/grouping/sorting\n    }\n\n    /**\n     * Updates the fields in the array view service and in this component based on the input so that we see the desired behavior\n     */\n    private updateBehaviorBasedOnInputs() {\n        this.disableGroupsIfAppropriate();\n        this.setPeraGraphSortingFunction();\n        this.updatePeraGraphDimensions();\n    }\n\n    /**\n     * If we pass in an explicit width/height, use them\n     */\n    private updatePeraGraphDimensions() {\n        if (this.peraGraphHeight && this.peraGraphWidth) {\n            this.arrayViewService.peraGraphWidth = this.peraGraphWidth;\n            this.arrayViewService.peraGraphHeight = this.peraGraphHeight;\n            this.arrayViewService.refreshViewPort();\n        }\n    }\n\n    /**\n     * This sets the array view service's sorting function to the input passed to the array view component\n     */\n    private setPeraGraphSortingFunction() {\n        if (this.peraGraphSortingFunction) {\n            this.arrayViewService.sortGraphs = this.peraGraphSortingFunction;\n        }\n    }\n\n    /**\n     * If groups are disabled or absent, add a single group that will catch all graphs and not display a header\n     */\n    private disableGroupsIfAppropriate() {\n        // If groups are disabled or if we don't have groups\n        if (this.disableGroups || this.groups$ == null) {\n            this.groups$ = of([[null, function (peraGraph: PeraGraph) {\n                return true;\n            }]]);\n        }\n    }\n\n    // not sure if this is needed since we are using combinedLatest above but I left it just in case\n    // public filterChanged() {\n    //   // Get the current list of PeraGraphs without making another call\n    //   let peraGraphs = this.peragraphApiService.getPeraGraphSubject().value;\n    //   // Filter the list according to the updated matchesFilter function within the arrayView service\n    //   peraGraphs = this.arrayViewService.filterPeragraphs(peraGraphs, this.filterService.activeFilters)\n    //   // Publish result to all subscribing groups\n    //   this.peragraphApiService.getPeraGraphSubject().next(peraGraphs);\n    // }\n\n    ngOnDestroy() {\n        if (this.ref) {\n            this.ref.detach();\n            this.ref = null;\n        }\n        if (this.peraGraphSubscription && !this.peraGraphSubscription.closed) {\n            this.peraGraphSubscription.unsubscribe();\n        }\n        if (this.flowSheetSubscription && !this.flowSheetSubscription.closed) {\n            this.flowSheetSubscription.unsubscribe();\n        }\n        if (this.priorWarningSubscription && !this.priorWarningSubscription.closed) {\n            this.priorWarningSubscription.unsubscribe();\n        }\n        if (this.filteredPeraGraphsSubscription && !this.filteredPeraGraphs$.closed) {\n            this.filteredPeraGraphsSubscription.unsubscribe();\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ElementRef, HostBinding,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit, Renderer2\n} from '@angular/core';\nimport {ArrayViewService} from '../service/array-view.service';\nimport {BehaviorSubject, Observable, Subscription} from 'rxjs';\nimport {map, tap} from 'rxjs/operators';\nimport {ResizeEvent} from 'angular-resizable-element';\nimport {PeraGraphService} from './pera-graph/service/pera-graph.service';\nimport {PeraGraph} from 'ng-common-library/lib/model/PeraGraph';\nimport {PeragraphApiService} from 'ng-common-library';\nimport {FilterService} from \"ng-filters-library\";\n\n@Component({\n    selector: 'phlib-group',\n    templateUrl: './group.component.html',\n    styleUrls: ['./group.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GroupComponent implements OnInit, OnChanges, OnDestroy {\n\n    @Input()\n    public showPeraGraphs = false;\n    @Input()\n    expanded = false;\n    @Input()\n    public group: { laneFunction: (peraGraph: PeraGraph) => boolean, laneTitle: string };\n    @Input()\n    public peraGraphHeight: number;\n    @Input()\n    public peraGraphWidth: number;\n    @Input()\n    public scrollContainerWidth: string;\n    @Input()\n    public filteredPeraGraphs$: BehaviorSubject<PeraGraph[]>;\n\n    // Group information\n    public groupName: string;\n    private filterFunction = null;\n\n    // Default number of rows - TODO possibly make this configurable, or remember the user's last selection and save it\n    private nonExpandedRows = 3;\n    private expandedRows = 6;\n    private currentNumberOfRowsDisplayed = this.nonExpandedRows;\n\n    // Observables\n    public peraGraphs$: Observable<Array<PeraGraph>>;\n    public peraGraphs_length$: Subscription;\n    options$ = new BehaviorSubject<{ itemHeight: number, itemWidth: number, numAdditionalRows: number }>(null);\n\n    // Maintained to determine chart equality\n    private previousPeraGraphs: Array<PeraGraph>;\n    private currentPeraGraphs: Array<PeraGraph>;\n\n    // Displayed in the header\n    public groupLength: number;\n\n    // Differentiate between a single click and a double click\n    private clickTimer = 0;\n    private preventSingleClick = false;\n\n    // Allows for simple resizing of the viewport\n    private viewContainerMaxHeight: string;\n    public style: object = {maxHeight: this.viewContainerMaxHeight};\n\n    public hideGroup = false;\n\n    constructor(private arrayViewService: ArrayViewService,\n                private filterService: FilterService,\n                private peraGraphService: PeraGraphService,\n                private peragraphApiService: PeragraphApiService,\n                private ref: ChangeDetectorRef,\n                private elementRef: ElementRef,\n                private renderer: Renderer2) {\n    }\n\n    // TODO break pieces out into a service as appropriate\n\n    ngOnInit() {\n        // Set the group information\n        this.groupName = this.group.laneTitle;\n        this.filterFunction = this.group.laneFunction;\n        this.updatePeraGraphs();\n        if (this.expanded) {\n            this.currentNumberOfRowsDisplayed = this.expandedRows\n        } else {\n            this.currentNumberOfRowsDisplayed = this.nonExpandedRows;\n        }\n    }\n\n    ngOnChanges() {\n        this.updateNumberOfItemsInViewport();\n        // Identify the ideal width, and set both it and the height through ng-style on the viewport container\n        this.updateViewPortPerCurrentRows();\n        this.updatePeraGraphs();\n        this.maintainGroupLength();\n    }\n\n    hideOrDisplayGroup() {\n        if (this.elementRef) {\n            if (this.groupLength === 0) {\n                this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'none');\n            } else {\n                this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'block');\n            }\n        }\n    }\n\n    private updatePeraGraphs() {\n        this.peraGraphs$ = this.filteredPeraGraphs$.pipe(\n            map(peraGraphs => peraGraphs.filter(peraGraph => this.matchesGroup(peraGraph))),\n            tap(peraGraphs => {\n                // Used to determine equality for virtual scrolling\n                this.previousPeraGraphs = this.currentPeraGraphs;\n                this.currentPeraGraphs = peraGraphs;\n                // Specifies the number of graphs in a group\n                this.groupLength = peraGraphs.length;\n                this.hideOrDisplayGroup();\n            }));\n    }\n\n    /**\n     * When we're not displaying PeraGraphs, we don't pass the observable to the virtual scroll which typically populates the group length.\n     * This function will conditionally get the group length through other means.\n     */\n    maintainGroupLength() {\n        if (!this.showPeraGraphs) {\n            // If we're not showing peraGraphs, subscribe separately so that we can get the group length\n            this.peraGraphs_length$ = this.filteredPeraGraphs$.pipe(map(peraGraphs =>\n                peraGraphs.filter(peraGraph => this.matchesGroup(peraGraph)))).subscribe((peraGraphs) => {\n                this.groupLength = peraGraphs.length;\n                this.hideOrDisplayGroup();\n                if (this.ref) {\n                    this.ref.detectChanges();\n                }\n            });\n        } else if (this.peraGraphs_length$ && !this.peraGraphs_length$.closed) {\n            // If we're showing peraGraphs, there's no need for this subscription\n            this.peraGraphs_length$.unsubscribe();\n        }\n    }\n\n    /**\n     * This function determines which graphs belong to this group\n     *\n     * @param peraGraph\n     * @returns\n     */\n    matchesGroup(peraGraph: PeraGraph): boolean {\n        if (this.filterFunction) {\n            return this.filterFunction(peraGraph);\n        }\n        return true;\n    }\n\n    /**\n     * Function to determine equality, given two indicies in the array (optional, default: (p,c) => p === c))\n     *\n     * @param prevDataIndex\n     * @param curDataIndex\n     * @returns\n     */\n    equals = (prevDataIndex: number, curDataIndex: number) => {\n        const curPeraGraph = this.currentPeraGraphs[curDataIndex];\n        const previousPeraGraph = (this.previousPeraGraphs) ? this.previousPeraGraphs[prevDataIndex] : null;\n        /*\n         Most browsers maintain the order of the fields so this should work in most cases and when it fails, it'll just return false so anything\n         else is an optimization\n         */\n        return previousPeraGraph != null && curPeraGraph != null && JSON.stringify(previousPeraGraph) === JSON.stringify(curPeraGraph);\n    };\n\n    /**\n     * Called when the viewport is being resized manually\n     *\n     * @param event\n     */\n    onResizing(event: ResizeEvent): void {\n        // Set the height according to the event\n        this.viewContainerMaxHeight = event.rectangle.height + 'px';\n        // Set the number of rows that should be displayed according to the new height\n        this.currentNumberOfRowsDisplayed = Math.ceil(event.rectangle.height / this.peraGraphHeight);\n        this.updateViewPortPerCurrentRows();\n    }\n\n    /**\n     * Called when the header is clicked\n     */\n    click() {\n        this.preventSingleClick = false;\n        // @ts-ignore\n        this.clickTimer = setTimeout(() => {\n            if (!this.preventSingleClick) {\n                this.toggleShow();\n                if (this.ref) {\n                    this.ref.detectChanges();\n                }\n            }\n        }, 200);\n    }\n\n    /**\n     * Called when the header is double clicked\n     */\n    doubleClick() {\n        clearTimeout(this.clickTimer);\n        this.preventSingleClick = true;\n        this.toggleExpand();\n    }\n\n    /**\n     * Updates the height/width of the viewport container as well as the height/width/number of items in the viewport\n     */\n    updateViewPortPerCurrentRows() {\n        if (this.expanded) {\n            this.currentNumberOfRowsDisplayed = this.expandedRows\n        } else {\n            this.currentNumberOfRowsDisplayed = this.nonExpandedRows;\n        }\n        // Set the height of the container from the number of rows that should be displayed\n        this.viewContainerMaxHeight = this.getViewPortHeightFromRowsAsString(this.currentNumberOfRowsDisplayed);\n        this.setStyle(this.viewContainerMaxHeight);\n        // Update the options so that the correct number of rows are displayed in the viewport\n        this.updateNumberOfItemsInViewport();\n    }\n\n    /**\n     * Toggles whether or not any PeraGraphs are shown in the group\n     */\n    toggleShow() {\n        // Switch from removing the element from the DOM via ngIf to using the hidden attribute once it's rendered once\n        this.hideGroup = (this.showPeraGraphs) ? !this.hideGroup : false;\n        this.arrayViewService.tokenRefresh$.next();\n\n        // If we have never displayed PeraGraphs in this group\n        if (!this.showPeraGraphs) {\n            // Start rendering graphs for the first time\n            this.startRenderingPeraGraphs();\n        }\n    }\n\n    /**\n     * This function toggles expansion of the viewport height\n     */\n    toggleExpand() {\n        this.arrayViewService.tokenRefresh$.next();\n        this.expanded = !this.expanded;\n        // Update the number of rows being displayed according to the current expanded status\n        this.currentNumberOfRowsDisplayed = (this.expanded) ? this.expandedRows : this.nonExpandedRows;\n        // Update the viewport\n        this.updateViewPortPerCurrentRows();\n        // If we're not showing graphs, show them\n        if (!this.showPeraGraphs || this.hideGroup) {\n            this.hideGroup = false;\n            // If we have never displayed peragraphs in this group\n            if (!this.showPeraGraphs) {\n                // Start rendering graphs for the first time\n                this.startRenderingPeraGraphs();\n            }\n        }\n    }\n\n    /**\n     * If ngIf is currently evaluating to false, trigger a change and update the view container\n     */\n    startRenderingPeraGraphs() {\n        this.showPeraGraphs = true;\n        this.updateViewPortPerCurrentRows();\n        if (this.ref) {\n            this.ref.detectChanges();\n        }\n    }\n\n    /**\n     * Updates item size and the number of rows being rendered\n     */\n    updateNumberOfItemsInViewport() {\n        this.options$.next({\n            itemHeight: this.peraGraphHeight,\n            itemWidth: this.peraGraphWidth,\n            numAdditionalRows: this.getNumberOfRowsToRender()\n        });\n    }\n\n    /**\n     * Applies a buffer to the number of rows being displayed to improve scrolling performance\n     *\n     * @returns\n     */\n    getNumberOfRowsToRender(): number {\n        const additionalRowsToRender = (this.arrayViewService.isDisplayingTiles()) ? 100 : 2;\n        return this.currentNumberOfRowsDisplayed + additionalRowsToRender;\n    }\n\n    /**\n     * Set the height and width of the viewport container\n     *\n     * @param height\n     */\n    setStyle(height: string) {\n        this.style = {\n            maxHeight: height,\n            width: this.scrollContainerWidth\n        };\n    }\n\n    /**\n     * Returns the ideal viewport height for the number of rows passed to the function\n     *\n     * @param rows\n     * @returns\n     */\n    getViewPortHeightFromRowsAsString(rows: number): string {\n        return this.peraGraphHeight * rows + 'px';\n    }\n\n    ngOnDestroy(): void {\n        if (this.ref) {\n            this.ref.detach();\n            this.ref = null;\n        }\n        this.filterFunction = null;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ArrayViewService} from '../../../service/array-view.service';\nimport {first} from 'rxjs/operators';\nimport {TooltipInfo} from '../../../model/TooltipInfo';\nimport {PeraGraphService} from './pera-graph.service';\nimport {ArrayViewConfigService} from '../../../service/array-view-config.service';\nimport {PeraGraph} from 'ng-common-library/lib/model/PeraGraph';\nimport {LoginService} from 'ng-login-library';\nimport {TokenApiService} from 'ng-common-library';\nimport {Subject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TooltipService {\n\n    public toolTipInfoUpdated$: Subject<TooltipInfo> = new Subject<TooltipInfo>();\n\n    constructor(private graphService: PeraGraphService,\n                private arrayViewService: ArrayViewService,\n                private http: HttpClient,\n                private loginService: LoginService,\n                private tokenApiService: TokenApiService,\n                private arrayViewConfigService: ArrayViewConfigService) {\n    }\n\n    updateToolTipInfo(graph: PeraGraph) {\n        this.tokenApiService.refreshToken(this.loginService.getCurrentUser());\n        // Get the current tooltip info from the server.\n        this.http.get(this.arrayViewConfigService.getToolTipInfoEndPoint() + '/pid/' + graph.patient.pid + '/visit/' + graph.visitId).pipe(first()).subscribe((toolTipInfo: TooltipInfo) => {\n            // Ensure that the user hasn't moved onto a new graph with a different during the time that the call was made to the server\n            if (graph.visitId === toolTipInfo.visitId) {\n                const numberOfOtherVisitsWithValidRi = toolTipInfo.numberOfOtherVisitsWithValidRi;\n                // The query will return a -1 value if the current and only visit has no valid RI scores.\n                graph.numberVisitsWithValidRI = (numberOfOtherVisitsWithValidRi > 0) ? numberOfOtherVisitsWithValidRi : 0;\n                // Tooltip diagnosis formatting\n                if (toolTipInfo.diagnosis != null) {\n                    // Replace the first ^ with nothing\n                    const tmpDiag = toolTipInfo.diagnosis.replace('^', '');\n                    // Replace the rest of the ^ with ', '\n                    graph.diagnosis = tmpDiag.replace(/\\^/g, ', ');\n                }\n                this.toolTipInfoUpdated$.next(toolTipInfo);\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges\n} from '@angular/core';\nimport {ArrayViewService} from '../../service/array-view.service';\nimport {PeraGraphService} from './service/pera-graph.service';\nimport {NgbPopover} from '@ng-bootstrap/ng-bootstrap';\nimport {HttpClient} from '@angular/common/http';\nimport {TooltipService} from './service/tooltip.service';\nimport {Subscription} from 'rxjs';\nimport {FlowsheetsApiService, PeraGraph, UsageApiService, UsageType} from 'ng-common-library';\nimport {PriorWarningsApiService} from '../../service/prior-warnings/api/prior-warnings-api.service';\nimport {FlowSheetBase} from 'ng-common-library/lib/model/FlowSheetBase';\nimport {TooltipInfo} from '../../model/TooltipInfo';\n\n@Component({\n    selector: 'phlib-pera-graph',\n    templateUrl: './pera-graph.component.html',\n    styleUrls: ['./pera-graph.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PeraGraphComponent implements OnInit, OnDestroy, OnChanges {\n\n    @Input()\n    public graph: PeraGraph;\n\n    @Input()\n    public peraGraphWidth: number;\n\n    @Input()\n    public peraGraphHeight: number;\n\n    public style;\n    private margin = 10;\n\n    public flowsheets: Array<FlowSheetBase>;\n    public priorWarning: string;\n    private flowSheetMap$: Subscription;\n    private priorWarningMap$: Subscription;\n    private toolTipInfoEvent$: Subscription;\n    public latestRi: number;\n    private isMouseOverPeraGraph = false;\n    private tooltip: NgbPopover;\n\n    constructor(public service: ArrayViewService,\n                private flowsheetsApiService: FlowsheetsApiService,\n                private priorWarningsApiService: PriorWarningsApiService,\n                private usageService: UsageApiService,\n                private graphService: PeraGraphService,\n                private toolTipService: TooltipService,\n                private http: HttpClient,\n                private ref: ChangeDetectorRef) {\n    }\n\n    ngOnInit() {\n        this.subscribeToPeraGraphDataFeeds();\n        this.subscribeToToolTipInfoEvent();\n        this.style = {\n            width: this.peraGraphWidth - this.margin + 'px',\n            height: this.peraGraphHeight - this.margin + 'px'\n        };\n        this.usageService.addUsageData(this.graph, UsageType.Array);\n        // Manage change detection explicitly\n        this.ref.detach();\n    }\n\n    /**\n     * Subscribe to the interval observables/subjects that pass information the PeraGraph needs\n     *\n     * Currently, this includes prior warnings and flowsheets\n     */\n    subscribeToPeraGraphDataFeeds() {\n        this.flowSheetMap$ = this.flowsheetsApiService.getFlowSheetSubject().subscribe((fscMap) => {\n            this.getFlowSheetsForVisit(fscMap);\n            if (this.ref) {\n                this.ref.detectChanges();\n            }\n        });\n\n        this.priorWarningMap$ = this.priorWarningsApiService.getPriorWarningSubject().subscribe((pwMap) => {\n            this.getPriorWarningsForVisit(pwMap);\n            if (this.ref) {\n                this.ref.detectChanges();\n            }\n        });\n    }\n\n    subscribeToToolTipInfoEvent() {\n        this.toolTipInfoEvent$ = this.toolTipService.toolTipInfoUpdated$.subscribe((toolTipInfo: TooltipInfo) => {\n            // Ensure that the user hasn't moved onto a new graph with a different during the time that the call was made to the server\n            if (this.isMouseOverPeraGraph && toolTipInfo.visitId === this.graph.visitId) {\n                // If the service takes a second to respond and the popover is no longer there, don't try to open it\n                if (this.tooltip) {\n                    this.graphService.tooltip = this.tooltip;\n                    this.tooltip.open();\n                }\n                if (this.ref) {\n                    this.ref.detectChanges();\n                }\n            }\n        });\n    }\n\n    /**\n     * This only fires when the user passes the mouse over the graph to get the tooltip.\n     * For those graphs, force a change detection cycle so that the ToolTip component updates.\n     */\n    mouseEnterHandler(po: NgbPopover): void {\n        if (!this.isMouseOverPeraGraph && !po.isOpen()) {\n            this.isMouseOverPeraGraph = true;\n            this.tooltip = po;\n            if (this.graph) {\n                // Close any existing tooltip\n                this.graphService.closeToolTip();\n                this.toolTipService.updateToolTipInfo(this.graph);\n            }\n        }\n    }\n\n    /**\n     * This fires when the user passes the mouse over the graph, and then moves the mouse off of the graph\n     * For those graphs, close the tooltip\n     *\n     * @param po\n     */\n    mouseLeaveHandler(po: NgbPopover): void {\n        this.isMouseOverPeraGraph = false;\n        if (po.isOpen()) {\n            po.close();\n        }\n    }\n\n    graphClicked(graph: PeraGraph) {\n        if (this.tooltip && this.tooltip.isOpen()) {\n            // console.log('Forcefully closing tooltip');\n            this.tooltip.close();\n            this.tooltip = null;\n        }\n        this.graphService.graphClickedEvent(graph);\n        this.service.tokenRefresh$.next();\n    }\n\n    isShown(po: NgbPopover): void {\n        if (!this.tooltip) {\n            // Closing tooltip\n            setTimeout(() => po.close(), 1);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // If the item size changed, update style\n        if (changes && changes.peraGraphWidth && changes.peraGraphWidth.previousValue !== changes.peraGraphWidth.currentValue) {\n            this.style = {\n                width: this.peraGraphWidth - this.margin + 'px',\n                height: this.peraGraphHeight - this.margin + 'px'\n            };\n        }\n\n        // If the graph changed, update the related data so that we're showing the right information\n        if (changes &&\n            changes.graph &&\n            changes.graph.currentValue !== changes.graph.previousValue &&\n            !changes.graph.firstChange &&\n            changes.graph.currentValue.visitId !== changes.graph.previousValue.visitId) {\n\n            // console.log('ArrayView change: Adding usage data for ' + this.graph.vnm);\n            this.usageService.addUsageData(this.graph, UsageType.Array);\n\n            // The graph that we're displaying changed so get the new FSCs from the map\n            const fscMap = this.flowsheetsApiService.getFlowSheetSubjectValue();\n            this.getFlowSheetsForVisit(fscMap);\n            // Get the prior warning for this graph instead of the stale graph\n            const priorWarnings = this.priorWarningsApiService.getPriorWarningSubjectValue();\n            this.getPriorWarningsForVisit(priorWarnings);\n            // Push the changes\n            if (this.ref) {\n                this.ref.detectChanges();\n            }\n        }\n    }\n\n    getFlowSheetsForVisit(fscMap) {\n        if (fscMap) {\n            const fsc = fscMap[this.graph.visitId];\n            // Update the RI-related fields if necessary\n            if (fsc && !(this.flowsheets === fsc) && JSON.stringify(this.flowsheets) !== JSON.stringify(fsc)) {\n                // Note this may trigger extra changes based on how browsers handle JSON object order\n                this.flowsheets = fsc;\n                this.latestRi = fsc[this.flowsheets.length - 1].riScore;\n            } else if (!fsc && this.flowsheets !== null) {\n                // Clear the RI-related fields\n                this.flowsheets = [];\n                this.latestRi = null;\n            }\n        }\n    }\n\n    getPriorWarningsForVisit(priorWarnings) {\n        if (priorWarnings) {\n            const pw = priorWarnings[this.graph.visitId];\n            // TODO can we set this.priorWarning = pw without the logic below?\n            // If we have a prior warning and it's not the same, trigger a change\n            if (pw && pw !== this.priorWarning) {\n                this.priorWarning = pw;\n            } else if (!pw) {\n                // No prior warning exists, update our prior warning to reflect this\n                this.priorWarning = null;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.ref) {\n            this.ref.detach();\n            this.ref = null;\n        }\n        // Unsubscribe when the component is destroyed\n        if (this.flowSheetMap$ && !this.flowSheetMap$.closed) {\n            this.flowSheetMap$.unsubscribe();\n        }\n        if (this.priorWarningMap$ && !this.priorWarningMap$.closed) {\n            this.priorWarningMap$.unsubscribe();\n        }\n        if (this.toolTipInfoEvent$ && !this.toolTipInfoEvent$.closed) {\n            this.toolTipInfoEvent$.unsubscribe();\n        }\n    }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit\n} from '@angular/core';\n\nimport * as moment_ from 'moment-timezone';\nimport {ArrayViewService} from '../../../service/array-view.service';\nimport {PeraGraph} from 'ng-common-library/lib/model/PeraGraph';\nimport {ChartService, DateService} from 'ng-common-library';\nimport {FlowSheetBase} from 'ng-common-library/lib/model/FlowSheetBase';\n\ndeclare var require: any;\nconst Highcharts = require('highcharts');\n\n// The JavaScript compiler gives a weird \"moment cannot be used as a namespace\" type of error\n// This is the workaround...\nconst moment = moment_;\n\n@Component({\n  selector: 'phlib-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartComponent implements OnInit, OnChanges, OnDestroy {\n  @Input()\n  flowsheets: Array<FlowSheetBase>;\n\n  @Input()\n  public graph: PeraGraph;\n\n  @Input()\n  currentTimestamp: number;\n\n  Highcharts = Highcharts;\n  chartOptions;\n\n  X_AXIS_DAYS = 5;\n  DAY_IN_MILLISECONDS = 86400000;\n\n  minRiScore = 0;\n  minRecordedDt = 999999999999999999999;\n  maxRecordedDt = 0;\n\n  series;\n\n  constructor(private dateService: DateService,\n              private chartService: ChartService,\n              private arrayViewService: ArrayViewService,\n              private ref: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n    // Manage change detection explicitly\n    this.ref.detach();\n    // Get the series\n    this.series = this.getChartSeries();\n    // Build the chart options\n    this.chartOptions = this.getChartOptions();\n    // Trigger change detection\n    this.ref.detectChanges();\n  }\n\n  ngOnChanges() {\n    // Ensure that a chart already exists\n    if (this.Highcharts && this.chartOptions) {\n      // Fetch the series using the latest flowsheet information\n      this.series = this.getChartSeries();\n      // If the series is different\n      if (this.series !== this.chartOptions.series) {\n        this.updateChart();\n        this.chartOptions = {...this.chartOptions};\n        if (this.ref) {\n          this.ref.detectChanges();\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates the chart\n   */\n  updateChart() {\n    this.chartOptions.series = this.series;\n    this.updateXAxis();\n    this.updateYAxis();\n  }\n\n  /**\n   * Updates the pieces of the Y axis that need updating\n   */\n  updateYAxis() {\n    const minYAxisTick = this.chartService.getMinYAxisTick(this.minRiScore);\n    // If the min Y axis value would change, update it\n    if (this.chartOptions.yAxis[0].min !== minYAxisTick) {\n      this.chartOptions.yAxis[0].min = minYAxisTick;\n      this.chartOptions.yAxis[0].plotLines = this.chartService.createZeroAxisLine(this.minRiScore);\n    }\n  }\n\n  /**\n   * Updates the pieces of the X axis that need updating\n   */\n  updateXAxis() {\n    this.chartOptions.xAxis = this.getXaxis();\n  }\n\n  /**\n   * Returns the chart options\n   */\n  getChartOptions() {\n    return {\n      chart: {\n        type: 'line',\n        spacing: [2, 0, 0, 0],\n        marginLeft: 18,\n        marginRight: 2,\n        plotBackgroundColor: 'white',\n        reflow: false,\n        animation: false,\n        alignTicks: false\n      },\n      tooltip: {\n        enabled: false,\n        animation: false\n      },\n      plotOptions: {\n        series: {\n          color: '#848484',\n          turboThreshold: 0,\n          animation: false,\n          enableMouseTracking: false,\n          stickyTracking: false,\n          shadow: false,\n          dataLabels: {\n            style: {\n              textShadow: false\n            }\n          }\n        },\n        line: {\n          animation: false,\n          enableMouseTracking: false,\n          stickyTracking: false,\n          shadow: false,\n          dataLabels: {\n            style: {\n              textShadow: false\n            }\n          }\n        }\n      },\n      credits: {\n        enabled: false\n      },\n      legend: {\n        enabled: false\n      },\n      title: {\n        text: ''\n      },\n      xAxis: this.getXaxis(),\n      yAxis: this.getYaxis(),\n      series: this.series\n    };\n  }\n\n  getXaxis() {\n    const xAxis = [];\n    xAxis.push({\n      type: 'datetime',\n      startOnTick: false,\n      endOnTick: false,\n      tickInterval: this.graph.isDischarged ? null : this.DAY_IN_MILLISECONDS,\n      gridLineWidth: 1,\n      plotLines: this.chartService.updateAlertPlotLine(this.graph),\n      title: {\n        text: ' '\n      },\n      labels: {\n        distance: 20,\n        style: {\n          color: 'black',\n          'font-size': '.6em'\n        },\n        formatter: function () {\n          return moment(this.value).utcOffset(0).format('MM/DD');\n        },\n        step: 1\n      },\n      min: this.getMinXAxisValue(),\n      max: this.getMaxXAxisValue(),\n    });\n    return xAxis;\n  }\n\n  getMaxXAxisValue() {\n    return (this.graph.discharged) ? null : this.dateService.translateDate(this.arrayViewService.getCurrentTimestamp(), this.graph.timeZone);\n  }\n\n  getMinXAxisValue() {\n    return (this.graph.discharged) ? null : this.dateService.translateDate(\n      this.arrayViewService.getCurrentTimestamp(), this.graph.timeZone) - this.X_AXIS_DAYS * this.DAY_IN_MILLISECONDS;\n  }\n\n  getYaxis() {\n    const yAxis = [];\n    yAxis.push({\n      title: {\n        text: ' '\n      },\n      labels: {\n        style: {\n          color: 'black',\n          'font-size': '.6em'\n        },\n        padding: 1,\n        align: 'center'\n      },\n      offset: -12,\n      //     gridLineColor : colorHealthScoreGridLine,\n      gridLineWidth: 1,\n      min: this.chartService.getMinYAxisTick(this.minRiScore),\n      max: 100,\n      plotLines: this.chartService.createZeroAxisLine(this.minRiScore),\n      tickPositioner: function (min, max) {\n\n        let tick = min;\n        const ticks = [];\n\n        while (tick <= max) {\n          ticks.push(tick);\n          tick += 20;\n        }\n\n        return ticks;\n\n      }\n    });\n    return yAxis;\n  }\n\n  getChartSeries() {\n    const series = [];\n    series.push({\n      name: '',\n      data: this.getDataPoints(this.flowsheets),\n      showInLegend: false,\n      turboThreshold: 0,\n      color: {\n        linearGradient: {x1: 0, x2: 1, y1: 0, y2: 0},\n        stops: this.getArrayOfLocationChanges(this.flowsheets)\n      },\n      marker: {\n        enabled: (this.flowsheets && this.flowsheets.length === 1) ? true : false,\n        color: (this.flowsheets && this.flowsheets.length === 1) ? this.chartService.getMarkerColor(this.flowsheets[0].unitType) : null,\n        radius: 1.5\n      }\n    });\n    return series;\n  }\n\n  getArrayOfLocationChanges(fscList) {\n    const range = this.maxRecordedDt - this.minRecordedDt;\n    const colors = [[0, 'black']];\n    let color = 'black';\n    let unitType = null;\n    let xval = 0;\n\n    if (fscList && range > 0) {\n      fscList.forEach((fsc) => {\n        // If the unit type changed\n        if (fsc.unitType !== unitType) {\n          // Get the percentage across the X axis by recorded date\n          xval = (fsc.key.recordedDt - this.minRecordedDt) / range;\n          // add an entry just prior to this point to smooth the gradient\n          colors.push([xval - .0001, color]);\n          // The the appropriate color for this unitType\n          color = this.chartService.getMarkerColor(fsc.unitType);\n          // Push the change in color\n          colors.push([xval, color]);\n          // Remember the current unit type\n          unitType = fsc.unitType;\n        }\n      });\n    }\n\n    return colors;\n  }\n\n  getDataPoints(data) {\n    const dataPoints = [];\n    // Reset the variables\n    this.minRiScore = 100;\n    this.minRecordedDt = 999999999999999999999;\n    this.maxRecordedDt = 0;\n\n    // If we have data\n    if (data) {\n      data.forEach((fsc) => {\n        dataPoints.push([this.dateService.translateDate(fsc.key.recordedDt, this.graph.timeZone), fsc.riScore + (Math.random() / 1000)]);\n        // Keep track of the extreme values - they are used elsewhere\n        this.minRecordedDt = (this.minRecordedDt > fsc.key.recordedDt) ? fsc.key.recordedDt : this.minRecordedDt;\n        this.maxRecordedDt = (this.maxRecordedDt < fsc.key.recordedDt) ? fsc.key.recordedDt : this.maxRecordedDt;\n        this.minRiScore = (this.minRiScore > fsc.riScore) ? fsc.riScore : this.minRiScore;\n      });\n    }\n    return dataPoints;\n  }\n\n  ngOnDestroy(): void {\n    if (this.ref) {\n      this.ref.detach();\n      this.ref = null;\n    }\n  }\n}\n","import {ChangeDetectorRef, Component, Input, OnChanges, OnInit} from '@angular/core';\nimport {PeraGraphService} from '../service/pera-graph.service';\nimport {WarningService} from 'ng-common-library';\nimport {ArrayViewService} from '../../../service/array-view.service';\n\n@Component({\n  selector: 'phlib-pera-graph-tile',\n  templateUrl: './pera-graph-tile.component.html',\n  styleUrls: ['./pera-graph-tile.component.css']\n})\nexport class PeraGraphTileComponent implements OnInit, OnChanges {\n\n  @Input()\n  graph;\n\n  @Input()\n  latestRi;\n\n  @Input()\n  priorWarning: string;\n\n  priorWarningIndicator;\n\n  public style: object;\n\n  constructor(public peraGraphService: PeraGraphService,\n              public warningService: WarningService,\n              public arrayViewService: ArrayViewService,\n              public ref: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n      // Subscribe to the chart title subject and invoke change detection when new value is pushed.\n      this.arrayViewService.chartTitleSubject$.subscribe(() => {\n          if (this.ref) {\n              this.ref.detectChanges();\n          }\n      });\n  }\n\n  ngOnChanges() {\n    this.updateBackgroundColor();\n  }\n\n  updateBackgroundColor() {\n    const warning = (this.graph) ? this.graph.activeWarning : null;\n    this.style = {\n      backgroundColor: this.peraGraphService.getBackgroundColorByWarningAndRi(warning, this.latestRi, this.graph.discharged)\n    };\n\n    this.priorWarningIndicator = this.warningService.getWarningClass(this.priorWarning);\n\n  }\n}\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-group-header',\n  templateUrl: './group-header.component.html',\n  styleUrls: ['./group-header.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GroupHeaderComponent implements OnInit {\n\n  @Input()\n  public numberOfPatients;\n\n  @Input()\n  public name;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges\n} from '@angular/core';\nimport {PeraGraphService} from '../service/pera-graph.service';\nimport {WarningService} from 'ng-common-library';\nimport {ArrayViewService} from '../../../service/array-view.service';\n\n@Component({\n  selector: 'phlib-pera-graph-header',\n  templateUrl: './pera-graph-header.component.html',\n  styleUrls: ['./pera-graph-header.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PeraGraphHeaderComponent implements OnInit, OnChanges {\n\n  @Input()\n  graph;\n\n  @Input()\n  latestRi;\n\n  public style: object;\n\n  priorWarningIndicator;\n  priorWarningIndicatorId;\n\n  @Input()\n  priorWarning: string;\n\n  constructor(public peraGraphService: PeraGraphService,\n              public warningService: WarningService,\n              public arrayViewService: ArrayViewService,\n              public ref: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n      // Subscribe to the chart title subject and invoke change detection when new value is pushed.\n      this.arrayViewService.chartTitleSubject$.subscribe(() => {\n          if (this.ref) {\n              this.ref.detectChanges();\n          }\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // If the latest RI or graph changed, update the header color\n    if (changes.latestRi || changes.graph) {\n      this.updateHeaderColor();\n    }\n    this.priorWarningIndicator = this.warningService.getWarningClass(this.priorWarning);\n    // This is so that QA can find the prior warning indicator and ensure that it has the correct color\n    this.priorWarningIndicatorId = 'priorWarningIndicator-' + this.graph.vnm;\n  }\n\n  updateHeaderColor() {\n    const warning = (this.graph) ? this.graph.activeWarning : null;\n    this.style = {\n      backgroundColor: this.peraGraphService.getBackgroundColorByWarningAndRi(warning, this.latestRi, this.graph.discharged),\n      width: '100%',\n    };\n  }\n\n}\n","import {Component, Input} from '@angular/core';\nimport {DateService} from 'ng-common-library';\nimport {PeraGraph} from 'ng-common-library/lib/model/PeraGraph';\n\n@Component({\n  selector: 'phlib-chart-tooltip',\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.css']\n})\nexport class TooltipComponent {\n\n  @Input()\n  public graph: PeraGraph;\n\n  constructor(private dateService: DateService) {\n  }\n\n  public getAdmitDate(): string {\n    if (this.graph && this.graph.timeZone && this.graph.admitDate) {\n      return this.dateService.getDateFormat(this.graph.timeZone, this.graph.admitDate, 'MM/DD/YY HH:mm z');\n    }\n    return '';\n  }\n\n  getDischargeDate(): string {\n    if (this.graph && this.graph.timeZone && this.graph.discharged && this.graph.dischargeDate) {\n      return this.dateService.getDateFormat(this.graph.timeZone, this.graph.dischargeDate, 'MM/DD/YY HH:mm z');\n    }\n    return '';\n  }\n\n  isDischarged(): boolean {\n    return (this.graph && this.graph.isDischarged);\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ArrayViewComponent} from './array-view.component';\nimport {GroupComponent} from './group/group.component';\nimport {PeraGraphComponent} from './group/pera-graph/pera-graph.component';\nimport {ChartComponent} from './group/pera-graph/chart/chart.component';\nimport {HighchartsChartModule} from 'highcharts-angular';\nimport {VirtualScrollModule} from 'od-virtualscroll';\nimport {ResizableModule} from 'angular-resizable-element';\nimport {PeraGraphTileComponent} from './group/pera-graph/pera-graph-tile/pera-graph-tile.component';\nimport {GroupHeaderComponent} from './group/group-header/group-header.component';\nimport {PeraGraphHeaderComponent} from './group/pera-graph/pera-graph-header/pera-graph-header.component';\nimport {TooltipComponent} from './group/pera-graph/tooltip/tooltip.component';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport {FilterQueryConfigService, FilterQueryRestService, FilterService} from 'ng-filters-library';\n\n\n@NgModule({\n  imports: [CommonModule,\n    HighchartsChartModule,\n    VirtualScrollModule,\n    ResizableModule,\n    NgbModule\n  ],\n  declarations: [\n    ArrayViewComponent,\n    GroupComponent,\n    GroupHeaderComponent,\n    PeraGraphComponent,\n    ChartComponent,\n    PeraGraphTileComponent,\n    TooltipComponent,\n    PeraGraphHeaderComponent],\n  exports: [ArrayViewComponent]\n})\nexport class ArrayViewModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ArrayViewModule,\n      providers: [FilterService, FilterQueryRestService, FilterQueryConfigService]\n    };\n  }\n}\n"]}