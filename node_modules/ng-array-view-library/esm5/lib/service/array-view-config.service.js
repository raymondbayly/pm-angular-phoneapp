/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as moment_ from 'moment';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
// The JavaScript compiler gives a weird "moment cannot be used as a namespace" type of error
// This is the workaround...
/** @type {?} */
var moment = moment_;
var ArrayViewConfigService = /** @class */ (function () {
    function ArrayViewConfigService() {
        this.configurationLoaded$ = new BehaviorSubject(false);
        this.currentTimestamp = null;
        this.toolTipInfoEndPoint = null;
    }
    /**
     * @return {?}
     */
    ArrayViewConfigService.prototype.getToolTipInfoEndPoint = /**
     * @return {?}
     */
    function () {
        if (!this.toolTipInfoEndPoint) {
            console.warn('Tooltip endpoint is not set!');
        }
        return this.toolTipInfoEndPoint;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    ArrayViewConfigService.prototype.setToolTipInfoEndPoint = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this.toolTipInfoEndPoint = val;
    };
    /**
     * @return {?}
     */
    ArrayViewConfigService.prototype.getCurrentTimestamp = /**
     * @return {?}
     */
    function () {
        return this.currentTimestamp;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ArrayViewConfigService.prototype.setCurrentTimestamp = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.currentTimestamp = value;
    };
    ArrayViewConfigService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ ArrayViewConfigService.ngInjectableDef = i0.defineInjectable({ factory: function ArrayViewConfigService_Factory() { return new ArrayViewConfigService(); }, token: ArrayViewConfigService, providedIn: "root" });
    return ArrayViewConfigService;
}());
export { ArrayViewConfigService };
if (false) {
    /** @type {?} */
    ArrayViewConfigService.prototype.configurationLoaded$;
    /**
     * @type {?}
     * @private
     */
    ArrayViewConfigService.prototype.currentTimestamp;
    /**
     * @type {?}
     * @private
     */
    ArrayViewConfigService.prototype.toolTipInfoEndPoint;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktdmlldy1jb25maWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWFycmF5LXZpZXctbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2FycmF5LXZpZXctY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxLQUFLLE9BQU8sTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFDLGVBQWUsRUFBVSxNQUFNLE1BQU0sQ0FBQzs7Ozs7SUFJeEMsTUFBTSxHQUFHLE9BQU87QUFFdEI7SUFBQTtRQUlXLHlCQUFvQixHQUE2QixJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUNwRixxQkFBZ0IsR0FBVyxJQUFJLENBQUM7UUFDaEMsd0JBQW1CLEdBQVcsSUFBSSxDQUFDO0tBb0I5Qzs7OztJQWxCVSx1REFBc0I7OztJQUE3QjtRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDM0IsT0FBTyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDcEMsQ0FBQzs7Ozs7SUFFTSx1REFBc0I7Ozs7SUFBN0IsVUFBOEIsR0FBVztRQUNyQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsR0FBRyxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFTSxvREFBbUI7OztJQUExQjtRQUNJLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRU0sb0RBQW1COzs7O0lBQTFCLFVBQTJCLEtBQWE7UUFDcEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztJQUNsQyxDQUFDOztnQkF6QkosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7O2lDQVZEO0NBa0NDLEFBMUJELElBMEJDO1NBdkJZLHNCQUFzQjs7O0lBQy9CLHNEQUE0Rjs7Ozs7SUFDNUYsa0RBQXdDOzs7OztJQUN4QyxxREFBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgbW9tZW50XyBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuXG4vLyBUaGUgSmF2YVNjcmlwdCBjb21waWxlciBnaXZlcyBhIHdlaXJkIFwibW9tZW50IGNhbm5vdCBiZSB1c2VkIGFzIGEgbmFtZXNwYWNlXCIgdHlwZSBvZiBlcnJvclxuLy8gVGhpcyBpcyB0aGUgd29ya2Fyb3VuZC4uLlxuY29uc3QgbW9tZW50ID0gbW9tZW50XztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBcnJheVZpZXdDb25maWdTZXJ2aWNlIHtcbiAgICBwdWJsaWMgY29uZmlndXJhdGlvbkxvYWRlZCQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIHByaXZhdGUgY3VycmVudFRpbWVzdGFtcDogbnVtYmVyID0gbnVsbDtcbiAgICBwcml2YXRlIHRvb2xUaXBJbmZvRW5kUG9pbnQ6IHN0cmluZyA9IG51bGw7XG5cbiAgICBwdWJsaWMgZ2V0VG9vbFRpcEluZm9FbmRQb2ludCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRvb2xUaXBJbmZvRW5kUG9pbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignVG9vbHRpcCBlbmRwb2ludCBpcyBub3Qgc2V0IScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xUaXBJbmZvRW5kUG9pbnQ7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFRvb2xUaXBJbmZvRW5kUG9pbnQodmFsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy50b29sVGlwSW5mb0VuZFBvaW50ID0gdmFsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDdXJyZW50VGltZXN0YW1wKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRUaW1lc3RhbXA7XG4gICAgfVxuXG4gICAgcHVibGljIHNldEN1cnJlbnRUaW1lc3RhbXAodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lc3RhbXAgPSB2YWx1ZTtcbiAgICB9XG59XG4iXX0=