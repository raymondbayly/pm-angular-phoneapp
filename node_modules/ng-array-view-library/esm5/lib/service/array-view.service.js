/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import * as moment_ from 'moment-timezone';
import { ArrayViewConfigService } from './array-view-config.service';
import { DateService, FlowsheetsApiService, PeragraphApiService } from 'ng-common-library';
import { FilterQueryRestService, FilterService, GroupService, SortService } from 'ng-filters-library';
import { BehaviorSubject, forkJoin, of, Subject } from 'rxjs';
import { ChartTitleChoices } from './chartTitleEnum';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./array-view-config.service";
import * as i3 from "ng-filters-library";
import * as i4 from "ng-common-library";
// The JavaScript compiler gives a weird "moment cannot be used as a namespace" type of error
// This is the workaround...
/** @type {?} */
var moment = moment_;
var ArrayViewService = /** @class */ (function () {
    function ArrayViewService(http, configService, filterService, filterQueryRestService, flowsheetsApiService, peragraphApiService, sortService, groupService, dateService) {
        var _this = this;
        this.http = http;
        this.configService = configService;
        this.filterService = filterService;
        this.filterQueryRestService = filterQueryRestService;
        this.flowsheetsApiService = flowsheetsApiService;
        this.peragraphApiService = peragraphApiService;
        this.sortService = sortService;
        this.groupService = groupService;
        this.dateService = dateService;
        // The possible chart title selections
        this.titleChoices = [
            {
                description: ChartTitleChoices.VNM,
                returnFunc: function (peraGraph) {
                    return peraGraph.vnm;
                }
            },
            {
                description: ChartTitleChoices.ADMIT_DATE,
                returnFunc: function (peraGraph) {
                    if (peraGraph && peraGraph.timeZone && peraGraph.admitDate) {
                        return _this.dateService.getDateFormat(peraGraph.timeZone, peraGraph.admitDate, 'MM/DD/YY HH:mm z');
                    }
                    return '';
                }
            },
            {
                description: ChartTitleChoices.MRN,
                returnFunc: function (peraGraph) {
                    return peraGraph.patient.medicalRecordNumber;
                }
            },
            {
                description: ChartTitleChoices.PATIENT_NAME,
                returnFunc: function (peraGraph) {
                    if (peraGraph.vipIndicator) {
                        return peraGraph.patient.aliasLastName + ', ' + peraGraph.patient.aliasFirstName;
                    }
                    else {
                        return peraGraph.displayName;
                    }
                }
            },
            {
                description: ChartTitleChoices.LOCATION,
                returnFunc: function (peraGraph) {
                    return peraGraph.unitId + '-' + peraGraph.room + '-' + peraGraph.bed;
                }
            },
            {
                description: ChartTitleChoices.ANONYMOUS,
                returnFunc: function (peraGraph) {
                    return 'Chart ' + peraGraph.anonymous;
                }
            }
        ];
        // Current chart title selection - defaults to Patient Name
        this.selectedChartTitle = {
            description: ChartTitleChoices.PATIENT_NAME,
            returnFunc: function (peraGraph) {
                return peraGraph.displayName;
            }
        };
        // Subject for the title selection
        this.chartTitleSubject$ = new BehaviorSubject(this.selectedChartTitle);
        this.maxGraphCountPerGroup = 50;
        this.maxGraphsInDom = 150;
        this.currentTimestamp = null;
        this.displayTiles = false;
        this.peraGraphDefaultHeight = 145;
        this.peraGraphDefaultWidth = 185;
        this.peraGraphTileDefault = 75;
        this.peraGraphHeight = this.peraGraphDefaultHeight;
        this.peraGraphWidth = this.peraGraphDefaultWidth;
        this.startedRefresh$ = new Subject();
        this.completedRefresh$ = new Subject();
        this.tokenRefresh$ = new Subject();
    }
    /**
     * runs the peragraph through all the filters and returns true if none of them return false
     * @param peraGraph - peragraph to evaluate
     * @param filters - object of filter functions
     */
    /**
     * runs the peragraph through all the filters and returns true if none of them return false
     * @param {?} peraGraph - peragraph to evaluate
     * @param {?} filters - object of filter functions
     * @return {?}
     */
    ArrayViewService.prototype.filterPeragraph = /**
     * runs the peragraph through all the filters and returns true if none of them return false
     * @param {?} peraGraph - peragraph to evaluate
     * @param {?} filters - object of filter functions
     * @return {?}
     */
    function (peraGraph, filters) {
        // return true if filter object has no properties
        if ((Object.keys(filters).length === 0 && filters.constructor === Object)) {
            return true;
        }
        else {
            // traverse filter object and test peragraph against each filter until one returns false
            for (var filter in filters) {
                if (filters.hasOwnProperty(filter)) {
                    if (!(filters[filter](peraGraph))) {
                        return false;
                    }
                }
            }
        }
        return true;
    };
    /**
     * limit the number of groups to load open on application of filtering/sorting/grouping based on the number of graphs in the dom
     * @param peraGraphs - graphs to make count based off of
     */
    /**
     * limit the number of groups to load open on application of filtering/sorting/grouping based on the number of graphs in the dom
     * @param {?} peraGraphs - graphs to make count based off of
     * @return {?}
     */
    ArrayViewService.prototype.calculateNumberOfGroupsToShow = /**
     * limit the number of groups to load open on application of filtering/sorting/grouping based on the number of graphs in the dom
     * @param {?} peraGraphs - graphs to make count based off of
     * @return {?}
     */
    function (peraGraphs) {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var groupsToShow = 0;
        /** @type {?} */
        var graphCount = 0;
        /** @type {?} */
        var expanded = true;
        /** @type {?} */
        var numOfGroupsWithGraphs = 0;
        try {
            // for each group, count the number of graphs in that group, capped at the maxGraphsPerGroup variable
            // once the graphs exceed the maxGraphs in dom value return the number of groupstoShow to be applied to groups
            for (var _c = tslib_1.__values(this.groupService.groupSubject$.value), _d = _c.next(); !_d.done; _d = _c.next()) {
                var group = _d.value;
                /** @type {?} */
                var groupGraphCount = 0;
                // helper variable for tracking how many groups have graphs
                /** @type {?} */
                var groupIsFresh = true;
                try {
                    for (var peraGraphs_1 = tslib_1.__values(peraGraphs), peraGraphs_1_1 = peraGraphs_1.next(); !peraGraphs_1_1.done; peraGraphs_1_1 = peraGraphs_1.next()) {
                        var peraGraph = peraGraphs_1_1.value;
                        if (group.laneFunction(peraGraph)) {
                            if (groupIsFresh) {
                                numOfGroupsWithGraphs++;
                                groupIsFresh = false;
                            }
                            groupGraphCount++;
                            if (groupGraphCount >= this.maxGraphCountPerGroup) {
                                break;
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (peraGraphs_1_1 && !peraGraphs_1_1.done && (_b = peraGraphs_1.return)) _b.call(peraGraphs_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                graphCount += groupGraphCount;
                groupsToShow++;
                if (graphCount > this.maxGraphsInDom) {
                    groupsToShow--;
                    break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return { groupsToShow: groupsToShow, expanded: numOfGroupsWithGraphs <= 1 };
    };
    /**
     * if sorting by RI Score...get RI Scores from server and append to peraGraphs
     * @param peraGraphs - peraGraphs to have Ris attached to
     */
    /**
     * if sorting by RI Score...get RI Scores from server and append to peraGraphs
     * @param {?} peraGraphs - peraGraphs to have Ris attached to
     * @return {?}
     */
    ArrayViewService.prototype.addRIToPeraGraphs = /**
     * if sorting by RI Score...get RI Scores from server and append to peraGraphs
     * @param {?} peraGraphs - peraGraphs to have Ris attached to
     * @return {?}
     */
    function (peraGraphs) {
        if (this.sortService.activeSortName === 'latestRi') {
            return this.flowsheetsApiService.getAllRiScores().pipe(map(function (riScores) {
                var e_3, _a;
                /** @type {?} */
                var riMap = riScores.body;
                try {
                    for (var peraGraphs_2 = tslib_1.__values(peraGraphs), peraGraphs_2_1 = peraGraphs_2.next(); !peraGraphs_2_1.done; peraGraphs_2_1 = peraGraphs_2.next()) {
                        var peraGraph = peraGraphs_2_1.value;
                        if (riScores.body[peraGraph.visitId]) {
                            peraGraph.latestRi = riMap[peraGraph.visitId];
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (peraGraphs_2_1 && !peraGraphs_2_1.done && (_a = peraGraphs_2.return)) _a.call(peraGraphs_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                return peraGraphs;
            }));
        }
        else {
            return of(peraGraphs);
        }
    };
    /**
     * sorts peraGraphs based on function passed in through sort parameter then subsorts if needed based on the default sort method
     * if no function is provided, the default sort function is used
     * @param peraGraphA - peraGraph to be sorted
     * @param peraGraphB - peraGraph to be sorted
     * @param sortFunction - function to sort peraGraphs
     */
    /**
     * sorts peraGraphs based on function passed in through sort parameter then subsorts if needed based on the default sort method
     * if no function is provided, the default sort function is used
     * @param {?} peraGraphA - peraGraph to be sorted
     * @param {?} peraGraphB - peraGraph to be sorted
     * @param {?=} sortFunction - function to sort peraGraphs
     * @return {?}
     */
    ArrayViewService.prototype.sortGraphs = /**
     * sorts peraGraphs based on function passed in through sort parameter then subsorts if needed based on the default sort method
     * if no function is provided, the default sort function is used
     * @param {?} peraGraphA - peraGraph to be sorted
     * @param {?} peraGraphB - peraGraph to be sorted
     * @param {?=} sortFunction - function to sort peraGraphs
     * @return {?}
     */
    function (peraGraphA, peraGraphB, sortFunction) {
        // default sort method for peragraphs
        /** @type {?} */
        var defaultSort = function (peraGraphA, peraGraphB) {
            /** @type {?} */
            var comparison = 0;
            if (peraGraphA.displayName > peraGraphB.displayName) {
                comparison = 1;
            }
            else if (peraGraphA.displayName < peraGraphB.displayName) {
                comparison = -1;
            }
            return comparison;
        };
        if (this.sortService.nonStandardSortFunctionActive && this.sortService.nonStandardSortFunction) {
            sortFunction = this.sortService.nonStandardSortFunction;
        }
        // if a function is passed in -> use it. if not use the default sort
        if (!sortFunction) {
            // if no function is provided, use default sort
            return defaultSort(peraGraphA, peraGraphB);
        }
        /** @type {?} */
        var comparison;
        comparison = sortFunction(peraGraphA, peraGraphB);
        if (comparison == 0) {
            comparison = defaultSort(peraGraphA, peraGraphB);
        }
        return comparison;
    };
    /**
     * If a timestamp is provided by config use that, otherwise update the current timestamp every 5 seconds
     */
    /**
     * If a timestamp is provided by config use that, otherwise update the current timestamp every 5 seconds
     * @return {?}
     */
    ArrayViewService.prototype.calcCurrentTimestamp = /**
     * If a timestamp is provided by config use that, otherwise update the current timestamp every 5 seconds
     * @return {?}
     */
    function () {
        if (this.configService.getCurrentTimestamp()) {
            this.currentTimestamp = this.configService.getCurrentTimestamp();
        }
    };
    /**
     * returns the timestamp sent by the server if it isn't null
     * otherwise calls Date.now() to get an up to date timestamp to
     * return
     */
    /**
     * returns the timestamp sent by the server if it isn't null
     * otherwise calls Date.now() to get an up to date timestamp to
     * return
     * @return {?}
     */
    ArrayViewService.prototype.getCurrentTimestamp = /**
     * returns the timestamp sent by the server if it isn't null
     * otherwise calls Date.now() to get an up to date timestamp to
     * return
     * @return {?}
     */
    function () {
        /*
            The currentTimestamp property is only set if the server sends a specific timestamp
            it wants us to use. If that is not provided, we call Date.now() to get the up to date
            timestamp every time this function is invoked
        */
        return this.currentTimestamp ? this.currentTimestamp : Date.now();
    };
    /**
     * @return {?}
     */
    ArrayViewService.prototype.isDisplayingTiles = /**
     * @return {?}
     */
    function () {
        return this.displayTiles;
    };
    /**
     * @return {?}
     */
    ArrayViewService.prototype.toggleTileView = /**
     * @return {?}
     */
    function () {
        // Toggle whether or not we display the tile view and set the width/height accordingly
        this.displayTiles = !this.displayTiles;
        this.peraGraphHeight = (this.displayTiles) ? this.peraGraphTileDefault : this.peraGraphDefaultHeight;
        this.peraGraphWidth = (this.displayTiles) ? this.peraGraphTileDefault : this.peraGraphDefaultWidth;
        this.refreshViewPort();
    };
    // Force a refresh of the viewport by toggling the data
    // Force a refresh of the viewport by toggling the data
    /**
     * @return {?}
     */
    ArrayViewService.prototype.refreshViewPort = 
    // Force a refresh of the viewport by toggling the data
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var previousPeraGraphs = this.peragraphApiService.getPeraGraphSubject().value;
        this.peragraphApiService.getPeraGraphSubject().next([]);
        setTimeout(function () {
            _this.peragraphApiService.getPeraGraphSubject().next(previousPeraGraphs);
        }, 1);
    };
    /**
     * Called on manual refresh or application of filters - refreshes graphs and FSCs
     * and fires completedRefresh$ Subject upon completion
     */
    /**
     * Called on manual refresh or application of filters - refreshes graphs and FSCs
     * and fires completedRefresh$ Subject upon completion
     * @param {?=} getFilterQuery
     * @return {?}
     */
    ArrayViewService.prototype.refreshGraphs = /**
     * Called on manual refresh or application of filters - refreshes graphs and FSCs
     * and fires completedRefresh$ Subject upon completion
     * @param {?=} getFilterQuery
     * @return {?}
     */
    function (getFilterQuery) {
        var _this = this;
        this.startedRefresh$.next();
        if (getFilterQuery) {
            // we use fork join here to combine the REST calls for server side filtering and getting new PeraGraphs
            // quick aside on fork join - all it does is wait for both observables to COMPLETE and then feed you both results
            // before getting to the fork join the vnms from the server side filter query are stored in the filter service
            //      -> this is done to ensure that once the forkjoin completes, client side filtering can commence
            // after filtering the graphs, they are passed to the array view per usual
            forkJoin(this.filterQueryRestService.getFilteredVisits(this.filterService.getActiveServerFilterCriteria()), this.peragraphApiService.getAllPeragraphs()).subscribe(function (graphsAndFilteredVisits) {
                _this.peragraphApiService.getPeraGraphSubject().next(graphsAndFilteredVisits[1]);
                _this.filterService.serverFilteredVisits = graphsAndFilteredVisits[0];
                _this.filterService.filterSubject$.next(_this.filterService.activeFilters);
                _this.completedRefresh$.next();
            });
        }
        else {
            // if we don't need to do server side filtering -> filter in the client immediately
            this.peragraphApiService.getAllPeragraphs().subscribe(function (graphs) {
                _this.peragraphApiService.getPeraGraphSubject().next(graphs);
            });
        }
        this.flowsheetsApiService.getAllPeraGraphFlowSheets().subscribe(function (flowsheets) { return _this.flowsheetsApiService.getFlowSheetSubject().next(flowsheets.body); });
    };
    ArrayViewService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ArrayViewService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: ArrayViewConfigService },
        { type: FilterService },
        { type: FilterQueryRestService },
        { type: FlowsheetsApiService },
        { type: PeragraphApiService },
        { type: SortService },
        { type: GroupService },
        { type: DateService }
    ]; };
    /** @nocollapse */ ArrayViewService.ngInjectableDef = i0.defineInjectable({ factory: function ArrayViewService_Factory() { return new ArrayViewService(i0.inject(i1.HttpClient), i0.inject(i2.ArrayViewConfigService), i0.inject(i3.FilterService), i0.inject(i3.FilterQueryRestService), i0.inject(i4.FlowsheetsApiService), i0.inject(i4.PeragraphApiService), i0.inject(i3.SortService), i0.inject(i3.GroupService), i0.inject(i4.DateService)); }, token: ArrayViewService, providedIn: "root" });
    return ArrayViewService;
}());
export { ArrayViewService };
if (false) {
    /** @type {?} */
    ArrayViewService.prototype.titleChoices;
    /** @type {?} */
    ArrayViewService.prototype.selectedChartTitle;
    /** @type {?} */
    ArrayViewService.prototype.chartTitleSubject$;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.maxGraphCountPerGroup;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.maxGraphsInDom;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.currentTimestamp;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.displayTiles;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.peraGraphDefaultHeight;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.peraGraphDefaultWidth;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.peraGraphTileDefault;
    /** @type {?} */
    ArrayViewService.prototype.peraGraphHeight;
    /** @type {?} */
    ArrayViewService.prototype.peraGraphWidth;
    /** @type {?} */
    ArrayViewService.prototype.startedRefresh$;
    /** @type {?} */
    ArrayViewService.prototype.completedRefresh$;
    /** @type {?} */
    ArrayViewService.prototype.tokenRefresh$;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.configService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.filterQueryRestService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.flowsheetsApiService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.peragraphApiService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.sortService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.groupService;
    /**
     * @type {?}
     * @private
     */
    ArrayViewService.prototype.dateService;
}
//# sourceMappingURL=data:application/json;base64,