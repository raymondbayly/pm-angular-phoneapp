/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, Renderer2 } from '@angular/core';
import { ArrayViewService } from '../service/array-view.service';
import { BehaviorSubject } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { PeraGraphService } from './pera-graph/service/pera-graph.service';
import { PeragraphApiService } from 'ng-common-library';
import { FilterService } from "ng-filters-library";
var GroupComponent = /** @class */ (function () {
    function GroupComponent(arrayViewService, filterService, peraGraphService, peragraphApiService, ref, elementRef, renderer) {
        var _this = this;
        this.arrayViewService = arrayViewService;
        this.filterService = filterService;
        this.peraGraphService = peraGraphService;
        this.peragraphApiService = peragraphApiService;
        this.ref = ref;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.showPeraGraphs = false;
        this.expanded = false;
        this.filterFunction = null;
        // Default number of rows - TODO possibly make this configurable, or remember the user's last selection and save it
        this.nonExpandedRows = 3;
        this.expandedRows = 6;
        this.currentNumberOfRowsDisplayed = this.nonExpandedRows;
        this.options$ = new BehaviorSubject(null);
        // Differentiate between a single click and a double click
        this.clickTimer = 0;
        this.preventSingleClick = false;
        this.style = { maxHeight: this.viewContainerMaxHeight };
        this.hideGroup = false;
        /**
         * Function to determine equality, given two indicies in the array (optional, default: (p,c) => p === c))
         *
         * @param prevDataIndex
         * @param curDataIndex
         * @return
         */
        this.equals = function (prevDataIndex, curDataIndex) {
            /** @type {?} */
            var curPeraGraph = _this.currentPeraGraphs[curDataIndex];
            /** @type {?} */
            var previousPeraGraph = (_this.previousPeraGraphs) ? _this.previousPeraGraphs[prevDataIndex] : null;
            /*
             Most browsers maintain the order of the fields so this should work in most cases and when it fails, it'll just return false so anything
             else is an optimization
             */
            return previousPeraGraph != null && curPeraGraph != null && JSON.stringify(previousPeraGraph) === JSON.stringify(curPeraGraph);
        };
    }
    // TODO break pieces out into a service as appropriate
    // TODO break pieces out into a service as appropriate
    /**
     * @return {?}
     */
    GroupComponent.prototype.ngOnInit = 
    // TODO break pieces out into a service as appropriate
    /**
     * @return {?}
     */
    function () {
        // Set the group information
        this.groupName = this.group.laneTitle;
        this.filterFunction = this.group.laneFunction;
        this.updatePeraGraphs();
        if (this.expanded) {
            this.currentNumberOfRowsDisplayed = this.expandedRows;
        }
        else {
            this.currentNumberOfRowsDisplayed = this.nonExpandedRows;
        }
    };
    /**
     * @return {?}
     */
    GroupComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.updateNumberOfItemsInViewport();
        // Identify the ideal width, and set both it and the height through ng-style on the viewport container
        this.updateViewPortPerCurrentRows();
        this.updatePeraGraphs();
        this.maintainGroupLength();
    };
    /**
     * @return {?}
     */
    GroupComponent.prototype.hideOrDisplayGroup = /**
     * @return {?}
     */
    function () {
        if (this.elementRef) {
            if (this.groupLength === 0) {
                this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'none');
            }
            else {
                this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'block');
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    GroupComponent.prototype.updatePeraGraphs = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.peraGraphs$ = this.filteredPeraGraphs$.pipe(map(function (peraGraphs) { return peraGraphs.filter(function (peraGraph) { return _this.matchesGroup(peraGraph); }); }), tap(function (peraGraphs) {
            // Used to determine equality for virtual scrolling
            _this.previousPeraGraphs = _this.currentPeraGraphs;
            _this.currentPeraGraphs = peraGraphs;
            // Specifies the number of graphs in a group
            _this.groupLength = peraGraphs.length;
            _this.hideOrDisplayGroup();
        }));
    };
    /**
     * When we're not displaying PeraGraphs, we don't pass the observable to the virtual scroll which typically populates the group length.
     * This function will conditionally get the group length through other means.
     */
    /**
     * When we're not displaying PeraGraphs, we don't pass the observable to the virtual scroll which typically populates the group length.
     * This function will conditionally get the group length through other means.
     * @return {?}
     */
    GroupComponent.prototype.maintainGroupLength = /**
     * When we're not displaying PeraGraphs, we don't pass the observable to the virtual scroll which typically populates the group length.
     * This function will conditionally get the group length through other means.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.showPeraGraphs) {
            // If we're not showing peraGraphs, subscribe separately so that we can get the group length
            this.peraGraphs_length$ = this.filteredPeraGraphs$.pipe(map(function (peraGraphs) {
                return peraGraphs.filter(function (peraGraph) { return _this.matchesGroup(peraGraph); });
            })).subscribe(function (peraGraphs) {
                _this.groupLength = peraGraphs.length;
                _this.hideOrDisplayGroup();
                if (_this.ref) {
                    _this.ref.detectChanges();
                }
            });
        }
        else if (this.peraGraphs_length$ && !this.peraGraphs_length$.closed) {
            // If we're showing peraGraphs, there's no need for this subscription
            this.peraGraphs_length$.unsubscribe();
        }
    };
    /**
     * This function determines which graphs belong to this group
     *
     * @param peraGraph
     * @returns
     */
    /**
     * This function determines which graphs belong to this group
     *
     * @param {?} peraGraph
     * @return {?}
     */
    GroupComponent.prototype.matchesGroup = /**
     * This function determines which graphs belong to this group
     *
     * @param {?} peraGraph
     * @return {?}
     */
    function (peraGraph) {
        if (this.filterFunction) {
            return this.filterFunction(peraGraph);
        }
        return true;
    };
    /**
     * Called when the viewport is being resized manually
     *
     * @param event
     */
    /**
     * Called when the viewport is being resized manually
     *
     * @param {?} event
     * @return {?}
     */
    GroupComponent.prototype.onResizing = /**
     * Called when the viewport is being resized manually
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // Set the height according to the event
        this.viewContainerMaxHeight = event.rectangle.height + 'px';
        // Set the number of rows that should be displayed according to the new height
        this.currentNumberOfRowsDisplayed = Math.ceil(event.rectangle.height / this.peraGraphHeight);
        this.updateViewPortPerCurrentRows();
    };
    /**
     * Called when the header is clicked
     */
    /**
     * Called when the header is clicked
     * @return {?}
     */
    GroupComponent.prototype.click = /**
     * Called when the header is clicked
     * @return {?}
     */
    function () {
        var _this = this;
        this.preventSingleClick = false;
        // @ts-ignore
        this.clickTimer = setTimeout(function () {
            if (!_this.preventSingleClick) {
                _this.toggleShow();
                if (_this.ref) {
                    _this.ref.detectChanges();
                }
            }
        }, 200);
    };
    /**
     * Called when the header is double clicked
     */
    /**
     * Called when the header is double clicked
     * @return {?}
     */
    GroupComponent.prototype.doubleClick = /**
     * Called when the header is double clicked
     * @return {?}
     */
    function () {
        clearTimeout(this.clickTimer);
        this.preventSingleClick = true;
        this.toggleExpand();
    };
    /**
     * Updates the height/width of the viewport container as well as the height/width/number of items in the viewport
     */
    /**
     * Updates the height/width of the viewport container as well as the height/width/number of items in the viewport
     * @return {?}
     */
    GroupComponent.prototype.updateViewPortPerCurrentRows = /**
     * Updates the height/width of the viewport container as well as the height/width/number of items in the viewport
     * @return {?}
     */
    function () {
        if (this.expanded) {
            this.currentNumberOfRowsDisplayed = this.expandedRows;
        }
        else {
            this.currentNumberOfRowsDisplayed = this.nonExpandedRows;
        }
        // Set the height of the container from the number of rows that should be displayed
        this.viewContainerMaxHeight = this.getViewPortHeightFromRowsAsString(this.currentNumberOfRowsDisplayed);
        this.setStyle(this.viewContainerMaxHeight);
        // Update the options so that the correct number of rows are displayed in the viewport
        this.updateNumberOfItemsInViewport();
    };
    /**
     * Toggles whether or not any PeraGraphs are shown in the group
     */
    /**
     * Toggles whether or not any PeraGraphs are shown in the group
     * @return {?}
     */
    GroupComponent.prototype.toggleShow = /**
     * Toggles whether or not any PeraGraphs are shown in the group
     * @return {?}
     */
    function () {
        // Switch from removing the element from the DOM via ngIf to using the hidden attribute once it's rendered once
        this.hideGroup = (this.showPeraGraphs) ? !this.hideGroup : false;
        this.arrayViewService.tokenRefresh$.next();
        // If we have never displayed PeraGraphs in this group
        if (!this.showPeraGraphs) {
            // Start rendering graphs for the first time
            this.startRenderingPeraGraphs();
        }
    };
    /**
     * This function toggles expansion of the viewport height
     */
    /**
     * This function toggles expansion of the viewport height
     * @return {?}
     */
    GroupComponent.prototype.toggleExpand = /**
     * This function toggles expansion of the viewport height
     * @return {?}
     */
    function () {
        this.arrayViewService.tokenRefresh$.next();
        this.expanded = !this.expanded;
        // Update the number of rows being displayed according to the current expanded status
        this.currentNumberOfRowsDisplayed = (this.expanded) ? this.expandedRows : this.nonExpandedRows;
        // Update the viewport
        this.updateViewPortPerCurrentRows();
        // If we're not showing graphs, show them
        if (!this.showPeraGraphs || this.hideGroup) {
            this.hideGroup = false;
            // If we have never displayed peragraphs in this group
            if (!this.showPeraGraphs) {
                // Start rendering graphs for the first time
                this.startRenderingPeraGraphs();
            }
        }
    };
    /**
     * If ngIf is currently evaluating to false, trigger a change and update the view container
     */
    /**
     * If ngIf is currently evaluating to false, trigger a change and update the view container
     * @return {?}
     */
    GroupComponent.prototype.startRenderingPeraGraphs = /**
     * If ngIf is currently evaluating to false, trigger a change and update the view container
     * @return {?}
     */
    function () {
        this.showPeraGraphs = true;
        this.updateViewPortPerCurrentRows();
        if (this.ref) {
            this.ref.detectChanges();
        }
    };
    /**
     * Updates item size and the number of rows being rendered
     */
    /**
     * Updates item size and the number of rows being rendered
     * @return {?}
     */
    GroupComponent.prototype.updateNumberOfItemsInViewport = /**
     * Updates item size and the number of rows being rendered
     * @return {?}
     */
    function () {
        this.options$.next({
            itemHeight: this.peraGraphHeight,
            itemWidth: this.peraGraphWidth,
            numAdditionalRows: this.getNumberOfRowsToRender()
        });
    };
    /**
     * Applies a buffer to the number of rows being displayed to improve scrolling performance
     *
     * @returns
     */
    /**
     * Applies a buffer to the number of rows being displayed to improve scrolling performance
     *
     * @return {?}
     */
    GroupComponent.prototype.getNumberOfRowsToRender = /**
     * Applies a buffer to the number of rows being displayed to improve scrolling performance
     *
     * @return {?}
     */
    function () {
        /** @type {?} */
        var additionalRowsToRender = (this.arrayViewService.isDisplayingTiles()) ? 100 : 2;
        return this.currentNumberOfRowsDisplayed + additionalRowsToRender;
    };
    /**
     * Set the height and width of the viewport container
     *
     * @param height
     */
    /**
     * Set the height and width of the viewport container
     *
     * @param {?} height
     * @return {?}
     */
    GroupComponent.prototype.setStyle = /**
     * Set the height and width of the viewport container
     *
     * @param {?} height
     * @return {?}
     */
    function (height) {
        this.style = {
            maxHeight: height,
            width: this.scrollContainerWidth
        };
    };
    /**
     * Returns the ideal viewport height for the number of rows passed to the function
     *
     * @param rows
     * @returns
     */
    /**
     * Returns the ideal viewport height for the number of rows passed to the function
     *
     * @param {?} rows
     * @return {?}
     */
    GroupComponent.prototype.getViewPortHeightFromRowsAsString = /**
     * Returns the ideal viewport height for the number of rows passed to the function
     *
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        return this.peraGraphHeight * rows + 'px';
    };
    /**
     * @return {?}
     */
    GroupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.ref) {
            this.ref.detach();
            this.ref = null;
        }
        this.filterFunction = null;
    };
    GroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'phlib-group',
                    template: "<div class=\"clickable-header\">\n  <app-group-header\n    (click)=\"click()\"\n    (dblclick)=\"doubleClick()\"\n    [name]=\"groupName\"\n    [numberOfPatients]=\"groupLength\"\n    *ngIf=\"groupName\"\n  ></app-group-header>\n</div>\n\n<od-virtualscroll class=\"ph-group\" *ngIf=\"showPeraGraphs\" [ngStyle]=\"style\"\n                  mwlResizable [resizeEdges]=\"{bottom: true}\"\n                  (resizing)=\"onResizing($event)\" [resizeCursorPrecision]=\"8\" [vsData]=\"peraGraphs$\"\n                  [vsOptions]=\"options$\" [vsEqualsFunc]=\"equals\" [hidden]=\"hideGroup\">\n  <ng-template let-peraGraph>\n    <phlib-pera-graph\n      [graph]=\"peraGraph\"\n      [peraGraphHeight]=\"peraGraphHeight\"\n      [peraGraphWidth]=\"peraGraphWidth\">\n      >\n    </phlib-pera-graph>\n  </ng-template>\n</od-virtualscroll>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["mwlResizable{box-sizing:border-box}.ph-group{margin-right:5vw;margin-left:5vw;overflow:auto;display:flex;justify-content:space-between}/deep/ .od-scroll-container{margin:0}.clickable-header{margin-right:8vw}"]
                }] }
    ];
    /** @nocollapse */
    GroupComponent.ctorParameters = function () { return [
        { type: ArrayViewService },
        { type: FilterService },
        { type: PeraGraphService },
        { type: PeragraphApiService },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    GroupComponent.propDecorators = {
        showPeraGraphs: [{ type: Input }],
        expanded: [{ type: Input }],
        group: [{ type: Input }],
        peraGraphHeight: [{ type: Input }],
        peraGraphWidth: [{ type: Input }],
        scrollContainerWidth: [{ type: Input }],
        filteredPeraGraphs$: [{ type: Input }]
    };
    return GroupComponent;
}());
export { GroupComponent };
if (false) {
    /** @type {?} */
    GroupComponent.prototype.showPeraGraphs;
    /** @type {?} */
    GroupComponent.prototype.expanded;
    /** @type {?} */
    GroupComponent.prototype.group;
    /** @type {?} */
    GroupComponent.prototype.peraGraphHeight;
    /** @type {?} */
    GroupComponent.prototype.peraGraphWidth;
    /** @type {?} */
    GroupComponent.prototype.scrollContainerWidth;
    /** @type {?} */
    GroupComponent.prototype.filteredPeraGraphs$;
    /** @type {?} */
    GroupComponent.prototype.groupName;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.filterFunction;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.nonExpandedRows;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.expandedRows;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.currentNumberOfRowsDisplayed;
    /** @type {?} */
    GroupComponent.prototype.peraGraphs$;
    /** @type {?} */
    GroupComponent.prototype.peraGraphs_length$;
    /** @type {?} */
    GroupComponent.prototype.options$;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.previousPeraGraphs;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.currentPeraGraphs;
    /** @type {?} */
    GroupComponent.prototype.groupLength;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.clickTimer;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.preventSingleClick;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.viewContainerMaxHeight;
    /** @type {?} */
    GroupComponent.prototype.style;
    /** @type {?} */
    GroupComponent.prototype.hideGroup;
    /**
     * Function to determine equality, given two indicies in the array (optional, default: (p,c) => p === c))
     *
     * \@param prevDataIndex
     * \@param curDataIndex
     * \@return
     * @type {?}
     */
    GroupComponent.prototype.equals;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.arrayViewService;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.peraGraphService;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.peragraphApiService;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.ref;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    GroupComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,