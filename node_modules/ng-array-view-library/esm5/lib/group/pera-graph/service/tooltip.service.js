/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ArrayViewService } from '../../../service/array-view.service';
import { first } from 'rxjs/operators';
import { PeraGraphService } from './pera-graph.service';
import { ArrayViewConfigService } from '../../../service/array-view-config.service';
import { LoginService } from 'ng-login-library';
import { TokenApiService } from 'ng-common-library';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./pera-graph.service";
import * as i2 from "../../../service/array-view.service";
import * as i3 from "@angular/common/http";
import * as i4 from "ng-login-library";
import * as i5 from "ng-common-library";
import * as i6 from "../../../service/array-view-config.service";
var TooltipService = /** @class */ (function () {
    function TooltipService(graphService, arrayViewService, http, loginService, tokenApiService, arrayViewConfigService) {
        this.graphService = graphService;
        this.arrayViewService = arrayViewService;
        this.http = http;
        this.loginService = loginService;
        this.tokenApiService = tokenApiService;
        this.arrayViewConfigService = arrayViewConfigService;
        this.toolTipInfoUpdated$ = new Subject();
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    TooltipService.prototype.updateToolTipInfo = /**
     * @param {?} graph
     * @return {?}
     */
    function (graph) {
        var _this = this;
        this.tokenApiService.refreshToken(this.loginService.getCurrentUser());
        // Get the current tooltip info from the server.
        this.http.get(this.arrayViewConfigService.getToolTipInfoEndPoint() + '/pid/' + graph.patient.pid + '/visit/' + graph.visitId).pipe(first()).subscribe(function (toolTipInfo) {
            // Ensure that the user hasn't moved onto a new graph with a different during the time that the call was made to the server
            if (graph.visitId === toolTipInfo.visitId) {
                /** @type {?} */
                var numberOfOtherVisitsWithValidRi = toolTipInfo.numberOfOtherVisitsWithValidRi;
                // The query will return a -1 value if the current and only visit has no valid RI scores.
                graph.numberVisitsWithValidRI = (numberOfOtherVisitsWithValidRi > 0) ? numberOfOtherVisitsWithValidRi : 0;
                // Tooltip diagnosis formatting
                if (toolTipInfo.diagnosis != null) {
                    // Replace the first ^ with nothing
                    /** @type {?} */
                    var tmpDiag = toolTipInfo.diagnosis.replace('^', '');
                    // Replace the rest of the ^ with ', '
                    graph.diagnosis = tmpDiag.replace(/\^/g, ', ');
                }
                _this.toolTipInfoUpdated$.next(toolTipInfo);
            }
        });
    };
    TooltipService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TooltipService.ctorParameters = function () { return [
        { type: PeraGraphService },
        { type: ArrayViewService },
        { type: HttpClient },
        { type: LoginService },
        { type: TokenApiService },
        { type: ArrayViewConfigService }
    ]; };
    /** @nocollapse */ TooltipService.ngInjectableDef = i0.defineInjectable({ factory: function TooltipService_Factory() { return new TooltipService(i0.inject(i1.PeraGraphService), i0.inject(i2.ArrayViewService), i0.inject(i3.HttpClient), i0.inject(i4.LoginService), i0.inject(i5.TokenApiService), i0.inject(i6.ArrayViewConfigService)); }, token: TooltipService, providedIn: "root" });
    return TooltipService;
}());
export { TooltipService };
if (false) {
    /** @type {?} */
    TooltipService.prototype.toolTipInfoUpdated$;
    /**
     * @type {?}
     * @private
     */
    TooltipService.prototype.graphService;
    /**
     * @type {?}
     * @private
     */
    TooltipService.prototype.arrayViewService;
    /**
     * @type {?}
     * @private
     */
    TooltipService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TooltipService.prototype.loginService;
    /**
     * @type {?}
     * @private
     */
    TooltipService.prototype.tokenApiService;
    /**
     * @type {?}
     * @private
     */
    TooltipService.prototype.arrayViewConfigService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctYXJyYXktdmlldy1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2dyb3VwL3BlcmEtZ3JhcGgvc2VydmljZS90b29sdGlwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQ3JFLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUVsRixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7Ozs7Ozs7O0FBRTdCO0lBT0ksd0JBQW9CLFlBQThCLEVBQzlCLGdCQUFrQyxFQUNsQyxJQUFnQixFQUNoQixZQUEwQixFQUMxQixlQUFnQyxFQUNoQyxzQkFBOEM7UUFMOUMsaUJBQVksR0FBWixZQUFZLENBQWtCO1FBQzlCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQVAzRCx3QkFBbUIsR0FBeUIsSUFBSSxPQUFPLEVBQWUsQ0FBQztJQVE5RSxDQUFDOzs7OztJQUVELDBDQUFpQjs7OztJQUFqQixVQUFrQixLQUFnQjtRQUFsQyxpQkFtQkM7UUFsQkcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1FBQ3RFLGdEQUFnRDtRQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsU0FBUyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxXQUF3QjtZQUMzSywySEFBMkg7WUFDM0gsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLFdBQVcsQ0FBQyxPQUFPLEVBQUU7O29CQUNqQyw4QkFBOEIsR0FBRyxXQUFXLENBQUMsOEJBQThCO2dCQUNqRix5RkFBeUY7Z0JBQ3pGLEtBQUssQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLDhCQUE4QixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxRywrQkFBK0I7Z0JBQy9CLElBQUksV0FBVyxDQUFDLFNBQVMsSUFBSSxJQUFJLEVBQUU7Ozt3QkFFekIsT0FBTyxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7b0JBQ3RELHNDQUFzQztvQkFDdEMsS0FBSyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDbEQ7Z0JBQ0QsS0FBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUM5QztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Z0JBbENKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBVE8sZ0JBQWdCO2dCQUhoQixnQkFBZ0I7Z0JBRGhCLFVBQVU7Z0JBT1YsWUFBWTtnQkFDWixlQUFlO2dCQUhmLHNCQUFzQjs7O3lCQU45QjtDQStDQyxBQW5DRCxJQW1DQztTQWhDWSxjQUFjOzs7SUFFdkIsNkNBQThFOzs7OztJQUVsRSxzQ0FBc0M7Ozs7O0lBQ3RDLDBDQUEwQzs7Ozs7SUFDMUMsOEJBQXdCOzs7OztJQUN4QixzQ0FBa0M7Ozs7O0lBQ2xDLHlDQUF3Qzs7Ozs7SUFDeEMsZ0RBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtBcnJheVZpZXdTZXJ2aWNlfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlL2FycmF5LXZpZXcuc2VydmljZSc7XG5pbXBvcnQge2ZpcnN0fSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1Rvb2x0aXBJbmZvfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9Ub29sdGlwSW5mbyc7XG5pbXBvcnQge1BlcmFHcmFwaFNlcnZpY2V9IGZyb20gJy4vcGVyYS1ncmFwaC5zZXJ2aWNlJztcbmltcG9ydCB7QXJyYXlWaWV3Q29uZmlnU2VydmljZX0gZnJvbSAnLi4vLi4vLi4vc2VydmljZS9hcnJheS12aWV3LWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7UGVyYUdyYXBofSBmcm9tICduZy1jb21tb24tbGlicmFyeS9saWIvbW9kZWwvUGVyYUdyYXBoJztcbmltcG9ydCB7TG9naW5TZXJ2aWNlfSBmcm9tICduZy1sb2dpbi1saWJyYXJ5JztcbmltcG9ydCB7VG9rZW5BcGlTZXJ2aWNlfSBmcm9tICduZy1jb21tb24tbGlicmFyeSc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRvb2x0aXBTZXJ2aWNlIHtcblxuICAgIHB1YmxpYyB0b29sVGlwSW5mb1VwZGF0ZWQkOiBTdWJqZWN0PFRvb2x0aXBJbmZvPiA9IG5ldyBTdWJqZWN0PFRvb2x0aXBJbmZvPigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBncmFwaFNlcnZpY2U6IFBlcmFHcmFwaFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhcnJheVZpZXdTZXJ2aWNlOiBBcnJheVZpZXdTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ2luU2VydmljZTogTG9naW5TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgdG9rZW5BcGlTZXJ2aWNlOiBUb2tlbkFwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhcnJheVZpZXdDb25maWdTZXJ2aWNlOiBBcnJheVZpZXdDb25maWdTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgdXBkYXRlVG9vbFRpcEluZm8oZ3JhcGg6IFBlcmFHcmFwaCkge1xuICAgICAgICB0aGlzLnRva2VuQXBpU2VydmljZS5yZWZyZXNoVG9rZW4odGhpcy5sb2dpblNlcnZpY2UuZ2V0Q3VycmVudFVzZXIoKSk7XG4gICAgICAgIC8vIEdldCB0aGUgY3VycmVudCB0b29sdGlwIGluZm8gZnJvbSB0aGUgc2VydmVyLlxuICAgICAgICB0aGlzLmh0dHAuZ2V0KHRoaXMuYXJyYXlWaWV3Q29uZmlnU2VydmljZS5nZXRUb29sVGlwSW5mb0VuZFBvaW50KCkgKyAnL3BpZC8nICsgZ3JhcGgucGF0aWVudC5waWQgKyAnL3Zpc2l0LycgKyBncmFwaC52aXNpdElkKS5waXBlKGZpcnN0KCkpLnN1YnNjcmliZSgodG9vbFRpcEluZm86IFRvb2x0aXBJbmZvKSA9PiB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgdXNlciBoYXNuJ3QgbW92ZWQgb250byBhIG5ldyBncmFwaCB3aXRoIGEgZGlmZmVyZW50IGR1cmluZyB0aGUgdGltZSB0aGF0IHRoZSBjYWxsIHdhcyBtYWRlIHRvIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgIGlmIChncmFwaC52aXNpdElkID09PSB0b29sVGlwSW5mby52aXNpdElkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbnVtYmVyT2ZPdGhlclZpc2l0c1dpdGhWYWxpZFJpID0gdG9vbFRpcEluZm8ubnVtYmVyT2ZPdGhlclZpc2l0c1dpdGhWYWxpZFJpO1xuICAgICAgICAgICAgICAgIC8vIFRoZSBxdWVyeSB3aWxsIHJldHVybiBhIC0xIHZhbHVlIGlmIHRoZSBjdXJyZW50IGFuZCBvbmx5IHZpc2l0IGhhcyBubyB2YWxpZCBSSSBzY29yZXMuXG4gICAgICAgICAgICAgICAgZ3JhcGgubnVtYmVyVmlzaXRzV2l0aFZhbGlkUkkgPSAobnVtYmVyT2ZPdGhlclZpc2l0c1dpdGhWYWxpZFJpID4gMCkgPyBudW1iZXJPZk90aGVyVmlzaXRzV2l0aFZhbGlkUmkgOiAwO1xuICAgICAgICAgICAgICAgIC8vIFRvb2x0aXAgZGlhZ25vc2lzIGZvcm1hdHRpbmdcbiAgICAgICAgICAgICAgICBpZiAodG9vbFRpcEluZm8uZGlhZ25vc2lzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVwbGFjZSB0aGUgZmlyc3QgXiB3aXRoIG5vdGhpbmdcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wRGlhZyA9IHRvb2xUaXBJbmZvLmRpYWdub3Npcy5yZXBsYWNlKCdeJywgJycpO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHRoZSByZXN0IG9mIHRoZSBeIHdpdGggJywgJ1xuICAgICAgICAgICAgICAgICAgICBncmFwaC5kaWFnbm9zaXMgPSB0bXBEaWFnLnJlcGxhY2UoL1xcXi9nLCAnLCAnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy50b29sVGlwSW5mb1VwZGF0ZWQkLm5leHQodG9vbFRpcEluZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=