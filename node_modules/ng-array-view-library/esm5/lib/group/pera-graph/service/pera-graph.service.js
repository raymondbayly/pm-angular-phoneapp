/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WarningColors } from '../../../model/WarningColors';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
var PeraGraphService = /** @class */ (function () {
    function PeraGraphService() {
        // Subject for navigating to the PSG
        this.graphClicked$ = new Subject();
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    PeraGraphService.prototype.graphClickedEvent = /**
     * @param {?} graph
     * @return {?}
     */
    function (graph) {
        this.closeToolTip();
        this.graphClicked$.next(graph);
    };
    /**
     * @param {?} warning
     * @param {?} latestRi
     * @param {?} isDischarged
     * @return {?}
     */
    PeraGraphService.prototype.getBackgroundColorByWarningAndRi = /**
     * @param {?} warning
     * @param {?} latestRi
     * @param {?} isDischarged
     * @return {?}
     */
    function (warning, latestRi, isDischarged) {
        /** @type {?} */
        var backgroundColor;
        if (warning && !isDischarged) {
            switch (warning.category) {
                case 'V':
                    backgroundColor = WarningColors.VeryHigh;
                    break;
                case 'H':
                    backgroundColor = WarningColors.High;
                    break;
                case 'M':
                    backgroundColor = WarningColors.Medium;
                    break;
            }
        }
        else if (latestRi && !isDischarged) {
            backgroundColor = WarningColors.NoCurrent;
        }
        else {
            backgroundColor = WarningColors.NoRi;
        }
        return backgroundColor;
    };
    /**
     * @param {?} latestRi
     * @return {?}
     */
    PeraGraphService.prototype.getRiScoreToDisplay = /**
     * @param {?} latestRi
     * @return {?}
     */
    function (latestRi) {
        return (latestRi) ? latestRi + '' : '--';
    };
    /**
     * @return {?}
     */
    PeraGraphService.prototype.closeToolTip = /**
     * @return {?}
     */
    function () {
        if (this.tooltip && this.tooltip.isOpen) {
            this.tooltip.close();
        }
    };
    PeraGraphService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PeraGraphService.ctorParameters = function () { return []; };
    /** @nocollapse */ PeraGraphService.ngInjectableDef = i0.defineInjectable({ factory: function PeraGraphService_Factory() { return new PeraGraphService(); }, token: PeraGraphService, providedIn: "root" });
    return PeraGraphService;
}());
export { PeraGraphService };
if (false) {
    /** @type {?} */
    PeraGraphService.prototype.graphClicked$;
    /** @type {?} */
    PeraGraphService.prototype.tooltip;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyYS1ncmFwaC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctYXJyYXktdmlldy1saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2dyb3VwL3BlcmEtZ3JhcGgvc2VydmljZS9wZXJhLWdyYXBoLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBRTNELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBRzdCO0lBV0k7O1FBTk8sa0JBQWEsR0FBdUIsSUFBSSxPQUFPLEVBQWEsQ0FBQztJQU9wRSxDQUFDOzs7OztJQUVNLDRDQUFpQjs7OztJQUF4QixVQUF5QixLQUFnQjtRQUNyQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Ozs7OztJQUVNLDJEQUFnQzs7Ozs7O0lBQXZDLFVBQXdDLE9BQU8sRUFBRSxRQUFnQixFQUFFLFlBQXFCOztZQUNoRixlQUFlO1FBQ25CLElBQUksT0FBTyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQzFCLFFBQVEsT0FBTyxDQUFDLFFBQVEsRUFBRTtnQkFDdEIsS0FBSyxHQUFHO29CQUNKLGVBQWUsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDO29CQUN6QyxNQUFNO2dCQUNWLEtBQUssR0FBRztvQkFDSixlQUFlLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQztvQkFDckMsTUFBTTtnQkFDVixLQUFLLEdBQUc7b0JBQ0osZUFBZSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUM7b0JBQ3ZDLE1BQU07YUFDYjtTQUNKO2FBQU0sSUFBSSxRQUFRLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbEMsZUFBZSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUM7U0FDN0M7YUFBTTtZQUNILGVBQWUsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDO1NBQ3hDO1FBRUQsT0FBTyxlQUFlLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFFTSw4Q0FBbUI7Ozs7SUFBMUIsVUFBMkIsUUFBZ0I7UUFDdkMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDN0MsQ0FBQzs7OztJQUVELHVDQUFZOzs7SUFBWjtRQUNJLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3hCO0lBQ0wsQ0FBQzs7Z0JBbERKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7OzJCQVJEO0NBeURDLEFBbkRELElBbURDO1NBaERZLGdCQUFnQjs7O0lBRXpCLHlDQUFvRTs7SUFJcEUsbUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7V2FybmluZ0NvbG9yc30gZnJvbSAnLi4vLi4vLi4vbW9kZWwvV2FybmluZ0NvbG9ycyc7XG5pbXBvcnQge05nYlBvcG92ZXJ9IGZyb20gJ0BuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1BlcmFHcmFwaH0gZnJvbSAnbmctY29tbW9uLWxpYnJhcnknO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBlcmFHcmFwaFNlcnZpY2Uge1xuICAgIC8vIFN1YmplY3QgZm9yIG5hdmlnYXRpbmcgdG8gdGhlIFBTR1xuICAgIHB1YmxpYyBncmFwaENsaWNrZWQkOiBTdWJqZWN0PFBlcmFHcmFwaD4gPSBuZXcgU3ViamVjdDxQZXJhR3JhcGg+KCk7XG5cbiAgICAvLyBUaGUgY3VycmVudGx5IGRpc3BsYXllZCB0b29sdGlwXG4gICAgLy8gTk9URTogVGhpcyB3YXMgaW1wbGVtZW50ZWQgdG8gc29sdmUgYSBwcm9ibGVtIHdoZXJlIG11bHRpcGxlIHRvb2x0aXBzIHdvdWxkIGJlIG9wZW4gYXQgdGhlIHNhbWUgdGltZVxuICAgIHB1YmxpYyB0b29sdGlwOiBOZ2JQb3BvdmVyO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgcHVibGljIGdyYXBoQ2xpY2tlZEV2ZW50KGdyYXBoOiBQZXJhR3JhcGgpIHtcbiAgICAgICAgdGhpcy5jbG9zZVRvb2xUaXAoKTtcbiAgICAgICAgdGhpcy5ncmFwaENsaWNrZWQkLm5leHQoZ3JhcGgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRCYWNrZ3JvdW5kQ29sb3JCeVdhcm5pbmdBbmRSaSh3YXJuaW5nLCBsYXRlc3RSaTogbnVtYmVyLCBpc0Rpc2NoYXJnZWQ6IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgICAgICBsZXQgYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBpZiAod2FybmluZyAmJiAhaXNEaXNjaGFyZ2VkKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHdhcm5pbmcuY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdWJzpcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yID0gV2FybmluZ0NvbG9ycy5WZXJ5SGlnaDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnSCc6XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA9IFdhcm5pbmdDb2xvcnMuSGlnaDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA9IFdhcm5pbmdDb2xvcnMuTWVkaXVtO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChsYXRlc3RSaSAmJiAhaXNEaXNjaGFyZ2VkKSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBXYXJuaW5nQ29sb3JzLk5vQ3VycmVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA9IFdhcm5pbmdDb2xvcnMuTm9SaTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJpU2NvcmVUb0Rpc3BsYXkobGF0ZXN0Umk6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAobGF0ZXN0UmkpID8gbGF0ZXN0UmkgKyAnJyA6ICctLSc7XG4gICAgfVxuXG4gICAgY2xvc2VUb29sVGlwKCkge1xuICAgICAgICBpZiAodGhpcy50b29sdGlwICYmIHRoaXMudG9vbHRpcC5pc09wZW4pIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcC5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19