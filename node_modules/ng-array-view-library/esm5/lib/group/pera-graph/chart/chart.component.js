/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';
import * as moment_ from 'moment-timezone';
import { ArrayViewService } from '../../../service/array-view.service';
import { ChartService, DateService } from 'ng-common-library';
/** @type {?} */
var Highcharts = require('highcharts');
// The JavaScript compiler gives a weird "moment cannot be used as a namespace" type of error
// This is the workaround...
/** @type {?} */
var moment = moment_;
var ChartComponent = /** @class */ (function () {
    function ChartComponent(dateService, chartService, arrayViewService, ref) {
        this.dateService = dateService;
        this.chartService = chartService;
        this.arrayViewService = arrayViewService;
        this.ref = ref;
        this.Highcharts = Highcharts;
        this.X_AXIS_DAYS = 5;
        this.DAY_IN_MILLISECONDS = 86400000;
        this.minRiScore = 0;
        this.minRecordedDt = 999999999999999999999;
        this.maxRecordedDt = 0;
    }
    /**
     * @return {?}
     */
    ChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Manage change detection explicitly
        this.ref.detach();
        // Get the series
        this.series = this.getChartSeries();
        // Build the chart options
        this.chartOptions = this.getChartOptions();
        // Trigger change detection
        this.ref.detectChanges();
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        // Ensure that a chart already exists
        if (this.Highcharts && this.chartOptions) {
            // Fetch the series using the latest flowsheet information
            this.series = this.getChartSeries();
            // If the series is different
            if (this.series !== this.chartOptions.series) {
                this.updateChart();
                this.chartOptions = tslib_1.__assign({}, this.chartOptions);
                if (this.ref) {
                    this.ref.detectChanges();
                }
            }
        }
    };
    /**
     * Updates the chart
     */
    /**
     * Updates the chart
     * @return {?}
     */
    ChartComponent.prototype.updateChart = /**
     * Updates the chart
     * @return {?}
     */
    function () {
        this.chartOptions.series = this.series;
        this.updateXAxis();
        this.updateYAxis();
    };
    /**
     * Updates the pieces of the Y axis that need updating
     */
    /**
     * Updates the pieces of the Y axis that need updating
     * @return {?}
     */
    ChartComponent.prototype.updateYAxis = /**
     * Updates the pieces of the Y axis that need updating
     * @return {?}
     */
    function () {
        /** @type {?} */
        var minYAxisTick = this.chartService.getMinYAxisTick(this.minRiScore);
        // If the min Y axis value would change, update it
        if (this.chartOptions.yAxis[0].min !== minYAxisTick) {
            this.chartOptions.yAxis[0].min = minYAxisTick;
            this.chartOptions.yAxis[0].plotLines = this.chartService.createZeroAxisLine(this.minRiScore);
        }
    };
    /**
     * Updates the pieces of the X axis that need updating
     */
    /**
     * Updates the pieces of the X axis that need updating
     * @return {?}
     */
    ChartComponent.prototype.updateXAxis = /**
     * Updates the pieces of the X axis that need updating
     * @return {?}
     */
    function () {
        this.chartOptions.xAxis = this.getXaxis();
    };
    /**
     * Returns the chart options
     */
    /**
     * Returns the chart options
     * @return {?}
     */
    ChartComponent.prototype.getChartOptions = /**
     * Returns the chart options
     * @return {?}
     */
    function () {
        return {
            chart: {
                type: 'line',
                spacing: [2, 0, 0, 0],
                marginLeft: 18,
                marginRight: 2,
                plotBackgroundColor: 'white',
                reflow: false,
                animation: false,
                alignTicks: false
            },
            tooltip: {
                enabled: false,
                animation: false
            },
            plotOptions: {
                series: {
                    color: '#848484',
                    turboThreshold: 0,
                    animation: false,
                    enableMouseTracking: false,
                    stickyTracking: false,
                    shadow: false,
                    dataLabels: {
                        style: {
                            textShadow: false
                        }
                    }
                },
                line: {
                    animation: false,
                    enableMouseTracking: false,
                    stickyTracking: false,
                    shadow: false,
                    dataLabels: {
                        style: {
                            textShadow: false
                        }
                    }
                }
            },
            credits: {
                enabled: false
            },
            legend: {
                enabled: false
            },
            title: {
                text: ''
            },
            xAxis: this.getXaxis(),
            yAxis: this.getYaxis(),
            series: this.series
        };
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.getXaxis = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var xAxis = [];
        xAxis.push({
            type: 'datetime',
            startOnTick: false,
            endOnTick: false,
            tickInterval: this.graph.isDischarged ? null : this.DAY_IN_MILLISECONDS,
            gridLineWidth: 1,
            plotLines: this.chartService.updateAlertPlotLine(this.graph),
            title: {
                text: ' '
            },
            labels: {
                distance: 20,
                style: {
                    color: 'black',
                    'font-size': '.6em'
                },
                formatter: function () {
                    return moment(this.value).utcOffset(0).format('MM/DD');
                },
                step: 1
            },
            min: this.getMinXAxisValue(),
            max: this.getMaxXAxisValue(),
        });
        return xAxis;
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.getMaxXAxisValue = /**
     * @return {?}
     */
    function () {
        return (this.graph.discharged) ? null : this.dateService.translateDate(this.arrayViewService.getCurrentTimestamp(), this.graph.timeZone);
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.getMinXAxisValue = /**
     * @return {?}
     */
    function () {
        return (this.graph.discharged) ? null : this.dateService.translateDate(this.arrayViewService.getCurrentTimestamp(), this.graph.timeZone) - this.X_AXIS_DAYS * this.DAY_IN_MILLISECONDS;
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.getYaxis = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var yAxis = [];
        yAxis.push({
            title: {
                text: ' '
            },
            labels: {
                style: {
                    color: 'black',
                    'font-size': '.6em'
                },
                padding: 1,
                align: 'center'
            },
            offset: -12,
            //     gridLineColor : colorHealthScoreGridLine,
            gridLineWidth: 1,
            min: this.chartService.getMinYAxisTick(this.minRiScore),
            max: 100,
            plotLines: this.chartService.createZeroAxisLine(this.minRiScore),
            tickPositioner: function (min, max) {
                /** @type {?} */
                var tick = min;
                /** @type {?} */
                var ticks = [];
                while (tick <= max) {
                    ticks.push(tick);
                    tick += 20;
                }
                return ticks;
            }
        });
        return yAxis;
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.getChartSeries = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var series = [];
        series.push({
            name: '',
            data: this.getDataPoints(this.flowsheets),
            showInLegend: false,
            turboThreshold: 0,
            color: {
                linearGradient: { x1: 0, x2: 1, y1: 0, y2: 0 },
                stops: this.getArrayOfLocationChanges(this.flowsheets)
            },
            marker: {
                enabled: (this.flowsheets && this.flowsheets.length === 1) ? true : false,
                color: (this.flowsheets && this.flowsheets.length === 1) ? this.chartService.getMarkerColor(this.flowsheets[0].unitType) : null,
                radius: 1.5
            }
        });
        return series;
    };
    /**
     * @param {?} fscList
     * @return {?}
     */
    ChartComponent.prototype.getArrayOfLocationChanges = /**
     * @param {?} fscList
     * @return {?}
     */
    function (fscList) {
        var _this = this;
        /** @type {?} */
        var range = this.maxRecordedDt - this.minRecordedDt;
        /** @type {?} */
        var colors = [[0, 'black']];
        /** @type {?} */
        var color = 'black';
        /** @type {?} */
        var unitType = null;
        /** @type {?} */
        var xval = 0;
        if (fscList && range > 0) {
            fscList.forEach(function (fsc) {
                // If the unit type changed
                if (fsc.unitType !== unitType) {
                    // Get the percentage across the X axis by recorded date
                    xval = (fsc.key.recordedDt - _this.minRecordedDt) / range;
                    // add an entry just prior to this point to smooth the gradient
                    colors.push([xval - .0001, color]);
                    // The the appropriate color for this unitType
                    color = _this.chartService.getMarkerColor(fsc.unitType);
                    // Push the change in color
                    colors.push([xval, color]);
                    // Remember the current unit type
                    unitType = fsc.unitType;
                }
            });
        }
        return colors;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ChartComponent.prototype.getDataPoints = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var dataPoints = [];
        // Reset the variables
        this.minRiScore = 100;
        this.minRecordedDt = 999999999999999999999;
        this.maxRecordedDt = 0;
        // If we have data
        if (data) {
            data.forEach(function (fsc) {
                dataPoints.push([_this.dateService.translateDate(fsc.key.recordedDt, _this.graph.timeZone), fsc.riScore + (Math.random() / 1000)]);
                // Keep track of the extreme values - they are used elsewhere
                _this.minRecordedDt = (_this.minRecordedDt > fsc.key.recordedDt) ? fsc.key.recordedDt : _this.minRecordedDt;
                _this.maxRecordedDt = (_this.maxRecordedDt < fsc.key.recordedDt) ? fsc.key.recordedDt : _this.maxRecordedDt;
                _this.minRiScore = (_this.minRiScore > fsc.riScore) ? fsc.riScore : _this.minRiScore;
            });
        }
        return dataPoints;
    };
    /**
     * @return {?}
     */
    ChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.ref) {
            this.ref.detach();
            this.ref = null;
        }
    };
    ChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'phlib-chart',
                    template: "<div class=\"ph-graph\" *ngIf=\"!flowsheets || flowsheets.length != 0\">\n  <highcharts-chart class=\"ph-hc\"\n                    [Highcharts]=\"Highcharts\"\n                    [options]=\"chartOptions\"\n  ></highcharts-chart>\n</div>\n\n<div class=\"insufficient-data ph-hc\" *ngIf=\"flowsheets && flowsheets.length == 0\">\n  <div class=\"insufficient-data-text\">Insufficient data received to generate RI graph\n    <div *ngIf=\"graph && graph.activeWarning\" class=\"insufficient-data-text\">\n      <br>\n      Warning state generated by prior visit\n    </div>\n  </div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".ph-graph{width:99%;height:83%;position:absolute;top:17%;left:1px;cursor:pointer}.ph-hc{width:100%!important;position:absolute!important;height:100%!important}.insufficient-data{font-size:.7em;font-weight:700;color:#60606a;padding-left:5%;padding-right:5%;padding-top:13%;display:flex;margin:auto}.insufficient-data-text{margin:auto}"]
                }] }
    ];
    /** @nocollapse */
    ChartComponent.ctorParameters = function () { return [
        { type: DateService },
        { type: ChartService },
        { type: ArrayViewService },
        { type: ChangeDetectorRef }
    ]; };
    ChartComponent.propDecorators = {
        flowsheets: [{ type: Input }],
        graph: [{ type: Input }],
        currentTimestamp: [{ type: Input }]
    };
    return ChartComponent;
}());
export { ChartComponent };
if (false) {
    /** @type {?} */
    ChartComponent.prototype.flowsheets;
    /** @type {?} */
    ChartComponent.prototype.graph;
    /** @type {?} */
    ChartComponent.prototype.currentTimestamp;
    /** @type {?} */
    ChartComponent.prototype.Highcharts;
    /** @type {?} */
    ChartComponent.prototype.chartOptions;
    /** @type {?} */
    ChartComponent.prototype.X_AXIS_DAYS;
    /** @type {?} */
    ChartComponent.prototype.DAY_IN_MILLISECONDS;
    /** @type {?} */
    ChartComponent.prototype.minRiScore;
    /** @type {?} */
    ChartComponent.prototype.minRecordedDt;
    /** @type {?} */
    ChartComponent.prototype.maxRecordedDt;
    /** @type {?} */
    ChartComponent.prototype.series;
    /**
     * @type {?}
     * @private
     */
    ChartComponent.prototype.dateService;
    /**
     * @type {?}
     * @private
     */
    ChartComponent.prototype.chartService;
    /**
     * @type {?}
     * @private
     */
    ChartComponent.prototype.arrayViewService;
    /**
     * @type {?}
     * @private
     */
    ChartComponent.prototype.ref;
}
//# sourceMappingURL=data:application/json;base64,