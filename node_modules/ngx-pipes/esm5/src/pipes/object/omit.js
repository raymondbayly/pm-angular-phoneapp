/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isObject } from '../helpers/helpers';
var OmitPipe = /** @class */ (function () {
    function OmitPipe() {
    }
    /**
     * @param {?} obj
     * @param {...?} args
     * @return {?}
     */
    OmitPipe.prototype.transform = /**
     * @param {?} obj
     * @param {...?} args
     * @return {?}
     */
    function (obj) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return (Object.keys(obj)
            // tslint:disable-next-line:no-bitwise
            .filter((/**
         * @param {?} k
         * @return {?}
         */
        function (k) { return !~args.indexOf(k); }))
            .reduce((/**
         * @param {?} o
         * @param {?} k
         * @return {?}
         */
        function (o, k) {
            var _a;
            return Object.assign(o, (_a = {}, _a[k] = obj[k], _a));
        }), {}));
    };
    OmitPipe.decorators = [
        { type: Pipe, args: [{ name: 'omit' },] }
    ];
    return OmitPipe;
}());
export { OmitPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib21pdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1waXBlcy8iLCJzb3VyY2VzIjpbInNyYy9waXBlcy9vYmplY3Qvb21pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTlDO0lBQUE7SUFnQkEsQ0FBQzs7Ozs7O0lBZEMsNEJBQVM7Ozs7O0lBQVQsVUFBVSxHQUFRO1FBQUUsY0FBc0I7YUFBdEIsVUFBc0IsRUFBdEIscUJBQXNCLEVBQXRCLElBQXNCO1lBQXRCLDZCQUFzQjs7UUFDeEMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3hDLE9BQU8sR0FBRyxDQUFDO1NBQ1o7UUFFRCxPQUFPLENBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDZCxzQ0FBc0M7YUFDckMsTUFBTTs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQWpCLENBQWlCLEVBQUM7YUFDOUIsTUFBTTs7Ozs7UUFBQyxVQUFDLENBQUMsRUFBRSxDQUFDOztZQUNYLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQUksR0FBQyxDQUFDLElBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFHLENBQUM7UUFDM0MsQ0FBQyxHQUFFLEVBQUUsQ0FBQyxDQUNULENBQUM7SUFDSixDQUFDOztnQkFmRixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFOztJQWdCdEIsZUFBQztDQUFBLEFBaEJELElBZ0JDO1NBZlksUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi4vaGVscGVycy9oZWxwZXJzJztcblxuQFBpcGUoeyBuYW1lOiAnb21pdCcgfSlcbmV4cG9ydCBjbGFzcyBPbWl0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0ob2JqOiBhbnksIC4uLmFyZ3M6IEFycmF5PHN0cmluZz4pOiBPYmplY3Qge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikgfHwgIWlzT2JqZWN0KG9iaikpIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIE9iamVjdC5rZXlzKG9iailcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbiAgICAgICAgLmZpbHRlcihrID0+ICF+YXJncy5pbmRleE9mKGspKVxuICAgICAgICAucmVkdWNlKChvLCBrKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obywgeyBba106IG9ialtrXSB9KTtcbiAgICAgICAgfSwge30pXG4gICAgKTtcbiAgfVxufVxuIl19