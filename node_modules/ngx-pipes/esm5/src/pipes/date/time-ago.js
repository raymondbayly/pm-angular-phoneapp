/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
var TimeAgoPipe = /** @class */ (function () {
    function TimeAgoPipe() {
    }
    /**
     * @param inputDate: Date | Moment - not included as TypeScript interface,
     * in order to keep `ngx-pipes` "pure" from dependencies!
     */
    /**
     * @param {?} inputDate
     * @return {?}
     */
    TimeAgoPipe.prototype.transform = /**
     * @param {?} inputDate
     * @return {?}
     */
    function (inputDate) {
        if (!inputDate || (!inputDate.getTime && !inputDate.toDate)) {
            return 'Invalid date';
        }
        /** @type {?} */
        var past = inputDate.toDate ? inputDate.toDate() : inputDate.getTime();
        /** @type {?} */
        var now = +new Date();
        if (past > now) {
            return 'in the future';
        }
        for (var i = 0, l = TimeAgoPipe.MAPPER.length, ms = now - past, div = TimeAgoPipe.YEAR_MS; i < l; ++i) {
            /** @type {?} */
            var elm = TimeAgoPipe.MAPPER[i];
            /** @type {?} */
            var unit = Math.floor(ms / (div /= elm.div));
            if (unit >= 1) {
                return unit === 1 ? elm.single : unit + " " + elm.many + " ago";
            }
        }
        return 'just now';
    };
    TimeAgoPipe.YEAR_MS = 1000 * 60 * 60 * 24 * 7 * 4 * 12;
    TimeAgoPipe.MAPPER = [
        { single: 'last year', many: 'years', div: 1 },
        { single: 'last month', many: 'months', div: 12 },
        { single: 'last week', many: 'weeks', div: 4 },
        { single: 'yesterday', many: 'days', div: 7 },
        { single: 'an hour ago', many: 'hours', div: 24 },
        { single: 'just now', many: 'minutes', div: 60 },
    ];
    TimeAgoPipe.decorators = [
        { type: Pipe, args: [{ name: 'timeAgo' },] }
    ];
    return TimeAgoPipe;
}());
export { TimeAgoPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TimeAgoPipe.YEAR_MS;
    /**
     * @type {?}
     * @private
     */
    TimeAgoPipe.MAPPER;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvZGF0ZS90aW1lLWFnby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQ7SUFBQTtJQXVDQSxDQUFDO0lBM0JDOzs7T0FHRzs7Ozs7SUFDSSwrQkFBUzs7OztJQUFoQixVQUFpQixTQUFjO1FBQzdCLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0QsT0FBTyxjQUFjLENBQUM7U0FDdkI7O1lBRUssSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRTs7WUFDbEUsR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUU7UUFFdkIsSUFBSSxJQUFJLEdBQUcsR0FBRyxFQUFFO1lBQ2QsT0FBTyxlQUFlLENBQUM7U0FDeEI7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxHQUFHLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTs7Z0JBQy9GLEdBQUcsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs7Z0JBQzNCLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFOUMsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO2dCQUNiLE9BQU8sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUksSUFBSSxTQUFJLEdBQUcsQ0FBQyxJQUFJLFNBQU0sQ0FBQzthQUM1RDtTQUNGO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQXBDYyxtQkFBTyxHQUFXLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNuRCxrQkFBTSxHQUFRO1FBQzNCLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7UUFDOUMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtRQUNqRCxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1FBQzlDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7UUFDN0MsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtRQUNqRCxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFO0tBQ2pELENBQUM7O2dCQVZILElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7O0lBdUN6QixrQkFBQztDQUFBLEFBdkNELElBdUNDO1NBdENZLFdBQVc7Ozs7OztJQUN0QixvQkFBa0U7Ozs7O0lBQ2xFLG1CQU9FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AUGlwZSh7IG5hbWU6ICd0aW1lQWdvJyB9KVxuZXhwb3J0IGNsYXNzIFRpbWVBZ29QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHByaXZhdGUgc3RhdGljIFlFQVJfTVM6IG51bWJlciA9IDEwMDAgKiA2MCAqIDYwICogMjQgKiA3ICogNCAqIDEyO1xuICBwcml2YXRlIHN0YXRpYyBNQVBQRVI6IGFueSA9IFtcbiAgICB7IHNpbmdsZTogJ2xhc3QgeWVhcicsIG1hbnk6ICd5ZWFycycsIGRpdjogMSB9LFxuICAgIHsgc2luZ2xlOiAnbGFzdCBtb250aCcsIG1hbnk6ICdtb250aHMnLCBkaXY6IDEyIH0sXG4gICAgeyBzaW5nbGU6ICdsYXN0IHdlZWsnLCBtYW55OiAnd2Vla3MnLCBkaXY6IDQgfSxcbiAgICB7IHNpbmdsZTogJ3llc3RlcmRheScsIG1hbnk6ICdkYXlzJywgZGl2OiA3IH0sXG4gICAgeyBzaW5nbGU6ICdhbiBob3VyIGFnbycsIG1hbnk6ICdob3VycycsIGRpdjogMjQgfSxcbiAgICB7IHNpbmdsZTogJ2p1c3Qgbm93JywgbWFueTogJ21pbnV0ZXMnLCBkaXY6IDYwIH0sXG4gIF07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBpbnB1dERhdGU6IERhdGUgfCBNb21lbnQgLSBub3QgaW5jbHVkZWQgYXMgVHlwZVNjcmlwdCBpbnRlcmZhY2UsXG4gICAqIGluIG9yZGVyIHRvIGtlZXAgYG5neC1waXBlc2AgXCJwdXJlXCIgZnJvbSBkZXBlbmRlbmNpZXMhXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtKGlucHV0RGF0ZTogYW55KTogc3RyaW5nIHtcbiAgICBpZiAoIWlucHV0RGF0ZSB8fCAoIWlucHV0RGF0ZS5nZXRUaW1lICYmICFpbnB1dERhdGUudG9EYXRlKSkge1xuICAgICAgcmV0dXJuICdJbnZhbGlkIGRhdGUnO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3QgPSBpbnB1dERhdGUudG9EYXRlID8gaW5wdXREYXRlLnRvRGF0ZSgpIDogaW5wdXREYXRlLmdldFRpbWUoKTtcbiAgICBjb25zdCBub3cgPSArbmV3IERhdGUoKTtcblxuICAgIGlmIChwYXN0ID4gbm93KSB7XG4gICAgICByZXR1cm4gJ2luIHRoZSBmdXR1cmUnO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gVGltZUFnb1BpcGUuTUFQUEVSLmxlbmd0aCwgbXMgPSBub3cgLSBwYXN0LCBkaXYgPSBUaW1lQWdvUGlwZS5ZRUFSX01TOyBpIDwgbDsgKytpKSB7XG4gICAgICBjb25zdCBlbG0gPSBUaW1lQWdvUGlwZS5NQVBQRVJbaV07XG4gICAgICBjb25zdCB1bml0ID0gTWF0aC5mbG9vcihtcyAvIChkaXYgLz0gZWxtLmRpdikpO1xuXG4gICAgICBpZiAodW5pdCA+PSAxKSB7XG4gICAgICAgIHJldHVybiB1bml0ID09PSAxID8gZWxtLnNpbmdsZSA6IGAke3VuaXR9ICR7ZWxtLm1hbnl9IGFnb2A7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICdqdXN0IG5vdyc7XG4gIH1cbn1cbiJdfQ==