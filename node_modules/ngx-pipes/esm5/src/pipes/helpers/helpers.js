/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * @param {?} value
 * @return {?}
 */
export function isUndefined(value) {
    return typeof value === 'undefined';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isString(value) {
    return typeof value === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isBoolean(value) {
    return typeof value === 'boolean';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isObject(value) {
    return value !== null && typeof value === 'object';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
/**
 * @param {?} letter
 * @return {?}
 */
export function isVowel(letter) {
    /** @type {?} */
    var vowels = ['a', 'e', 'i', 'o', 'u'];
    return vowels.indexOf(letter) !== -1;
}
/**
 * @param {?} text
 * @return {?}
 */
export function ucFirst(text) {
    var _a = tslib_1.__read(text.split(/\s/g)), part = _a[0], split = _a.slice(1);
    /** @type {?} */
    var ucd = part
        .toLowerCase()
        .split(/(?=['|-])/g)
        .map((/**
     * @param {?} word
     * @return {?}
     */
    function (word) {
        return word.indexOf('-') + word.indexOf("'") > -2
            ? word.slice(0, 2).toUpperCase() + word.slice(2)
            : word.slice(0, 1).toUpperCase() + word.slice(1);
    }))
        .join('');
    return tslib_1.__spread([ucd], split).join(' ');
}
/**
 * @param {?} num
 * @param {?} precision
 * @return {?}
 */
export function applyPrecision(num, precision) {
    if (precision <= 0) {
        return Math.round(num);
    }
    /** @type {?} */
    var tho = Math.pow(10, precision);
    return Math.round(num * tho) / tho;
}
/**
 * @param {?} obj
 * @param {?} map
 * @return {?}
 */
export function extractDeepPropertyByMapKey(obj, map) {
    /** @type {?} */
    var keys = map.split('.');
    /** @type {?} */
    var head = keys.shift();
    return keys.reduce((/**
     * @param {?} prop
     * @param {?} key
     * @return {?}
     */
    function (prop, key) {
        return !isUndefined(prop) && !isUndefined(prop[key]) ? prop[key] : undefined;
    }), obj[head || '']);
}
/**
 * @param {?} obj
 * @param {?} map
 * @return {?}
 */
export function extractDeepPropertyByParentMapKey(obj, map) {
    /** @type {?} */
    var keys = map.split('.');
    /** @type {?} */
    var tail = keys.pop();
    /** @type {?} */
    var props = extractDeepPropertyByMapKey(obj, keys.join('.'));
    return { props: props, tail: tail };
}
/**
 * @param {?} obj
 * @param {?} other
 * @return {?}
 */
export function getKeysTwoObjects(obj, other) {
    return tslib_1.__spread(Object.keys(obj), Object.keys(other)).filter((/**
     * @param {?} key
     * @param {?} index
     * @param {?} array
     * @return {?}
     */
    function (key, index, array) { return array.indexOf(key) === index; }));
}
/**
 * @param {?} obj
 * @param {?} other
 * @return {?}
 */
export function isDeepEqual(obj, other) {
    if (!isObject(obj) || !isObject(other)) {
        return obj === other;
    }
    return getKeysTwoObjects(obj, other).every((/**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (!isObject(obj[key]) && !isObject(other[key])) {
            return obj[key] === other[key];
        }
        if (!isObject(obj[key]) || !isObject(other[key])) {
            return false;
        }
        return isDeepEqual(obj[key], other[key]);
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1waXBlcy8iLCJzb3VyY2VzIjpbInNyYy9waXBlcy9oZWxwZXJzL2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsTUFBTSxVQUFVLFdBQVcsQ0FBQyxLQUFVO0lBQ3BDLE9BQU8sT0FBTyxLQUFLLEtBQUssV0FBVyxDQUFDO0FBQ3RDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxLQUFVO0lBQ25DLE9BQU8sT0FBTyxLQUFLLEtBQUssVUFBVSxDQUFDO0FBQ3JDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFVO0lBQ2pDLE9BQU8sT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO0FBQ25DLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFVO0lBQ2pDLE9BQU8sT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO0FBQ25DLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFVO0lBQ2xDLE9BQU8sT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDO0FBQ3BDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFVO0lBQ2pDLE9BQU8sS0FBSyxLQUFLLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUFDckQsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLEtBQVU7SUFDdkMsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FBQyxNQUFjOztRQUM5QixNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBRXhDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxD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QVcsQ0FBQyxHQUFRLEVBQUUsS0FBVTtJQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3RDLE9BQU8sR0FBRyxLQUFLLEtBQUssQ0FBQztLQUN0QjtJQUVELE9BQU8saUJBQWlCLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUs7Ozs7SUFDeEMsVUFBQyxHQUFRO1FBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNoRCxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDaEM7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2hELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxFQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodmFsdWU6IGFueSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyRmluaXRlKHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiBpc0Zpbml0ZSh2YWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Zvd2VsKGxldHRlcjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IHZvd2VscyA9IFsnYScsICdlJywgJ2knLCAnbycsICd1J107XG5cbiAgcmV0dXJuIHZvd2Vscy5pbmRleE9mKGxldHRlcikgIT09IC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdWNGaXJzdCh0ZXh0OiBzdHJpbmcpIHtcbiAgY29uc3QgW3BhcnQsIC4uLnNwbGl0XSA9IHRleHQuc3BsaXQoL1xccy9nKTtcblxuICBjb25zdCB1Y2QgPSBwYXJ0XG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAuc3BsaXQoLyg/PVsnfC1dKS9nKVxuICAgIC5tYXAoXG4gICAgICAod29yZDogYW55KSA9PlxuICAgICAgICB3b3JkLmluZGV4T2YoJy0nKSArIHdvcmQuaW5kZXhPZihcIidcIikgPiAtMlxuICAgICAgICAgID8gd29yZC5zbGljZSgwLCAyKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgyKVxuICAgICAgICAgIDogd29yZC5zbGljZSgwLCAxKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKVxuICAgIClcbiAgICAuam9pbignJyk7XG5cbiAgcmV0dXJuIFt1Y2QsIC4uLnNwbGl0XS5qb2luKCcgJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVByZWNpc2lvbihudW06IG51bWJlciwgcHJlY2lzaW9uOiBudW1iZXIpIHtcbiAgaWYgKHByZWNpc2lvbiA8PSAwKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobnVtKTtcbiAgfVxuXG4gIGNvbnN0IHRobyA9IDEwICoqIHByZWNpc2lvbjtcblxuICByZXR1cm4gTWF0aC5yb3VuZChudW0gKiB0aG8pIC8gdGhvO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KG9iajogYW55LCBtYXA6IHN0cmluZyk6IGFueSB7XG4gIGNvbnN0IGtleXMgPSBtYXAuc3BsaXQoJy4nKTtcbiAgY29uc3QgaGVhZCA9IGtleXMuc2hpZnQoKTtcblxuICByZXR1cm4ga2V5cy5yZWR1Y2UoKHByb3A6IGFueSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gIWlzVW5kZWZpbmVkKHByb3ApICYmICFpc1VuZGVmaW5lZChwcm9wW2tleV0pID8gcHJvcFtrZXldIDogdW5kZWZpbmVkO1xuICB9LCBvYmpbaGVhZCB8fCAnJ10pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5UGFyZW50TWFwS2V5KG9iajogYW55LCBtYXA6IHN0cmluZyk6IGFueSB7XG4gIGNvbnN0IGtleXMgPSBtYXAuc3BsaXQoJy4nKTtcbiAgY29uc3QgdGFpbCA9IGtleXMucG9wKCk7XG4gIGNvbnN0IHByb3BzID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KG9iaiwga2V5cy5qb2luKCcuJykpO1xuXG4gIHJldHVybiB7IHByb3BzLCB0YWlsIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXlzVHdvT2JqZWN0cyhvYmo6IGFueSwgb3RoZXI6IGFueSk6IGFueSB7XG4gIHJldHVybiBbLi4uT2JqZWN0LmtleXMob2JqKSwgLi4uT2JqZWN0LmtleXMob3RoZXIpXS5maWx0ZXIoKGtleSwgaW5kZXgsIGFycmF5KSA9PiBhcnJheS5pbmRleE9mKGtleSkgPT09IGluZGV4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVlcEVxdWFsKG9iajogYW55LCBvdGhlcjogYW55KTogYW55IHtcbiAgaWYgKCFpc09iamVjdChvYmopIHx8ICFpc09iamVjdChvdGhlcikpIHtcbiAgICByZXR1cm4gb2JqID09PSBvdGhlcjtcbiAgfVxuXG4gIHJldHVybiBnZXRLZXlzVHdvT2JqZWN0cyhvYmosIG90aGVyKS5ldmVyeShcbiAgICAoa2V5OiBhbnkpOiBib29sZWFuID0+IHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqW2tleV0pICYmICFpc09iamVjdChvdGhlcltrZXldKSkge1xuICAgICAgICByZXR1cm4gb2JqW2tleV0gPT09IG90aGVyW2tleV07XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KG9ialtrZXldKSB8fCAhaXNPYmplY3Qob3RoZXJba2V5XSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNEZWVwRXF1YWwob2JqW2tleV0sIG90aGVyW2tleV0pO1xuICAgIH1cbiAgKTtcbn1cbiJdfQ==