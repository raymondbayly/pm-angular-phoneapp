/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NgArrayPipesModule } from './array/index';
import { NgObjectPipesModule } from './object/index';
import { NgStringPipesModule } from './string/index';
import { NgMathPipesModule } from './math/index';
import { NgBooleanPipesModule } from './boolean/index';
import { NgDatePipesModule } from './date/index';
var NgPipesModule = /** @class */ (function () {
    function NgPipesModule() {
    }
    NgPipesModule.decorators = [
        { type: NgModule, args: [{
                    exports: [
                        NgArrayPipesModule,
                        NgStringPipesModule,
                        NgMathPipesModule,
                        NgBooleanPipesModule,
                        NgObjectPipesModule,
                        NgDatePipesModule,
                    ],
                },] }
    ];
    return NgPipesModule;
}());
export { NgPipesModule };
export { NgArrayPipesModule, DiffPipe, InitialPipe, FlattenPipe, IntersectionPipe, ReversePipe, TailPipe, TrurthifyPipe, UnionPipe, UniquePipe, WithoutPipe, PluckPipe, ShufflePipe, EveryPipe, SomePipe, SamplePipe, GroupByPipe, FilterByPipe, OrderByPipe, GroupByImpurePipe, FilterByImpurePipe, OrderByImpurePipe, RangePipe } from './array/index';
export { NgObjectPipesModule, KeysPipe, ValuesPipe, PairsPipe, PickPipe, OmitPipe, InvertPipe, InvertByPipe, DiffObjPipe } from './object/index';
export { STRING_PIPES, NgStringPipesModule, AorAnPipe, UcWordsPipe, LeftTrimPipe, RepeatPipe, RightTrimPipe, ScanPipe, ShortenPipe, StripTagsPipe, TrimPipe, UcFirstPipe, SlugifyPipe, CamelizePipe, LatinisePipe, LinesPipe, UnderscorePipe, MatchPipe, TestPipe, LeftPadPipe, RightPadPipe, MakePluralStringPipe, WrapPipe } from './string/index';
export { MATH_PIPES, NgMathPipesModule, MaxPipe, MinPipe, PercentagePipe, SumPipe, FloorPipe, RoundPipe, SqrtPipe, PowerPipe, CeilPipe, DegreesPipe, BytesPipe } from './math/index';
export { BOOLEAN_PIPES, NgBooleanPipesModule, IsDefinedPipe, IsNullPipe, IsUndefinedPipe, IsStringPipe, IsFunctionPipe, IsNumberPipe, IsArrayPipe, IsObjectPipe, IsGreaterEqualThanPipe, IsGreaterThanPipe, IsLessEqualThanPipe, IsEqualToPipe, IsNotEqualToPipe, IsIdenticalToPipe, IsNotIdenticalToPipe, IsLessThanPipe } from './boolean/index';
export { DATE_PIPES, NgDatePipesModule, TimeAgoPipe } from './date/index';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNqRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFakQ7SUFBQTtJQVU0QixDQUFDOztnQkFWNUIsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxrQkFBa0I7d0JBQ2xCLG1CQUFtQjt3QkFDbkIsaUJBQWlCO3dCQUNqQixvQkFBb0I7d0JBQ3BCLG1CQUFtQjt3QkFDbkIsaUJBQWlCO3FCQUNsQjtpQkFDRjs7SUFDMkIsb0JBQUM7Q0FBQSxBQVY3QixJQVU2QjtTQUFoQixhQUFhO0FBRTFCLHlVQUFjLGVBQWUsQ0FBQztBQUM5QixnSUFBYyxnQkFBZ0IsQ0FBQztBQUMvQixvVUFBYyxnQkFBZ0IsQ0FBQztBQUMvQixzS0FBYyxjQUFjLENBQUM7QUFDN0IsaVVBQWMsaUJBQWlCLENBQUM7QUFDaEMsMkRBQWMsY0FBYyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQXJyYXlQaXBlc01vZHVsZSB9IGZyb20gJy4vYXJyYXkvaW5kZXgnO1xuaW1wb3J0IHsgTmdPYmplY3RQaXBlc01vZHVsZSB9IGZyb20gJy4vb2JqZWN0L2luZGV4JztcbmltcG9ydCB7IE5nU3RyaW5nUGlwZXNNb2R1bGUgfSBmcm9tICcuL3N0cmluZy9pbmRleCc7XG5pbXBvcnQgeyBOZ01hdGhQaXBlc01vZHVsZSB9IGZyb20gJy4vbWF0aC9pbmRleCc7XG5pbXBvcnQgeyBOZ0Jvb2xlYW5QaXBlc01vZHVsZSB9IGZyb20gJy4vYm9vbGVhbi9pbmRleCc7XG5pbXBvcnQgeyBOZ0RhdGVQaXBlc01vZHVsZSB9IGZyb20gJy4vZGF0ZS9pbmRleCc7XG5cbkBOZ01vZHVsZSh7XG4gIGV4cG9ydHM6IFtcbiAgICBOZ0FycmF5UGlwZXNNb2R1bGUsXG4gICAgTmdTdHJpbmdQaXBlc01vZHVsZSxcbiAgICBOZ01hdGhQaXBlc01vZHVsZSxcbiAgICBOZ0Jvb2xlYW5QaXBlc01vZHVsZSxcbiAgICBOZ09iamVjdFBpcGVzTW9kdWxlLFxuICAgIE5nRGF0ZVBpcGVzTW9kdWxlLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ1BpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCAqIGZyb20gJy4vYXJyYXkvaW5kZXgnO1xuZXhwb3J0ICogZnJvbSAnLi9vYmplY3QvaW5kZXgnO1xuZXhwb3J0ICogZnJvbSAnLi9zdHJpbmcvaW5kZXgnO1xuZXhwb3J0ICogZnJvbSAnLi9tYXRoL2luZGV4JztcbmV4cG9ydCAqIGZyb20gJy4vYm9vbGVhbi9pbmRleCc7XG5leHBvcnQgKiBmcm9tICcuL2RhdGUvaW5kZXgnO1xuIl19