/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, isString, isUndefined } from '../helpers/helpers';
var OrderByPipe = /** @class */ (function () {
    function OrderByPipe() {
    }
    /**
     * @param {?} input
     * @param {?=} config
     * @return {?}
     */
    OrderByPipe.prototype.transform = /**
     * @param {?} input
     * @param {?=} config
     * @return {?}
     */
    function (input, config) {
        if (!Array.isArray(input)) {
            return input;
        }
        /** @type {?} */
        var out = tslib_1.__spread(input);
        // sort by multiple properties
        if (Array.isArray(config)) {
            return out.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                /** @type {?} */
                var l = config.length;
                for (var i = 0; i < l; ++i) {
                    var _a = tslib_1.__read(OrderByPipe.extractFromConfig(config[i]), 2), prop = _a[0], asc = _a[1];
                    /** @type {?} */
                    var pos = OrderByPipe.orderCompare(prop, asc, a, b);
                    if (pos !== 0) {
                        return pos;
                    }
                }
                return 0;
            }));
        }
        // sort by a single property value
        if (isString(config)) {
            var _a = tslib_1.__read(OrderByPipe.extractFromConfig(config), 3), prop = _a[0], asc = _a[1], sign = _a[2];
            if (config.length === 1) {
                // tslint:disable-next-line:switch-default
                switch (sign) {
                    case '+':
                        return out.sort(OrderByPipe.simpleSort.bind(this));
                    case '-':
                        return out.sort(OrderByPipe.simpleSort.bind(this)).reverse();
                }
            }
            return out.sort(OrderByPipe.orderCompare.bind(this, prop, asc));
        }
        // default sort by value
        return out.sort(OrderByPipe.simpleSort.bind(this));
    };
    /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    OrderByPipe.simpleSort = /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        return isString(a) && isString(b) ? a.toLowerCase().localeCompare(b.toLowerCase()) : a - b;
    };
    /**
     * @private
     * @param {?} prop
     * @param {?} asc
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    OrderByPipe.orderCompare = /**
     * @private
     * @param {?} prop
     * @param {?} asc
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (prop, asc, a, b) {
        /** @type {?} */
        var first = extractDeepPropertyByMapKey(a, prop);
        /** @type {?} */
        var second = extractDeepPropertyByMapKey(b, prop);
        if (first === second) {
            return 0;
        }
        if (isUndefined(first) || first === '') {
            return 1;
        }
        if (isUndefined(second) || second === '') {
            return -1;
        }
        if (isString(first) && isString(second)) {
            /** @type {?} */
            var pos = first.toLowerCase().localeCompare(second.toLowerCase());
            return asc ? pos : -pos;
        }
        return asc ? first - second : second - first;
    };
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    OrderByPipe.extractFromConfig = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var sign = config.substr(0, 1);
        /** @type {?} */
        var prop = config.replace(/^[-+]/, '');
        /** @type {?} */
        var asc = sign !== '-';
        return [prop, asc, sign];
    };
    OrderByPipe.decorators = [
        { type: Pipe, args: [{ name: 'orderBy' },] }
    ];
    return OrderByPipe;
}());
export { OrderByPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItYnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYXJyYXkvb3JkZXItYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXhGO0lBQUE7SUFxRkEsQ0FBQzs7Ozs7O0lBaEZDLCtCQUFTOzs7OztJQUFULFVBQVUsS0FBVSxFQUFFLE1BQVk7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDekIsT0FBTyxLQUFLLENBQUM7U0FDZDs7WUFFSyxHQUFHLG9CQUFPLEtBQUssQ0FBQztRQUV0Qiw4QkFBOEI7UUFDOUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sR0FBRyxDQUFDLElBQUk7Ozs7O1lBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQzs7b0JBQ2IsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNO2dCQUN2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO29CQUNwQixJQUFBLGdFQUFzRCxFQUFyRCxZQUFJLEVBQUUsV0FBK0M7O3dCQUN0RCxHQUFHLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ3JELElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTt3QkFDYixPQUFPLEdBQUcsQ0FBQztxQkFDWjtpQkFDRjtnQkFFRCxPQUFPLENBQUMsQ0FBQztZQUNYLENBQUMsRUFBQyxDQUFDO1NBQ0o7UUFFRCxrQ0FBa0M7UUFDbEMsSUFBSSxRQUFRLENBQUMsTUFBTSxD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RkQsSUFxRkM7U0FwRlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleSwgaXNTdHJpbmcsIGlzVW5kZWZpbmVkIH0gZnJvbSAnLi4vaGVscGVycy9oZWxwZXJzJztcblxuQFBpcGUoeyBuYW1lOiAnb3JkZXJCeScgfSlcbmV4cG9ydCBjbGFzcyBPcmRlckJ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueVtdLCBjb25maWc/OiBhbnkpOiBhbnlbXTtcbiAgdHJhbnNmb3JtPFQ+KGlucHV0OiBULCBjb25maWc/OiBhbnkpOiBUO1xuXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBjb25maWc/OiBhbnkpOiBhbnkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBjb25zdCBvdXQgPSBbLi4uaW5wdXRdO1xuXG4gICAgLy8gc29ydCBieSBtdWx0aXBsZSBwcm9wZXJ0aWVzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnKSkge1xuICAgICAgcmV0dXJuIG91dC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGNvbnN0IGwgPSBjb25maWcubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgIGNvbnN0IFtwcm9wLCBhc2NdID0gT3JkZXJCeVBpcGUuZXh0cmFjdEZyb21Db25maWcoY29uZmlnW2ldKTtcbiAgICAgICAgICBjb25zdCBwb3MgPSBPcmRlckJ5UGlwZS5vcmRlckNvbXBhcmUocHJvcCwgYXNjLCBhLCBiKTtcbiAgICAgICAgICBpZiAocG9zICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gc29ydCBieSBhIHNpbmdsZSBwcm9wZXJ0eSB2YWx1ZVxuICAgIGlmIChpc1N0cmluZyhjb25maWcpKSB7XG4gICAgICBjb25zdCBbcHJvcCwgYXNjLCBzaWduXSA9IE9yZGVyQnlQaXBlLmV4dHJhY3RGcm9tQ29uZmlnKGNvbmZpZyk7XG5cbiAgICAgIGlmIChjb25maWcubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzd2l0Y2gtZGVmYXVsdFxuICAgICAgICBzd2l0Y2ggKHNpZ24pIHtcbiAgICAgICAgICBjYXNlICcrJzpcbiAgICAgICAgICAgIHJldHVybiBvdXQuc29ydChPcmRlckJ5UGlwZS5zaW1wbGVTb3J0LmJpbmQodGhpcykpO1xuICAgICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgcmV0dXJuIG91dC5zb3J0KE9yZGVyQnlQaXBlLnNpbXBsZVNvcnQuYmluZCh0aGlzKSkucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXQuc29ydChPcmRlckJ5UGlwZS5vcmRlckNvbXBhcmUuYmluZCh0aGlzLCBwcm9wLCBhc2MpKTtcbiAgICB9XG5cbiAgICAvLyBkZWZhdWx0IHNvcnQgYnkgdmFsdWVcbiAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUuc2ltcGxlU29ydC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHNpbXBsZVNvcnQoYTogYW55LCBiOiBhbnkpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcoYSkgJiYgaXNTdHJpbmcoYikgPyBhLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShiLnRvTG93ZXJDYXNlKCkpIDogYSAtIGI7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBvcmRlckNvbXBhcmUocHJvcDogc3RyaW5nLCBhc2M6IGJvb2xlYW4sIGE6IGFueSwgYjogYW55KSB7XG4gICAgY29uc3QgZmlyc3QgPSBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkoYSwgcHJvcCk7XG4gICAgY29uc3Qgc2Vjb25kID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KGIsIHByb3ApO1xuXG4gICAgaWYgKGZpcnN0ID09PSBzZWNvbmQpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChmaXJzdCkgfHwgZmlyc3QgPT09ICcnKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICBpZiAoaXNVbmRlZmluZWQoc2Vjb25kKSB8fCBzZWNvbmQgPT09ICcnKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgaWYgKGlzU3RyaW5nKGZpcnN0KSAmJiBpc1N0cmluZyhzZWNvbmQpKSB7XG4gICAgICBjb25zdCBwb3MgPSBmaXJzdC50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoc2Vjb25kLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICByZXR1cm4gYXNjID8gcG9zIDogLXBvcztcbiAgICB9XG5cbiAgICByZXR1cm4gYXNjID8gZmlyc3QgLSBzZWNvbmQgOiBzZWNvbmQgLSBmaXJzdDtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGV4dHJhY3RGcm9tQ29uZmlnKGNvbmZpZzogYW55KSB7XG4gICAgY29uc3Qgc2lnbiA9IGNvbmZpZy5zdWJzdHIoMCwgMSk7XG4gICAgY29uc3QgcHJvcCA9IGNvbmZpZy5yZXBsYWNlKC9eWy0rXS8sICcnKTtcbiAgICBjb25zdCBhc2MgPSBzaWduICE9PSAnLSc7XG5cbiAgICByZXR1cm4gW3Byb3AsIGFzYywgc2lnbl07XG4gIH1cbn1cbiJdfQ==