/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, extractDeepPropertyByParentMapKey, isBoolean, isNumberFinite, isString, isUndefined, } from '../helpers/helpers';
// tslint:disable no-bitwise
var FilterByPipe = /** @class */ (function () {
    function FilterByPipe() {
    }
    /**
     * @param {?} input
     * @param {?} props
     * @param {?=} search
     * @param {?=} strict
     * @return {?}
     */
    FilterByPipe.prototype.transform = /**
     * @param {?} input
     * @param {?} props
     * @param {?=} search
     * @param {?=} strict
     * @return {?}
     */
    function (input, props, search, strict) {
        if (search === void 0) { search = ''; }
        if (strict === void 0) { strict = false; }
        if (!Array.isArray(input) ||
            (!Array.isArray(search) && !isString(search) && !isNumberFinite(search) && !isBoolean(search))) {
            return input;
        }
        /** @type {?} */
        var terms = String(search)
            .toLowerCase()
            .split(',');
        return input.filter((/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            return props.some((/**
             * @param {?} prop
             * @return {?}
             */
            function (prop) {
                return terms.some((/**
                 * @param {?} term
                 * @return {?}
                 */
                function (term) {
                    /** @type {?} */
                    var value = extractDeepPropertyByMapKey(obj, prop);
                    /* tslint:disable */
                    var _a = extractDeepPropertyByParentMapKey(obj, prop), props = _a.props, tail = _a.tail;
                    if (isUndefined(value) && !isUndefined(props) && Array.isArray(props)) {
                        return props.some((/**
                         * @param {?} parent
                         * @return {?}
                         */
                        function (parent) {
                            /** @type {?} */
                            var str = String(parent[tail]).toLowerCase();
                            return strict ? str === term : !!~str.indexOf(term);
                        }));
                    }
                    if (isUndefined(value)) {
                        return false;
                    }
                    /** @type {?} */
                    var strValue = String(value).toLowerCase();
                    return strict ? term === strValue : !!~strValue.indexOf(term);
                }));
            }));
        }));
    };
    FilterByPipe.decorators = [
        { type: Pipe, args: [{ name: 'filterBy' },] }
    ];
    return FilterByPipe;
}());
export { FilterByPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXBpcGVzLyIsInNvdXJjZXMiOlsic3JjL3BpcGVzL2FycmF5L2ZpbHRlci1ieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUNMLDJCQUEyQixFQUMzQixpQ0FBaUMsRUFDakMsU0FBUyxFQUNULGNBQWMsRUFDZCxRQUFRLEVBQ1IsV0FBVyxHQUNaLE1BQU0sb0JBQW9CLENBQUM7O0FBRzVCO0lBQUE7SUEwQ0EsQ0FBQzs7Ozs7Ozs7SUF0Q0MsZ0NBQVM7Ozs7Ozs7SUFBVCxVQUFVLEtBQVUsRUFBRSxLQUFvQixFQUFFLE1BQWdCLEVBQUUsTUFBdUI7UUFBekMsdUJBQUEsRUFBQSxXQUFnQjtRQUFFLHVCQUFBLEVBQUEsY0FBdUI7UUFDbkYsSUFDRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQzlGO1lBQ0EsT0FBTyxLQUFLLENBQUM7U0FDZDs7WUFFSyxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQzthQUN6QixXQUFXLEVBQUU7YUFDYixLQUFLLENBQUMsR0FBRyxDQUFDO1FBRWIsT0FBTyxLQUFLLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsR0FBRztZQUNyQixPQUFPLEtBQUssQ0FBQyxJQUFJOzs7O1lBQUMsVUFBQSxJQUFJO2dCQUNwQixPQUFPLEtBQUssQ0FBQyxJQUFJOzs7O2dCQUFDLFVBQUEsSUFBSTs7d0JBQ2QsS0FBSyxHQUFHLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUM7O29CQUU5QyxJQUFBLGlEQUE4RCxFQUE1RCxnQkFBSyxFQUFFLGNBQXFEO29CQUVwRSxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO3dCQUNyRSxPQUFPLEtBQUssQ0FBQyxJQUFJOzs7O3dCQUFDLFVBQUEsTUFBTTs7Z0NBQ2hCLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFOzRCQUU5QyxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDdEQsQ0FBQyxFQUFDLENBQUM7cUJBQ0o7b0JBRUQsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7d0JBQ3RCLE9BQU8sS0FBSyxDQUFDO3FCQUNkOzt3QkFFSyxRQUFRLEdBQVcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRTtvQkFFcEQsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hFLENBQUMsRUFBQyxDQUFDO1lBQ0wsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7O2dCQXpDRixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFOztJQTBDMUIsbUJBQUM7Q0FBQSxBQTFDRCxJQTBDQztTQXpDWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5LFxuICBleHRyYWN0RGVlcFByb3BlcnR5QnlQYXJlbnRNYXBLZXksXG4gIGlzQm9vbGVhbixcbiAgaXNOdW1iZXJGaW5pdGUsXG4gIGlzU3RyaW5nLFxuICBpc1VuZGVmaW5lZCxcbn0gZnJvbSAnLi4vaGVscGVycy9oZWxwZXJzJztcblxuLy8gdHNsaW50OmRpc2FibGUgbm8tYml0d2lzZVxuQFBpcGUoeyBuYW1lOiAnZmlsdGVyQnknIH0pXG5leHBvcnQgY2xhc3MgRmlsdGVyQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55W10sIHByb3BzOiBBcnJheTxzdHJpbmc+LCBzZWFyY2g/OiBhbnksIHN0cmljdD86IGJvb2xlYW4pOiBhbnlbXTtcbiAgdHJhbnNmb3JtPFQ+KGlucHV0OiBULCBwcm9wczogQXJyYXk8c3RyaW5nPiwgc2VhcmNoPzogYW55LCBzdHJpY3Q/OiBib29sZWFuKTogVDtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIHByb3BzOiBBcnJheTxzdHJpbmc+LCBzZWFyY2g6IGFueSA9ICcnLCBzdHJpY3Q6IGJvb2xlYW4gPSBmYWxzZSk6IGFueSB7XG4gICAgaWYgKFxuICAgICAgIUFycmF5LmlzQXJyYXkoaW5wdXQpIHx8XG4gICAgICAoIUFycmF5LmlzQXJyYXkoc2VhcmNoKSAmJiAhaXNTdHJpbmcoc2VhcmNoKSAmJiAhaXNOdW1iZXJGaW5pdGUoc2VhcmNoKSAmJiAhaXNCb29sZWFuKHNlYXJjaCkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgY29uc3QgdGVybXMgPSBTdHJpbmcoc2VhcmNoKVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC5zcGxpdCgnLCcpO1xuXG4gICAgcmV0dXJuIGlucHV0LmZpbHRlcihvYmogPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnNvbWUocHJvcCA9PiB7XG4gICAgICAgIHJldHVybiB0ZXJtcy5zb21lKHRlcm0gPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KG9iaiwgcHJvcCk7XG4gICAgICAgICAgLyogdHNsaW50OmRpc2FibGUgKi9cbiAgICAgICAgICBjb25zdCB7IHByb3BzLCB0YWlsIH0gPSBleHRyYWN0RGVlcFByb3BlcnR5QnlQYXJlbnRNYXBLZXkob2JqLCBwcm9wKTtcblxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkgJiYgIWlzVW5kZWZpbmVkKHByb3BzKSAmJiBBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzLnNvbWUocGFyZW50ID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qgc3RyID0gU3RyaW5nKHBhcmVudFt0YWlsXSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICByZXR1cm4gc3RyaWN0ID8gc3RyID09PSB0ZXJtIDogISF+c3RyLmluZGV4T2YodGVybSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgc3RyVmFsdWU6IHN0cmluZyA9IFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgIHJldHVybiBzdHJpY3QgPyB0ZXJtID09PSBzdHJWYWx1ZSA6ICEhfnN0clZhbHVlLmluZGV4T2YodGVybSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==