/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, isFunction } from '../helpers/helpers';
var GroupByPipe = /** @class */ (function () {
    function GroupByPipe() {
    }
    /**
     * @param {?} input
     * @param {?=} discriminator
     * @param {?=} delimiter
     * @return {?}
     */
    GroupByPipe.prototype.transform = /**
     * @param {?} input
     * @param {?=} discriminator
     * @param {?=} delimiter
     * @return {?}
     */
    function (input, discriminator, delimiter) {
        if (discriminator === void 0) { discriminator = []; }
        if (delimiter === void 0) { delimiter = '|'; }
        if (!Array.isArray(input)) {
            return input;
        }
        return this.groupBy(input, discriminator, delimiter);
    };
    /**
     * @private
     * @param {?} list
     * @param {?} discriminator
     * @param {?} delimiter
     * @return {?}
     */
    GroupByPipe.prototype.groupBy = /**
     * @private
     * @param {?} list
     * @param {?} discriminator
     * @param {?} delimiter
     * @return {?}
     */
    function (list, discriminator, delimiter) {
        var _this = this;
        return list.reduce((/**
         * @param {?} acc
         * @param {?} payload
         * @return {?}
         */
        function (acc, payload) {
            /** @type {?} */
            var key = _this.extractKeyByDiscriminator(discriminator, payload, delimiter);
            acc[key] = Array.isArray(acc[key]) ? acc[key].concat([payload]) : [payload];
            return acc;
        }), {});
    };
    /**
     * @private
     * @param {?} discriminator
     * @param {?} payload
     * @param {?} delimiter
     * @return {?}
     */
    GroupByPipe.prototype.extractKeyByDiscriminator = /**
     * @private
     * @param {?} discriminator
     * @param {?} payload
     * @param {?} delimiter
     * @return {?}
     */
    function (discriminator, payload, delimiter) {
        if (isFunction(discriminator)) {
            return ((/** @type {?} */ (discriminator)))(payload);
        }
        if (Array.isArray(discriminator)) {
            return discriminator.map((/**
             * @param {?} k
             * @return {?}
             */
            function (k) { return extractDeepPropertyByMapKey(payload, k); })).join(delimiter);
        }
        return extractDeepPropertyByMapKey(payload, (/** @type {?} */ (discriminator)));
    };
    GroupByPipe.decorators = [
        { type: Pipe, args: [{ name: 'groupBy' },] }
    ];
    return GroupByPipe;
}());
export { GroupByPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtYnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYXJyYXkvZ3JvdXAtYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU3RTtJQUFBO0lBK0JBLENBQUM7Ozs7Ozs7SUE3QkMsK0JBQVM7Ozs7OztJQUFULFVBQVUsS0FBVSxFQUFFLGFBQXVCLEVBQUUsU0FBdUI7UUFBaEQsOEJBQUEsRUFBQSxrQkFBdUI7UUFBRSwwQkFBQSxFQUFBLGVBQXVCO1FBQ3BFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7Ozs7OztJQUVPLDZCQUFPOzs7Ozs7O0lBQWYsVUFBZ0IsSUFBVyxFQUFFLGFBQWtCLEVBQUUsU0FBaUI7UUFBbEUsaUJBUUM7UUFQQyxPQUFPLElBQUksQ0FBQyxNQUFNOzs7OztRQUFDLFVBQUMsR0FBUSxFQUFFLE9BQWU7O2dCQUNyQyxHQUFHLEdBQUcsS0FBSSxDQUFDLHlCQUF5QixDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDO1lBRTdFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUU1RSxPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUMsR0FBRSxFQUFFLENBQUMsQ0FBQztJQUNULENBQUM7Ozs7Ozs7O0lBRU8sK0NBQXlCOzs7Ozs7O0lBQWpDLFVBQWtDLGFBQWtCLEVBQUUsT0FBZSxFQUFFLFNBQWlCO1FBQ3RGLElBQUksVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzdCLE9BQU8sQ0FBQyxtQkFBVSxhQUFhLEVBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzNDO1FBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sYUFBYSxDQUFDLEdBQUc7Ozs7WUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBdkMsQ0FBdUMsRUFBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN4RjtRQUVELE9BQU8sMkJBQTJCLENBQUMsT0FBTyxFQUFFLG1CQUFRLGFBQWEsRUFBQSxDQUFDLENBQUM7SUFDckUsQ0FBQzs7Z0JBOUJGLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7O0lBK0J6QixrQkFBQztDQUFBLEFBL0JELElBK0JDO1NBOUJZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXksIGlzRnVuY3Rpb24gfSBmcm9tICcuLi9oZWxwZXJzL2hlbHBlcnMnO1xuXG5AUGlwZSh7IG5hbWU6ICdncm91cEJ5JyB9KVxuZXhwb3J0IGNsYXNzIEdyb3VwQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBkaXNjcmltaW5hdG9yOiBhbnkgPSBbXSwgZGVsaW1pdGVyOiBzdHJpbmcgPSAnfCcpOiBhbnkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ncm91cEJ5KGlucHV0LCBkaXNjcmltaW5hdG9yLCBkZWxpbWl0ZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBncm91cEJ5KGxpc3Q6IGFueVtdLCBkaXNjcmltaW5hdG9yOiBhbnksIGRlbGltaXRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGxpc3QucmVkdWNlKChhY2M6IGFueSwgcGF5bG9hZDogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB0aGlzLmV4dHJhY3RLZXlCeURpc2NyaW1pbmF0b3IoZGlzY3JpbWluYXRvciwgcGF5bG9hZCwgZGVsaW1pdGVyKTtcblxuICAgICAgYWNjW2tleV0gPSBBcnJheS5pc0FycmF5KGFjY1trZXldKSA/IGFjY1trZXldLmNvbmNhdChbcGF5bG9hZF0pIDogW3BheWxvYWRdO1xuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEtleUJ5RGlzY3JpbWluYXRvcihkaXNjcmltaW5hdG9yOiBhbnksIHBheWxvYWQ6IHN0cmluZywgZGVsaW1pdGVyOiBzdHJpbmcpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihkaXNjcmltaW5hdG9yKSkge1xuICAgICAgcmV0dXJuICg8RnVuY3Rpb24+ZGlzY3JpbWluYXRvcikocGF5bG9hZCk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGlzY3JpbWluYXRvcikpIHtcbiAgICAgIHJldHVybiBkaXNjcmltaW5hdG9yLm1hcChrID0+IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShwYXlsb2FkLCBrKSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkocGF5bG9hZCwgPHN0cmluZz5kaXNjcmltaW5hdG9yKTtcbiAgfVxufVxuIl19