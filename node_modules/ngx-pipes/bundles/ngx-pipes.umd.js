(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-pipes', ['exports', '@angular/core'], factory) :
    (factory((global['ngx-pipes'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DiffPipe = /** @class */ (function () {
        function DiffPipe() {
        }
        /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
        DiffPipe.prototype.transform = /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
            function (input) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!Array.isArray(input)) {
                    return input;
                }
                // tslint:disable-next-line no-bitwise
                return args.reduce(( /**
                 * @param {?} d
                 * @param {?} c
                 * @return {?}
                 */function (d, c) {
                    return d.filter(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) { return !~c.indexOf(e); }));
                }), input);
            };
        DiffPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'diff' },] }
        ];
        return DiffPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InitialPipe = /** @class */ (function () {
        function InitialPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} num
         * @return {?}
         */
        InitialPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} num
         * @return {?}
         */
            function (input, num) {
                if (num === void 0) {
                    num = 0;
                }
                return Array.isArray(input) ? input.slice(0, input.length - num) : input;
            };
        InitialPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'initial' },] }
        ];
        return InitialPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FlattenPipe = /** @class */ (function () {
        function FlattenPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} shallow
         * @return {?}
         */
        FlattenPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} shallow
         * @return {?}
         */
            function (input, shallow) {
                if (shallow === void 0) {
                    shallow = false;
                }
                if (!Array.isArray(input)) {
                    return input;
                }
                return shallow ? [].concat.apply([], input) : this.flatten(input);
            };
        /**
         * @private
         * @param {?} array
         * @return {?}
         */
        FlattenPipe.prototype.flatten = /**
         * @private
         * @param {?} array
         * @return {?}
         */
            function (array) {
                var _this = this;
                return array.reduce(( /**
                 * @param {?} arr
                 * @param {?} elm
                 * @return {?}
                 */function (arr, elm) {
                    if (Array.isArray(elm)) {
                        return arr.concat(_this.flatten(elm));
                    }
                    return arr.concat(elm);
                }), []);
            };
        FlattenPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'flatten' },] }
        ];
        return FlattenPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IntersectionPipe = /** @class */ (function () {
        function IntersectionPipe() {
        }
        /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
        IntersectionPipe.prototype.transform = /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
            function (input) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!Array.isArray(input)) {
                    return input;
                }
                // tslint:disable-next-line no-bitwise
                return args.reduce(( /**
                 * @param {?} n
                 * @param {?} c
                 * @return {?}
                 */function (n, c) {
                    return n.filter(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) { return !!~c.indexOf(e); }));
                }), input);
            };
        IntersectionPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'intersection' },] }
        ];
        return IntersectionPipe;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function isUndefined(value) {
        return typeof value === 'undefined';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isFunction(value) {
        return typeof value === 'function';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNumber(value) {
        return typeof value === 'number';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isString(value) {
        return typeof value === 'string';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isBoolean(value) {
        return typeof value === 'boolean';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isObject(value) {
        return value !== null && typeof value === 'object';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNumberFinite(value) {
        return isNumber(value) && isFinite(value);
    }
    /**
     * @param {?} letter
     * @return {?}
     */
    function isVowel(letter) {
        /** @type {?} */
        var vowels = ['a', 'e', 'i', 'o', 'u'];
        return vowels.indexOf(letter) !== -1;
    }
    /**
     * @param {?} text
     * @return {?}
     */
    function ucFirst(text) {
        var _a = __read(text.split(/\s/g)), part = _a[0], split = _a.slice(1);
        /** @type {?} */
        var ucd = part
            .toLowerCase()
            .split(/(?=['|-])/g)
            .map(( /**
     * @param {?} word
     * @return {?}
     */function (word) {
            return word.indexOf('-') + word.indexOf("'") > -2
                ? word.slice(0, 2).toUpperCase() + word.slice(2)
                : word.slice(0, 1).toUpperCase() + word.slice(1);
        }))
            .join('');
        return __spread([ucd], split).join(' ');
    }
    /**
     * @param {?} num
     * @param {?} precision
     * @return {?}
     */
    function applyPrecision(num, precision) {
        if (precision <= 0) {
            return Math.round(num);
        }
        /** @type {?} */
        var tho = Math.pow(10, precision);
        return Math.round(num * tho) / tho;
    }
    /**
     * @param {?} obj
     * @param {?} map
     * @return {?}
     */
    function extractDeepPropertyByMapKey(obj, map) {
        /** @type {?} */
        var keys = map.split('.');
        /** @type {?} */
        var head = keys.shift();
        return keys.reduce(( /**
         * @param {?} prop
         * @param {?} key
         * @return {?}
         */function (prop, key) {
            return !isUndefined(prop) && !isUndefined(prop[key]) ? prop[key] : undefined;
        }), obj[head || '']);
    }
    /**
     * @param {?} obj
     * @param {?} map
     * @return {?}
     */
    function extractDeepPropertyByParentMapKey(obj, map) {
        /** @type {?} */
        var keys = map.split('.');
        /** @type {?} */
        var tail = keys.pop();
        /** @type {?} */
        var props = extractDeepPropertyByMapKey(obj, keys.join('.'));
        return { props: props, tail: tail };
    }
    /**
     * @param {?} obj
     * @param {?} other
     * @return {?}
     */
    function getKeysTwoObjects(obj, other) {
        return __spread(Object.keys(obj), Object.keys(other)).filter(( /**
         * @param {?} key
         * @param {?} index
         * @param {?} array
         * @return {?}
         */function (key, index, array) { return array.indexOf(key) === index; }));
    }
    /**
     * @param {?} obj
     * @param {?} other
     * @return {?}
     */
    function isDeepEqual(obj, other) {
        if (!isObject(obj) || !isObject(other)) {
            return obj === other;
        }
        return getKeysTwoObjects(obj, other).every(( /**
         * @param {?} key
         * @return {?}
         */function (key) {
            if (!isObject(obj[key]) && !isObject(other[key])) {
                return obj[key] === other[key];
            }
            if (!isObject(obj[key]) || !isObject(other[key])) {
                return false;
            }
            return isDeepEqual(obj[key], other[key]);
        }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ReversePipe = /** @class */ (function () {
        function ReversePipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        ReversePipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (isString(input)) {
                    return input
                        .split('')
                        .reverse()
                        .join('');
                }
                return Array.isArray(input) ? input.slice().reverse() : input;
            };
        ReversePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'reverse' },] }
        ];
        return ReversePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TailPipe = /** @class */ (function () {
        function TailPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} num
         * @return {?}
         */
        TailPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} num
         * @return {?}
         */
            function (input, num) {
                if (num === void 0) {
                    num = 0;
                }
                return Array.isArray(input) ? input.slice(num) : input;
            };
        TailPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'tail' },] }
        ];
        return TailPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TrurthifyPipe = /** @class */ (function () {
        function TrurthifyPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        TrurthifyPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return Array.isArray(input) ? input.filter(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) { return !!e; })) : input;
            };
        TrurthifyPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'truthify' },] }
        ];
        return TrurthifyPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UnionPipe = /** @class */ (function () {
        function UnionPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} args
         * @return {?}
         */
        UnionPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} args
         * @return {?}
         */
            function (input, args) {
                if (args === void 0) {
                    args = [];
                }
                if (!Array.isArray(input) || !Array.isArray(args)) {
                    return input;
                }
                return args.reduce(( /**
                 * @param {?} newArr
                 * @param {?} currArr
                 * @return {?}
                 */function (newArr, currArr) {
                    return newArr.concat(currArr.reduce(( /**
                     * @param {?} noDupArr
                     * @param {?} curr
                     * @return {?}
                     */function (noDupArr, curr) {
                        // tslint:disable-next-line:no-bitwise
                        return !~noDupArr.indexOf(curr) && !~newArr.indexOf(curr) ? noDupArr.concat([curr]) : noDupArr;
                    }), []));
                }), input);
            };
        UnionPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'union' },] }
        ];
        return UnionPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UniquePipe = /** @class */ (function () {
        function UniquePipe() {
        }
        /**
         * @param {?} input
         * @param {?=} propertyName
         * @return {?}
         */
        UniquePipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} propertyName
         * @return {?}
         */
            function (input, propertyName) {
                /** @type {?} */
                var uniques = [];
                return Array.isArray(input)
                    ? isUndefined(propertyName)
                        ? input.filter(( /**
                         * @param {?} e
                         * @param {?} i
                         * @return {?}
                         */function (e, i) { return input.indexOf(e) === i; }))
                        : input.filter(( /**
                         * @param {?} e
                         * @param {?} i
                         * @return {?}
                         */function (e, i) {
                            /** @type {?} */
                            var value = extractDeepPropertyByMapKey(e, propertyName);
                            value = isObject(value) ? JSON.stringify(value) : value;
                            if (isUndefined(value) || uniques[value]) {
                                return false;
                            }
                            uniques[value] = true;
                            return true;
                        }))
                    : input;
            };
        UniquePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'unique' },] }
        ];
        return UniquePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WithoutPipe = /** @class */ (function () {
        function WithoutPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} args
         * @return {?}
         */
        WithoutPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} args
         * @return {?}
         */
            function (input, args) {
                if (args === void 0) {
                    args = [];
                }
                return Array.isArray(input)
                    ? // tslint:disable-next-line:no-bitwise
                        input.filter(( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) { return !~args.indexOf(e); }))
                    : input;
            };
        WithoutPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'without' },] }
        ];
        return WithoutPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PluckPipe = /** @class */ (function () {
        function PluckPipe() {
        }
        /**
         * @param {?} input
         * @param {?} map
         * @return {?}
         */
        PluckPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} map
         * @return {?}
         */
            function (input, map) {
                if (Array.isArray(input)) {
                    return input.map(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) { return extractDeepPropertyByMapKey(e, map); }));
                }
                return isObject(input) ? extractDeepPropertyByMapKey(input, map) : input;
            };
        PluckPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'pluck', pure: false },] }
        ];
        return PluckPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShufflePipe = /** @class */ (function () {
        function ShufflePipe() {
        }
        // Using a version of the Fisher-Yates shuffle algorithm
        // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
        // Using a version of the Fisher-Yates shuffle algorithm
        // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
        /**
         * @param {?} input
         * @return {?}
         */
        ShufflePipe.prototype.transform =
            // Using a version of the Fisher-Yates shuffle algorithm
            // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
            /**
             * @param {?} input
             * @return {?}
             */
            function (input) {
                var _a;
                if (!Array.isArray(input)) {
                    return input;
                }
                /** @type {?} */
                var shuffled = __spread(input);
                /** @type {?} */
                var n = input.length - 1;
                for (var i = 0; i < n; ++i) {
                    /** @type {?} */
                    var j = Math.floor(Math.random() * (n - i + 1)) + i;
                    _a = __read([shuffled[j], shuffled[i]], 2), shuffled[i] = _a[0], shuffled[j] = _a[1];
                }
                return shuffled;
            };
        ShufflePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'shuffle' },] }
        ];
        return ShufflePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EveryPipe = /** @class */ (function () {
        function EveryPipe() {
        }
        /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
        EveryPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
            function (input, predicate) {
                return Array.isArray(input) ? input.every(predicate) : false;
            };
        EveryPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'every' },] }
        ];
        return EveryPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SomePipe = /** @class */ (function () {
        function SomePipe() {
        }
        /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
        SomePipe.prototype.transform = /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
            function (input, predicate) {
                return Array.isArray(input) ? input.some(predicate) : input;
            };
        SomePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'some' },] }
        ];
        return SomePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SamplePipe = /** @class */ (function () {
        function SamplePipe() {
        }
        /**
         * @param {?} input
         * @param {?=} len
         * @return {?}
         */
        SamplePipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} len
         * @return {?}
         */
            function (input, len) {
                if (len === void 0) {
                    len = 1;
                }
                if (!Array.isArray(input)) {
                    return input;
                }
                /** @type {?} */
                var sample = [];
                /** @type {?} */
                var tmp = __spread(input);
                /** @type {?} */
                var l = len < tmp.length ? len : tmp.length;
                for (var i = 0; i < l; ++i) {
                    sample = sample.concat(tmp.splice(Math.floor(Math.random() * tmp.length), 1));
                }
                return sample;
            };
        SamplePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'sample' },] }
        ];
        return SamplePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GroupByPipe = /** @class */ (function () {
        function GroupByPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} discriminator
         * @param {?=} delimiter
         * @return {?}
         */
        GroupByPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} discriminator
         * @param {?=} delimiter
         * @return {?}
         */
            function (input, discriminator, delimiter) {
                if (discriminator === void 0) {
                    discriminator = [];
                }
                if (delimiter === void 0) {
                    delimiter = '|';
                }
                if (!Array.isArray(input)) {
                    return input;
                }
                return this.groupBy(input, discriminator, delimiter);
            };
        /**
         * @private
         * @param {?} list
         * @param {?} discriminator
         * @param {?} delimiter
         * @return {?}
         */
        GroupByPipe.prototype.groupBy = /**
         * @private
         * @param {?} list
         * @param {?} discriminator
         * @param {?} delimiter
         * @return {?}
         */
            function (list, discriminator, delimiter) {
                var _this = this;
                return list.reduce(( /**
                 * @param {?} acc
                 * @param {?} payload
                 * @return {?}
                 */function (acc, payload) {
                    /** @type {?} */
                    var key = _this.extractKeyByDiscriminator(discriminator, payload, delimiter);
                    acc[key] = Array.isArray(acc[key]) ? acc[key].concat([payload]) : [payload];
                    return acc;
                }), {});
            };
        /**
         * @private
         * @param {?} discriminator
         * @param {?} payload
         * @param {?} delimiter
         * @return {?}
         */
        GroupByPipe.prototype.extractKeyByDiscriminator = /**
         * @private
         * @param {?} discriminator
         * @param {?} payload
         * @param {?} delimiter
         * @return {?}
         */
            function (discriminator, payload, delimiter) {
                if (isFunction(discriminator)) {
                    return (( /** @type {?} */(discriminator)))(payload);
                }
                if (Array.isArray(discriminator)) {
                    return discriminator.map(( /**
                     * @param {?} k
                     * @return {?}
                     */function (k) { return extractDeepPropertyByMapKey(payload, k); })).join(delimiter);
                }
                return extractDeepPropertyByMapKey(payload, ( /** @type {?} */(discriminator)));
            };
        GroupByPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'groupBy' },] }
        ];
        return GroupByPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable no-bitwise
    var FilterByPipe = /** @class */ (function () {
        function FilterByPipe() {
        }
        /**
         * @param {?} input
         * @param {?} props
         * @param {?=} search
         * @param {?=} strict
         * @return {?}
         */
        FilterByPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} props
         * @param {?=} search
         * @param {?=} strict
         * @return {?}
         */
            function (input, props, search, strict) {
                if (search === void 0) {
                    search = '';
                }
                if (strict === void 0) {
                    strict = false;
                }
                if (!Array.isArray(input) ||
                    (!Array.isArray(search) && !isString(search) && !isNumberFinite(search) && !isBoolean(search))) {
                    return input;
                }
                /** @type {?} */
                var terms = String(search)
                    .toLowerCase()
                    .split(',');
                return input.filter(( /**
                 * @param {?} obj
                 * @return {?}
                 */function (obj) {
                    return props.some(( /**
                     * @param {?} prop
                     * @return {?}
                     */function (prop) {
                        return terms.some(( /**
                         * @param {?} term
                         * @return {?}
                         */function (term) {
                            /** @type {?} */
                            var value = extractDeepPropertyByMapKey(obj, prop);
                            /* tslint:disable */
                            var _a = extractDeepPropertyByParentMapKey(obj, prop), props = _a.props, tail = _a.tail;
                            if (isUndefined(value) && !isUndefined(props) && Array.isArray(props)) {
                                return props.some(( /**
                                 * @param {?} parent
                                 * @return {?}
                                 */function (parent) {
                                    /** @type {?} */
                                    var str = String(parent[tail]).toLowerCase();
                                    return strict ? str === term : !!~str.indexOf(term);
                                }));
                            }
                            if (isUndefined(value)) {
                                return false;
                            }
                            /** @type {?} */
                            var strValue = String(value).toLowerCase();
                            return strict ? term === strValue : !!~strValue.indexOf(term);
                        }));
                    }));
                }));
            };
        FilterByPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'filterBy' },] }
        ];
        return FilterByPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OrderByPipe = /** @class */ (function () {
        function OrderByPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} config
         * @return {?}
         */
        OrderByPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} config
         * @return {?}
         */
            function (input, config) {
                if (!Array.isArray(input)) {
                    return input;
                }
                /** @type {?} */
                var out = __spread(input);
                // sort by multiple properties
                if (Array.isArray(config)) {
                    return out.sort(( /**
                     * @param {?} a
                     * @param {?} b
                     * @return {?}
                     */function (a, b) {
                        /** @type {?} */
                        var l = config.length;
                        for (var i = 0; i < l; ++i) {
                            var _a = __read(OrderByPipe.extractFromConfig(config[i]), 2), prop = _a[0], asc = _a[1];
                            /** @type {?} */
                            var pos = OrderByPipe.orderCompare(prop, asc, a, b);
                            if (pos !== 0) {
                                return pos;
                            }
                        }
                        return 0;
                    }));
                }
                // sort by a single property value
                if (isString(config)) {
                    var _a = __read(OrderByPipe.extractFromConfig(config), 3), prop = _a[0], asc = _a[1], sign = _a[2];
                    if (config.length === 1) {
                        // tslint:disable-next-line:switch-default
                        switch (sign) {
                            case '+':
                                return out.sort(OrderByPipe.simpleSort.bind(this));
                            case '-':
                                return out.sort(OrderByPipe.simpleSort.bind(this)).reverse();
                        }
                    }
                    return out.sort(OrderByPipe.orderCompare.bind(this, prop, asc));
                }
                // default sort by value
                return out.sort(OrderByPipe.simpleSort.bind(this));
            };
        /**
         * @private
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        OrderByPipe.simpleSort = /**
         * @private
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
            function (a, b) {
                return isString(a) && isString(b) ? a.toLowerCase().localeCompare(b.toLowerCase()) : a - b;
            };
        /**
         * @private
         * @param {?} prop
         * @param {?} asc
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        OrderByPipe.orderCompare = /**
         * @private
         * @param {?} prop
         * @param {?} asc
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
            function (prop, asc, a, b) {
                /** @type {?} */
                var first = extractDeepPropertyByMapKey(a, prop);
                /** @type {?} */
                var second = extractDeepPropertyByMapKey(b, prop);
                if (first === second) {
                    return 0;
                }
                if (isUndefined(first) || first === '') {
                    return 1;
                }
                if (isUndefined(second) || second === '') {
                    return -1;
                }
                if (isString(first) && isString(second)) {
                    /** @type {?} */
                    var pos = first.toLowerCase().localeCompare(second.toLowerCase());
                    return asc ? pos : -pos;
                }
                return asc ? first - second : second - first;
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        OrderByPipe.extractFromConfig = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                /** @type {?} */
                var sign = config.substr(0, 1);
                /** @type {?} */
                var prop = config.replace(/^[-+]/, '');
                /** @type {?} */
                var asc = sign !== '-';
                return [prop, asc, sign];
            };
        OrderByPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'orderBy' },] }
        ];
        return OrderByPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable use-pipe-transform-interface
    var GroupByImpurePipe = /** @class */ (function (_super) {
        __extends(GroupByImpurePipe, _super);
        function GroupByImpurePipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GroupByImpurePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'groupByImpure', pure: false },] }
        ];
        return GroupByImpurePipe;
    }(GroupByPipe));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable use-pipe-transform-interface
    var FilterByImpurePipe = /** @class */ (function (_super) {
        __extends(FilterByImpurePipe, _super);
        function FilterByImpurePipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FilterByImpurePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'filterByImpure', pure: false },] }
        ];
        return FilterByImpurePipe;
    }(FilterByPipe));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable use-pipe-transform-interface
    var OrderByImpurePipe = /** @class */ (function (_super) {
        __extends(OrderByImpurePipe, _super);
        function OrderByImpurePipe() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OrderByImpurePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'orderByImpure', pure: false },] }
        ];
        return OrderByImpurePipe;
    }(OrderByPipe));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RangePipe = /** @class */ (function () {
        function RangePipe() {
        }
        /**
         * @param {?=} start
         * @param {?=} count
         * @param {?=} step
         * @return {?}
         */
        RangePipe.prototype.transform = /**
         * @param {?=} start
         * @param {?=} count
         * @param {?=} step
         * @return {?}
         */
            function (start, count, step) {
                if (start === void 0) {
                    start = 1;
                }
                if (count === void 0) {
                    count = 0;
                }
                if (step === void 0) {
                    step = 1;
                }
                return Array(count)
                    .fill('')
                    .map(( /**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */function (v, i) { return step * i + start; }));
            };
        RangePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'range' },] }
        ];
        return RangePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ARRAY_PIPES = [
        DiffPipe,
        FlattenPipe,
        InitialPipe,
        IntersectionPipe,
        ReversePipe,
        TailPipe,
        TrurthifyPipe,
        UnionPipe,
        UniquePipe,
        WithoutPipe,
        PluckPipe,
        ShufflePipe,
        EveryPipe,
        SomePipe,
        SamplePipe,
        GroupByPipe,
        GroupByImpurePipe,
        FilterByPipe,
        FilterByImpurePipe,
        OrderByPipe,
        OrderByImpurePipe,
        RangePipe,
    ];
    var NgArrayPipesModule = /** @class */ (function () {
        function NgArrayPipesModule() {
        }
        NgArrayPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: ARRAY_PIPES,
                        imports: [],
                        exports: ARRAY_PIPES,
                    },] }
        ];
        return NgArrayPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var KeysPipe = /** @class */ (function () {
        function KeysPipe() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        KeysPipe.prototype.transform = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return Object.keys(obj);
            };
        KeysPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'keys' },] }
        ];
        return KeysPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ValuesPipe = /** @class */ (function () {
        function ValuesPipe() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        ValuesPipe.prototype.transform = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return Object.keys(obj).map(( /**
                 * @param {?} k
                 * @return {?}
                 */function (k) { return obj[k]; }));
            };
        ValuesPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'values' },] }
        ];
        return ValuesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PairsPipe = /** @class */ (function () {
        function PairsPipe() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        PairsPipe.prototype.transform = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return Object.keys(obj).map(( /**
                 * @param {?} k
                 * @return {?}
                 */function (k) { return [k, obj[k]]; }));
            };
        PairsPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'pairs' },] }
        ];
        return PairsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PickPipe = /** @class */ (function () {
        function PickPipe() {
        }
        /**
         * @param {?} obj
         * @param {...?} args
         * @return {?}
         */
        PickPipe.prototype.transform = /**
         * @param {?} obj
         * @param {...?} args
         * @return {?}
         */
            function (obj) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return args.reduce(( /**
                 * @param {?} o
                 * @param {?} k
                 * @return {?}
                 */function (o, k) {
                    var _a;
                    return Object.assign(o, (_a = {}, _a[k] = obj[k], _a));
                }), {});
            };
        PickPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'pick' },] }
        ];
        return PickPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OmitPipe = /** @class */ (function () {
        function OmitPipe() {
        }
        /**
         * @param {?} obj
         * @param {...?} args
         * @return {?}
         */
        OmitPipe.prototype.transform = /**
         * @param {?} obj
         * @param {...?} args
         * @return {?}
         */
            function (obj) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return (Object.keys(obj)
                    // tslint:disable-next-line:no-bitwise
                    .filter(( /**
             * @param {?} k
             * @return {?}
             */function (k) { return !~args.indexOf(k); }))
                    .reduce(( /**
             * @param {?} o
             * @param {?} k
             * @return {?}
             */function (o, k) {
                    var _a;
                    return Object.assign(o, (_a = {}, _a[k] = obj[k], _a));
                }), {}));
            };
        OmitPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'omit' },] }
        ];
        return OmitPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InvertPipe = /** @class */ (function () {
        function InvertPipe() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        InvertPipe.prototype.transform = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return Object.keys(obj).reduce(( /**
                 * @param {?} o
                 * @param {?} k
                 * @return {?}
                 */function (o, k) {
                    var _a;
                    return Object.assign(o, (_a = {}, _a[obj[k]] = k, _a));
                }), {});
            };
        InvertPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'invert' },] }
        ];
        return InvertPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InvertByPipe = /** @class */ (function () {
        function InvertByPipe() {
        }
        /**
         * @param {?} obj
         * @param {?=} cb
         * @return {?}
         */
        InvertByPipe.prototype.transform = /**
         * @param {?} obj
         * @param {?=} cb
         * @return {?}
         */
            function (obj, cb) {
                if (Array.isArray(obj) || !isObject(obj)) {
                    return obj;
                }
                return Object.keys(obj).reduce(( /**
                 * @param {?} o
                 * @param {?} k
                 * @return {?}
                 */function (o, k) {
                    var _a;
                    /** @type {?} */
                    var key = cb ? cb(obj[k]) : obj[k];
                    return Array.isArray(o[key]) ? (o[key].push(k), o) : Object.assign(o, (_a = {}, _a[key] = [k], _a));
                }), {});
            };
        InvertByPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'invertBy' },] }
        ];
        return InvertByPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DiffObjPipe = /** @class */ (function () {
        function DiffObjPipe() {
        }
        /**
         * @param {?} obj
         * @param {?=} original
         * @return {?}
         */
        DiffObjPipe.prototype.transform = /**
         * @param {?} obj
         * @param {?=} original
         * @return {?}
         */
            function (obj, original) {
                if (original === void 0) {
                    original = {};
                }
                if (Array.isArray(obj) || Array.isArray(original) || !isObject(obj) || !isObject(original)) {
                    return {};
                }
                return getKeysTwoObjects(obj, original).reduce(( /**
                 * @param {?} diff
                 * @param {?} key
                 * @return {?}
                 */function (diff, key) {
                    if (!isDeepEqual(original[key], obj[key])) {
                        diff[key] = obj[key];
                    }
                    return diff;
                }), {});
            };
        DiffObjPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'diffObj' },] }
        ];
        return DiffObjPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var OBJECT_PIPES = [KeysPipe, ValuesPipe, PairsPipe, PickPipe, InvertPipe, InvertByPipe, OmitPipe, DiffObjPipe];
    var NgObjectPipesModule = /** @class */ (function () {
        function NgObjectPipesModule() {
        }
        NgObjectPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: OBJECT_PIPES,
                        imports: [],
                        exports: OBJECT_PIPES,
                    },] }
        ];
        return NgObjectPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AorAnPipe = /** @class */ (function () {
        function AorAnPipe() {
            this.irregularMap = {
                herb: 'an',
                honor: 'an',
                honorable: 'an',
                hour: 'an',
                mba: 'an',
                msc: 'an',
                'm.sc.': 'an',
                unicorn: 'a',
            };
        }
        /**
         * @param {?} stringEntity
         * @return {?}
         */
        AorAnPipe.prototype.transform = /**
         * @param {?} stringEntity
         * @return {?}
         */
            function (stringEntity) {
                if (!stringEntity || stringEntity === '') {
                    return '';
                }
                else {
                    /** @type {?} */
                    var firstWord = stringEntity.trim().split(' ')[0];
                    if (this.irregularMap[firstWord.toLocaleLowerCase()]) {
                        return this.irregularMap[firstWord.toLocaleLowerCase()] + " " + stringEntity;
                    }
                    else {
                        return isVowel(stringEntity[0]) ? "an " + stringEntity : "a " + stringEntity;
                    }
                }
            };
        AorAnPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'aOrAn',
                    },] }
        ];
        return AorAnPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UcWordsPipe = /** @class */ (function () {
        function UcWordsPipe() {
        }
        /**
         * @param {?} text
         * @return {?}
         */
        UcWordsPipe.prototype.transform = /**
         * @param {?} text
         * @return {?}
         */
            function (text) {
                if (isString(text)) {
                    return text
                        .split(' ')
                        .map(( /**
                 * @param {?} sub
                 * @return {?}
                 */function (sub) { return ucFirst(sub); }))
                        .join(' ');
                }
                return text;
            };
        UcWordsPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'ucwords' },] }
        ];
        return UcWordsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LeftTrimPipe = /** @class */ (function () {
        function LeftTrimPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        LeftTrimPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = '\\s';
                }
                return isString(text) ? text.replace(new RegExp("^[" + chars + "]+"), '') : text;
            };
        LeftTrimPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'ltrim' },] }
        ];
        return LeftTrimPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RepeatPipe = /** @class */ (function () {
        function RepeatPipe() {
        }
        /**
         * @param {?} str
         * @param {?=} n
         * @param {?=} separator
         * @return {?}
         */
        RepeatPipe.prototype.transform = /**
         * @param {?} str
         * @param {?=} n
         * @param {?=} separator
         * @return {?}
         */
            function (str, n, separator) {
                if (n === void 0) {
                    n = 1;
                }
                if (separator === void 0) {
                    separator = '';
                }
                if (n <= 0) {
                    throw new RangeError();
                }
                return n === 1 ? str : this.repeat(str, n - 1, separator);
            };
        /**
         * @private
         * @param {?} str
         * @param {?} n
         * @param {?} separator
         * @return {?}
         */
        RepeatPipe.prototype.repeat = /**
         * @private
         * @param {?} str
         * @param {?} n
         * @param {?} separator
         * @return {?}
         */
            function (str, n, separator) {
                return isString(str) ? (n === 0 ? str : str + separator + this.repeat(str, n - 1, separator)) : str;
            };
        RepeatPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'repeat' },] }
        ];
        return RepeatPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RightTrimPipe = /** @class */ (function () {
        function RightTrimPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        RightTrimPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = '\\s';
                }
                return isString(text) ? text.replace(new RegExp("[" + chars + "]+$"), '') : text;
            };
        RightTrimPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'rtrim' },] }
        ];
        return RightTrimPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ScanPipe = /** @class */ (function () {
        function ScanPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} args
         * @return {?}
         */
        ScanPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} args
         * @return {?}
         */
            function (text, args) {
                if (args === void 0) {
                    args = [];
                }
                return isString(text)
                    ? text.replace(/\{(\d+)}/g, ( /**
                     * @param {?} match
                     * @param {?} index
                     * @return {?}
                     */function (match, index) { return (!isUndefined(args[index]) ? args[index] : match); }))
                    : text;
            };
        ScanPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'scan' },] }
        ];
        return ScanPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShortenPipe = /** @class */ (function () {
        function ShortenPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} length
         * @param {?=} suffix
         * @param {?=} wordBreak
         * @return {?}
         */
        ShortenPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} length
         * @param {?=} suffix
         * @param {?=} wordBreak
         * @return {?}
         */
            function (text, length, suffix, wordBreak) {
                if (length === void 0) {
                    length = 0;
                }
                if (suffix === void 0) {
                    suffix = '';
                }
                if (wordBreak === void 0) {
                    wordBreak = true;
                }
                if (!isString(text)) {
                    return text;
                }
                if (text.length > length) {
                    if (wordBreak) {
                        return text.slice(0, length) + suffix;
                    }
                    // tslint:disable-next-line:no-bitwise
                    if (!!~text.indexOf(' ', length)) {
                        return text.slice(0, text.indexOf(' ', length)) + suffix;
                    }
                }
                return text;
            };
        ShortenPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'shorten' },] }
        ];
        return ShortenPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StripTagsPipe = /** @class */ (function () {
        function StripTagsPipe() {
        }
        /**
         * @param {?} text
         * @param {...?} allowedTags
         * @return {?}
         */
        StripTagsPipe.prototype.transform = /**
         * @param {?} text
         * @param {...?} allowedTags
         * @return {?}
         */
            function (text) {
                var allowedTags = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    allowedTags[_i - 1] = arguments[_i];
                }
                return allowedTags.length > 0
                    ? text.replace(new RegExp("<(?!/?(" + allowedTags.join('|') + ")s*/?)[^>]+>", 'g'), '')
                    : text.replace(/<(?:.|\s)*?>/g, '');
            };
        StripTagsPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'stripTags' },] }
        ];
        return StripTagsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TrimPipe = /** @class */ (function () {
        function TrimPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        TrimPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = '\\s';
                }
                return isString(text) ? text.replace(new RegExp("^[" + chars + "]+|[" + chars + "]+$", 'g'), '') : text;
            };
        TrimPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'trim' },] }
        ];
        return TrimPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UcFirstPipe = /** @class */ (function () {
        function UcFirstPipe() {
        }
        /**
         * @param {?} text
         * @return {?}
         */
        UcFirstPipe.prototype.transform = /**
         * @param {?} text
         * @return {?}
         */
            function (text) {
                return isString(text) ? ucFirst(text) : text;
            };
        UcFirstPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'ucfirst' },] }
        ];
        return UcFirstPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SlugifyPipe = /** @class */ (function () {
        function SlugifyPipe() {
        }
        /**
         * @param {?} str
         * @return {?}
         */
        SlugifyPipe.prototype.transform = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                return isString(str)
                    ? str
                        .toLowerCase()
                        .trim()
                        .replace(/[^\w\-]+/g, ' ')
                        .replace(/\s+/g, '-')
                    : str;
            };
        SlugifyPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'slugify' },] }
        ];
        return SlugifyPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CamelizePipe = /** @class */ (function () {
        function CamelizePipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        CamelizePipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = '\\s';
                }
                if (!isString(text)) {
                    return text;
                }
                return text
                    .toLowerCase()
                    .split(/[-_\s]/g)
                    .filter(( /**
             * @param {?} v
             * @return {?}
             */function (v) { return !!v; }))
                    .map(( /**
             * @param {?} word
             * @param {?} key
             * @return {?}
             */function (word, key) {
                    return !key ? word : word.slice(0, 1).toUpperCase() + word.slice(1);
                }))
                    .join('');
            };
        CamelizePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'camelize' },] }
        ];
        return CamelizePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LatinisePipe = /** @class */ (function () {
        function LatinisePipe() {
            // Source: http://semplicewebsites.com/removing-accents-javascript
            // tslint:disable-next-line whitespace max-line-length object-literal-key-quotes
            this.latinMap = {
                Á: 'A',
                Ă: 'A',
                Ắ: 'A',
                Ặ: 'A',
                Ằ: 'A',
                Ẳ: 'A',
                Ẵ: 'A',
                Ǎ: 'A',
                Â: 'A',
                Ấ: 'A',
                Ậ: 'A',
                Ầ: 'A',
                Ẩ: 'A',
                Ẫ: 'A',
                Ä: 'A',
                Ǟ: 'A',
                Ȧ: 'A',
                Ǡ: 'A',
                Ạ: 'A',
                Ȁ: 'A',
                À: 'A',
                Ả: 'A',
                Ȃ: 'A',
                Ā: 'A',
                Ą: 'A',
                Å: 'A',
                Ǻ: 'A',
                Ḁ: 'A',
                Ⱥ: 'A',
                Ã: 'A',
                Ꜳ: 'AA',
                Æ: 'AE',
                Ǽ: 'AE',
                Ǣ: 'AE',
                Ꜵ: 'AO',
                Ꜷ: 'AU',
                Ꜹ: 'AV',
                Ꜻ: 'AV',
                Ꜽ: 'AY',
                Ḃ: 'B',
                Ḅ: 'B',
                Ɓ: 'B',
                Ḇ: 'B',
                Ƀ: 'B',
                Ƃ: 'B',
                Ć: 'C',
                Č: 'C',
                Ç: 'C',
                Ḉ: 'C',
                Ĉ: 'C',
                Ċ: 'C',
                Ƈ: 'C',
                Ȼ: 'C',
                Ď: 'D',
                Ḑ: 'D',
                Ḓ: 'D',
                Ḋ: 'D',
                Ḍ: 'D',
                Ɗ: 'D',
                Ḏ: 'D',
                ǲ: 'D',
                ǅ: 'D',
                Đ: 'D',
                Ƌ: 'D',
                Ǳ: 'DZ',
                Ǆ: 'DZ',
                É: 'E',
                Ĕ: 'E',
                Ě: 'E',
                Ȩ: 'E',
                Ḝ: 'E',
                Ê: 'E',
                Ế: 'E',
                Ệ: 'E',
                Ề: 'E',
                Ể: 'E',
                Ễ: 'E',
                Ḙ: 'E',
                Ë: 'E',
                Ė: 'E',
                Ẹ: 'E',
                Ȅ: 'E',
                È: 'E',
                Ẻ: 'E',
                Ȇ: 'E',
                Ē: 'E',
                Ḗ: 'E',
                Ḕ: 'E',
                Ę: 'E',
                Ɇ: 'E',
                Ẽ: 'E',
                Ḛ: 'E',
                Ꝫ: 'ET',
                Ḟ: 'F',
                Ƒ: 'F',
                Ǵ: 'G',
                Ğ: 'G',
                Ǧ: 'G',
                Ģ: 'G',
                Ĝ: 'G',
                Ġ: 'G',
                Ɠ: 'G',
                Ḡ: 'G',
                Ǥ: 'G',
                Ḫ: 'H',
                Ȟ: 'H',
                Ḩ: 'H',
                Ĥ: 'H',
                Ⱨ: 'H',
                Ḧ: 'H',
                Ḣ: 'H',
                Ḥ: 'H',
                Ħ: 'H',
                Í: 'I',
                Ĭ: 'I',
                Ǐ: 'I',
                Î: 'I',
                Ï: 'I',
                Ḯ: 'I',
                İ: 'I',
                Ị: 'I',
                Ȉ: 'I',
                Ì: 'I',
                Ỉ: 'I',
                Ȋ: 'I',
                Ī: 'I',
                Į: 'I',
                Ɨ: 'I',
                Ĩ: 'I',
                Ḭ: 'I',
                Ꝺ: 'D',
                Ꝼ: 'F',
                Ᵹ: 'G',
                Ꞃ: 'R',
                Ꞅ: 'S',
                Ꞇ: 'T',
                Ꝭ: 'IS',
                Ĵ: 'J',
                Ɉ: 'J',
                Ḱ: 'K',
                Ǩ: 'K',
                Ķ: 'K',
                Ⱪ: 'K',
                Ꝃ: 'K',
                Ḳ: 'K',
                Ƙ: 'K',
                Ḵ: 'K',
                Ꝁ: 'K',
                Ꝅ: 'K',
                Ĺ: 'L',
                Ƚ: 'L',
                Ľ: 'L',
                Ļ: 'L',
                Ḽ: 'L',
                Ḷ: 'L',
                Ḹ: 'L',
                Ⱡ: 'L',
                Ꝉ: 'L',
                Ḻ: 'L',
                Ŀ: 'L',
                Ɫ: 'L',
                ǈ: 'L',
                Ł: 'L',
                Ǉ: 'LJ',
                Ḿ: 'M',
                Ṁ: 'M',
                Ṃ: 'M',
                Ɱ: 'M',
                Ń: 'N',
                Ň: 'N',
                Ņ: 'N',
                Ṋ: 'N',
                Ṅ: 'N',
                Ṇ: 'N',
                Ǹ: 'N',
                Ɲ: 'N',
                Ṉ: 'N',
                Ƞ: 'N',
                ǋ: 'N',
                Ñ: 'N',
                Ǌ: 'NJ',
                Ó: 'O',
                Ŏ: 'O',
                Ǒ: 'O',
                Ô: 'O',
                Ố: 'O',
                Ộ: 'O',
                Ồ: 'O',
                Ổ: 'O',
                Ỗ: 'O',
                Ö: 'O',
                Ȫ: 'O',
                Ȯ: 'O',
                Ȱ: 'O',
                Ọ: 'O',
                Ő: 'O',
                Ȍ: 'O',
                Ò: 'O',
                Ỏ: 'O',
                Ơ: 'O',
                Ớ: 'O',
                Ợ: 'O',
                Ờ: 'O',
                Ở: 'O',
                Ỡ: 'O',
                Ȏ: 'O',
                Ꝋ: 'O',
                Ꝍ: 'O',
                Ō: 'O',
                Ṓ: 'O',
                Ṑ: 'O',
                Ɵ: 'O',
                Ǫ: 'O',
                Ǭ: 'O',
                Ø: 'O',
                Ǿ: 'O',
                Õ: 'O',
                Ṍ: 'O',
                Ṏ: 'O',
                Ȭ: 'O',
                Ƣ: 'OI',
                Ꝏ: 'OO',
                Ɛ: 'E',
                Ɔ: 'O',
                Ȣ: 'OU',
                Ṕ: 'P',
                Ṗ: 'P',
                Ꝓ: 'P',
                Ƥ: 'P',
                Ꝕ: 'P',
                Ᵽ: 'P',
                Ꝑ: 'P',
                Ꝙ: 'Q',
                Ꝗ: 'Q',
                Ŕ: 'R',
                Ř: 'R',
                Ŗ: 'R',
                Ṙ: 'R',
                Ṛ: 'R',
                Ṝ: 'R',
                Ȑ: 'R',
                Ȓ: 'R',
                Ṟ: 'R',
                Ɍ: 'R',
                Ɽ: 'R',
                Ꜿ: 'C',
                Ǝ: 'E',
                Ś: 'S',
                Ṥ: 'S',
                Š: 'S',
                Ṧ: 'S',
                Ş: 'S',
                Ŝ: 'S',
                Ș: 'S',
                Ṡ: 'S',
                Ṣ: 'S',
                Ṩ: 'S',
                ẞ: 'SS',
                Ť: 'T',
                Ţ: 'T',
                Ṱ: 'T',
                Ț: 'T',
                Ⱦ: 'T',
                Ṫ: 'T',
                Ṭ: 'T',
                Ƭ: 'T',
                Ṯ: 'T',
                Ʈ: 'T',
                Ŧ: 'T',
                Ɐ: 'A',
                Ꞁ: 'L',
                Ɯ: 'M',
                Ʌ: 'V',
                Ꜩ: 'TZ',
                Ú: 'U',
                Ŭ: 'U',
                Ǔ: 'U',
                Û: 'U',
                Ṷ: 'U',
                Ü: 'U',
                Ǘ: 'U',
                Ǚ: 'U',
                Ǜ: 'U',
                Ǖ: 'U',
                Ṳ: 'U',
                Ụ: 'U',
                Ű: 'U',
                Ȕ: 'U',
                Ù: 'U',
                Ủ: 'U',
                Ư: 'U',
                Ứ: 'U',
                Ự: 'U',
                Ừ: 'U',
                Ử: 'U',
                Ữ: 'U',
                Ȗ: 'U',
                Ū: 'U',
                Ṻ: 'U',
                Ų: 'U',
                Ů: 'U',
                Ũ: 'U',
                Ṹ: 'U',
                Ṵ: 'U',
                Ꝟ: 'V',
                Ṿ: 'V',
                Ʋ: 'V',
                Ṽ: 'V',
                Ꝡ: 'VY',
                Ẃ: 'W',
                Ŵ: 'W',
                Ẅ: 'W',
                Ẇ: 'W',
                Ẉ: 'W',
                Ẁ: 'W',
                Ⱳ: 'W',
                Ẍ: 'X',
                Ẋ: 'X',
                Ý: 'Y',
                Ŷ: 'Y',
                Ÿ: 'Y',
                Ẏ: 'Y',
                Ỵ: 'Y',
                Ỳ: 'Y',
                Ƴ: 'Y',
                Ỷ: 'Y',
                Ỿ: 'Y',
                Ȳ: 'Y',
                Ɏ: 'Y',
                Ỹ: 'Y',
                Ź: 'Z',
                Ž: 'Z',
                Ẑ: 'Z',
                Ⱬ: 'Z',
                Ż: 'Z',
                Ẓ: 'Z',
                Ȥ: 'Z',
                Ẕ: 'Z',
                Ƶ: 'Z',
                Ĳ: 'IJ',
                Œ: 'OE',
                ᴀ: 'A',
                ᴁ: 'AE',
                ʙ: 'B',
                ᴃ: 'B',
                ᴄ: 'C',
                ᴅ: 'D',
                ᴇ: 'E',
                ꜰ: 'F',
                ɢ: 'G',
                ʛ: 'G',
                ʜ: 'H',
                ɪ: 'I',
                ʁ: 'R',
                ᴊ: 'J',
                ᴋ: 'K',
                ʟ: 'L',
                ᴌ: 'L',
                ᴍ: 'M',
                ɴ: 'N',
                ᴏ: 'O',
                ɶ: 'OE',
                ᴐ: 'O',
                ᴕ: 'OU',
                ᴘ: 'P',
                ʀ: 'R',
                ᴎ: 'N',
                ᴙ: 'R',
                ꜱ: 'S',
                ᴛ: 'T',
                ⱻ: 'E',
                ᴚ: 'R',
                ᴜ: 'U',
                ᴠ: 'V',
                ᴡ: 'W',
                ʏ: 'Y',
                ᴢ: 'Z',
                á: 'a',
                ă: 'a',
                ắ: 'a',
                ặ: 'a',
                ằ: 'a',
                ẳ: 'a',
                ẵ: 'a',
                ǎ: 'a',
                â: 'a',
                ấ: 'a',
                ậ: 'a',
                ầ: 'a',
                ẩ: 'a',
                ẫ: 'a',
                ä: 'a',
                ǟ: 'a',
                ȧ: 'a',
                ǡ: 'a',
                ạ: 'a',
                ȁ: 'a',
                à: 'a',
                ả: 'a',
                ȃ: 'a',
                ā: 'a',
                ą: 'a',
                ᶏ: 'a',
                ẚ: 'a',
                å: 'a',
                ǻ: 'a',
                ḁ: 'a',
                ⱥ: 'a',
                ã: 'a',
                ꜳ: 'aa',
                æ: 'ae',
                ǽ: 'ae',
                ǣ: 'ae',
                ꜵ: 'ao',
                ꜷ: 'au',
                ꜹ: 'av',
                ꜻ: 'av',
                ꜽ: 'ay',
                ḃ: 'b',
                ḅ: 'b',
                ɓ: 'b',
                ḇ: 'b',
                ᵬ: 'b',
                ᶀ: 'b',
                ƀ: 'b',
                ƃ: 'b',
                ɵ: 'o',
                ć: 'c',
                č: 'c',
                ç: 'c',
                ḉ: 'c',
                ĉ: 'c',
                ɕ: 'c',
                ċ: 'c',
                ƈ: 'c',
                ȼ: 'c',
                ď: 'd',
                ḑ: 'd',
                ḓ: 'd',
                ȡ: 'd',
                ḋ: 'd',
                ḍ: 'd',
                ɗ: 'd',
                ᶑ: 'd',
                ḏ: 'd',
                ᵭ: 'd',
                ᶁ: 'd',
                đ: 'd',
                ɖ: 'd',
                ƌ: 'd',
                ı: 'i',
                ȷ: 'j',
                ɟ: 'j',
                ʄ: 'j',
                ǳ: 'dz',
                ǆ: 'dz',
                é: 'e',
                ĕ: 'e',
                ě: 'e',
                ȩ: 'e',
                ḝ: 'e',
                ê: 'e',
                ế: 'e',
                ệ: 'e',
                ề: 'e',
                ể: 'e',
                ễ: 'e',
                ḙ: 'e',
                ë: 'e',
                ė: 'e',
                ẹ: 'e',
                ȅ: 'e',
                è: 'e',
                ẻ: 'e',
                ȇ: 'e',
                ē: 'e',
                ḗ: 'e',
                ḕ: 'e',
                ⱸ: 'e',
                ę: 'e',
                ᶒ: 'e',
                ɇ: 'e',
                ẽ: 'e',
                ḛ: 'e',
                ꝫ: 'et',
                ḟ: 'f',
                ƒ: 'f',
                ᵮ: 'f',
                ᶂ: 'f',
                ǵ: 'g',
                ğ: 'g',
                ǧ: 'g',
                ģ: 'g',
                ĝ: 'g',
                ġ: 'g',
                ɠ: 'g',
                ḡ: 'g',
                ᶃ: 'g',
                ǥ: 'g',
                ḫ: 'h',
                ȟ: 'h',
                ḩ: 'h',
                ĥ: 'h',
                ⱨ: 'h',
                ḧ: 'h',
                ḣ: 'h',
                ḥ: 'h',
                ɦ: 'h',
                ẖ: 'h',
                ħ: 'h',
                ƕ: 'hv',
                í: 'i',
                ĭ: 'i',
                ǐ: 'i',
                î: 'i',
                ï: 'i',
                ḯ: 'i',
                ị: 'i',
                ȉ: 'i',
                ì: 'i',
                ỉ: 'i',
                ȋ: 'i',
                ī: 'i',
                į: 'i',
                ᶖ: 'i',
                ɨ: 'i',
                ĩ: 'i',
                ḭ: 'i',
                ꝺ: 'd',
                ꝼ: 'f',
                ᵹ: 'g',
                ꞃ: 'r',
                ꞅ: 's',
                ꞇ: 't',
                ꝭ: 'is',
                ǰ: 'j',
                ĵ: 'j',
                ʝ: 'j',
                ɉ: 'j',
                ḱ: 'k',
                ǩ: 'k',
                ķ: 'k',
                ⱪ: 'k',
                ꝃ: 'k',
                ḳ: 'k',
                ƙ: 'k',
                ḵ: 'k',
                ᶄ: 'k',
                ꝁ: 'k',
                ꝅ: 'k',
                ĺ: 'l',
                ƚ: 'l',
                ɬ: 'l',
                ľ: 'l',
                ļ: 'l',
                ḽ: 'l',
                ȴ: 'l',
                ḷ: 'l',
                ḹ: 'l',
                ⱡ: 'l',
                ꝉ: 'l',
                ḻ: 'l',
                ŀ: 'l',
                ɫ: 'l',
                ᶅ: 'l',
                ɭ: 'l',
                ł: 'l',
                ǉ: 'lj',
                ſ: 's',
                ẜ: 's',
                ẛ: 's',
                ẝ: 's',
                ḿ: 'm',
                ṁ: 'm',
                ṃ: 'm',
                ɱ: 'm',
                ᵯ: 'm',
                ᶆ: 'm',
                ń: 'n',
                ň: 'n',
                ņ: 'n',
                ṋ: 'n',
                ȵ: 'n',
                ṅ: 'n',
                ṇ: 'n',
                ǹ: 'n',
                ɲ: 'n',
                ṉ: 'n',
                ƞ: 'n',
                ᵰ: 'n',
                ᶇ: 'n',
                ɳ: 'n',
                ñ: 'n',
                ǌ: 'nj',
                ó: 'o',
                ŏ: 'o',
                ǒ: 'o',
                ô: 'o',
                ố: 'o',
                ộ: 'o',
                ồ: 'o',
                ổ: 'o',
                ỗ: 'o',
                ö: 'o',
                ȫ: 'o',
                ȯ: 'o',
                ȱ: 'o',
                ọ: 'o',
                ő: 'o',
                ȍ: 'o',
                ò: 'o',
                ỏ: 'o',
                ơ: 'o',
                ớ: 'o',
                ợ: 'o',
                ờ: 'o',
                ở: 'o',
                ỡ: 'o',
                ȏ: 'o',
                ꝋ: 'o',
                ꝍ: 'o',
                ⱺ: 'o',
                ō: 'o',
                ṓ: 'o',
                ṑ: 'o',
                ǫ: 'o',
                ǭ: 'o',
                ø: 'o',
                ǿ: 'o',
                õ: 'o',
                ṍ: 'o',
                ṏ: 'o',
                ȭ: 'o',
                ƣ: 'oi',
                ꝏ: 'oo',
                ɛ: 'e',
                ᶓ: 'e',
                ɔ: 'o',
                ᶗ: 'o',
                ȣ: 'ou',
                ṕ: 'p',
                ṗ: 'p',
                ꝓ: 'p',
                ƥ: 'p',
                ᵱ: 'p',
                ᶈ: 'p',
                ꝕ: 'p',
                ᵽ: 'p',
                ꝑ: 'p',
                ꝙ: 'q',
                ʠ: 'q',
                ɋ: 'q',
                ꝗ: 'q',
                ŕ: 'r',
                ř: 'r',
                ŗ: 'r',
                ṙ: 'r',
                ṛ: 'r',
                ṝ: 'r',
                ȑ: 'r',
                ɾ: 'r',
                ᵳ: 'r',
                ȓ: 'r',
                ṟ: 'r',
                ɼ: 'r',
                ᵲ: 'r',
                ᶉ: 'r',
                ɍ: 'r',
                ɽ: 'r',
                ↄ: 'c',
                ꜿ: 'c',
                ɘ: 'e',
                ɿ: 'r',
                ś: 's',
                ṥ: 's',
                š: 's',
                ṧ: 's',
                ş: 's',
                ŝ: 's',
                ș: 's',
                ṡ: 's',
                ṣ: 's',
                ṩ: 's',
                ʂ: 's',
                ᵴ: 's',
                ᶊ: 's',
                ȿ: 's',
                ɡ: 'g',
                ß: 'ss',
                ᴑ: 'o',
                ᴓ: 'o',
                ᴝ: 'u',
                ť: 't',
                ţ: 't',
                ṱ: 't',
                ț: 't',
                ȶ: 't',
                ẗ: 't',
                ⱦ: 't',
                ṫ: 't',
                ṭ: 't',
                ƭ: 't',
                ṯ: 't',
                ᵵ: 't',
                ƫ: 't',
                ʈ: 't',
                ŧ: 't',
                ᵺ: 'th',
                ɐ: 'a',
                ᴂ: 'ae',
                ǝ: 'e',
                ᵷ: 'g',
                ɥ: 'h',
                ʮ: 'h',
                ʯ: 'h',
                ᴉ: 'i',
                ʞ: 'k',
                ꞁ: 'l',
                ɯ: 'm',
                ɰ: 'm',
                ᴔ: 'oe',
                ɹ: 'r',
                ɻ: 'r',
                ɺ: 'r',
                ⱹ: 'r',
                ʇ: 't',
                ʌ: 'v',
                ʍ: 'w',
                ʎ: 'y',
                ꜩ: 'tz',
                ú: 'u',
                ŭ: 'u',
                ǔ: 'u',
                û: 'u',
                ṷ: 'u',
                ü: 'u',
                ǘ: 'u',
                ǚ: 'u',
                ǜ: 'u',
                ǖ: 'u',
                ṳ: 'u',
                ụ: 'u',
                ű: 'u',
                ȕ: 'u',
                ù: 'u',
                ủ: 'u',
                ư: 'u',
                ứ: 'u',
                ự: 'u',
                ừ: 'u',
                ử: 'u',
                ữ: 'u',
                ȗ: 'u',
                ū: 'u',
                ṻ: 'u',
                ų: 'u',
                ᶙ: 'u',
                ů: 'u',
                ũ: 'u',
                ṹ: 'u',
                ṵ: 'u',
                ᵫ: 'ue',
                ꝸ: 'um',
                ⱴ: 'v',
                ꝟ: 'v',
                ṿ: 'v',
                ʋ: 'v',
                ᶌ: 'v',
                ⱱ: 'v',
                ṽ: 'v',
                ꝡ: 'vy',
                ẃ: 'w',
                ŵ: 'w',
                ẅ: 'w',
                ẇ: 'w',
                ẉ: 'w',
                ẁ: 'w',
                ⱳ: 'w',
                ẘ: 'w',
                ẍ: 'x',
                ẋ: 'x',
                ᶍ: 'x',
                ý: 'y',
                ŷ: 'y',
                ÿ: 'y',
                ẏ: 'y',
                ỵ: 'y',
                ỳ: 'y',
                ƴ: 'y',
                ỷ: 'y',
                ỿ: 'y',
                ȳ: 'y',
                ẙ: 'y',
                ɏ: 'y',
                ỹ: 'y',
                ź: 'z',
                ž: 'z',
                ẑ: 'z',
                ʑ: 'z',
                ⱬ: 'z',
                ż: 'z',
                ẓ: 'z',
                ȥ: 'z',
                ẕ: 'z',
                ᵶ: 'z',
                ᶎ: 'z',
                ʐ: 'z',
                ƶ: 'z',
                ɀ: 'z',
                ﬀ: 'ff',
                ﬃ: 'ffi',
                ﬄ: 'ffl',
                ﬁ: 'fi',
                ﬂ: 'fl',
                ĳ: 'ij',
                œ: 'oe',
                ﬆ: 'st',
                ₐ: 'a',
                ₑ: 'e',
                ᵢ: 'i',
                ⱼ: 'j',
                ₒ: 'o',
                ᵣ: 'r',
                ᵤ: 'u',
                ᵥ: 'v',
                ₓ: 'x',
            };
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        LatinisePipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                var _this = this;
                if (chars === void 0) {
                    chars = '\\s';
                }
                return isString(text)
                    ? text.replace(/[^A-Za-z0-9]/g, ( /**
                     * @param {?} key
                     * @return {?}
                     */function (key) {
                        return _this.latinMap[key] || key;
                    }))
                    : text;
            };
        LatinisePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'latinise' },] }
        ];
        return LatinisePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LinesPipe = /** @class */ (function () {
        function LinesPipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        LinesPipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = '\\s';
                }
                return isString(text) ? text.replace(/\r\n/g, '\n').split('\n') : text;
            };
        LinesPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'lines' },] }
        ];
        return LinesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UnderscorePipe = /** @class */ (function () {
        function UnderscorePipe() {
        }
        /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
        UnderscorePipe.prototype.transform = /**
         * @param {?} text
         * @param {?=} chars
         * @return {?}
         */
            function (text, chars) {
                if (chars === void 0) {
                    chars = '\\s';
                }
                return isString(text)
                    ? text
                        .trim()
                        .replace(/\s+/g, '')
                        .replace(/[A-Z]/g, ( /**
                 * @param {?} c
                 * @param {?} k
                 * @return {?}
                 */function (c, k) {
                        return k ? "_" + c.toLowerCase() : c.toLowerCase();
                    }))
                    : text;
            };
        UnderscorePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'underscore' },] }
        ];
        return UnderscorePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MatchPipe = /** @class */ (function () {
        function MatchPipe() {
        }
        /**
         * @param {?} text
         * @param {?} pattern
         * @param {?=} flags
         * @return {?}
         */
        MatchPipe.prototype.transform = /**
         * @param {?} text
         * @param {?} pattern
         * @param {?=} flags
         * @return {?}
         */
            function (text, pattern, flags) {
                if (!isString(text)) {
                    return text;
                }
                return text.match(new RegExp(pattern, flags));
            };
        MatchPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'match' },] }
        ];
        return MatchPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TestPipe = /** @class */ (function () {
        function TestPipe() {
        }
        /**
         * @param {?} text
         * @param {?} pattern
         * @param {?=} flags
         * @return {?}
         */
        TestPipe.prototype.transform = /**
         * @param {?} text
         * @param {?} pattern
         * @param {?=} flags
         * @return {?}
         */
            function (text, pattern, flags) {
                if (!isString(text)) {
                    return text;
                }
                return new RegExp(pattern, flags).test(text);
            };
        TestPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'test' },] }
        ];
        return TestPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LeftPadPipe = /** @class */ (function () {
        function LeftPadPipe() {
        }
        /**
         * @param {?} str
         * @param {?} length
         * @param {?=} padCharacter
         * @return {?}
         */
        LeftPadPipe.prototype.transform = /**
         * @param {?} str
         * @param {?} length
         * @param {?=} padCharacter
         * @return {?}
         */
            function (str, length, padCharacter) {
                if (padCharacter === void 0) {
                    padCharacter = ' ';
                }
                if (!isString(str) || str.length >= length) {
                    return str;
                }
                while (str.length < length) {
                    str = padCharacter + str;
                }
                return str;
            };
        LeftPadPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'lpad' },] }
        ];
        return LeftPadPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RightPadPipe = /** @class */ (function () {
        function RightPadPipe() {
        }
        /**
         * @param {?} str
         * @param {?=} length
         * @param {?=} padCharacter
         * @return {?}
         */
        RightPadPipe.prototype.transform = /**
         * @param {?} str
         * @param {?=} length
         * @param {?=} padCharacter
         * @return {?}
         */
            function (str, length, padCharacter) {
                if (length === void 0) {
                    length = 1;
                }
                if (padCharacter === void 0) {
                    padCharacter = ' ';
                }
                if (!isString(str) || str.length >= length) {
                    return str;
                }
                while (str.length < length) {
                    str = str + padCharacter;
                }
                return str;
            };
        RightPadPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'rpad' },] }
        ];
        return RightPadPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MakePluralStringPipe = /** @class */ (function () {
        function MakePluralStringPipe() {
            this.irregularMap = {
                addendum: 'addenda',
                alga: 'algae',
                alumna: 'alumnae',
                alumnus: 'alumni',
                analysis: 'analyses',
                antenna: 'antennae',
                appendix: 'appendices',
                aquarium: 'aquaria',
                arch: 'arches',
                axe: 'axes',
                axis: 'axes',
                bacillus: 'bacilli',
                bacterium: 'bacteria',
                basis: 'bases',
                batch: 'batches',
                beach: 'beaches',
                beau: 'beaux',
                bison: 'bison',
                brush: 'brushes',
                buffalo: 'buffaloes',
                bureau: 'bureaus',
                bus: 'busses',
                cactus: 'cacti',
                calf: 'calves',
                chateau: 'chateaux',
                cherry: 'cherries',
                child: 'children',
                church: 'churches',
                circus: 'circuses',
                cod: 'cod',
                corps: 'corps',
                corpus: 'corpora',
                crisis: 'crises',
                criterion: 'criteria',
                curriculum: 'curricula',
                datum: 'data',
                deer: 'deer',
                diagnosis: 'diagnoses',
                die: 'dice',
                domino: 'dominoes',
                dwarf: 'dwarves',
                echo: 'echoes',
                elf: 'elves',
                ellipsis: 'ellipses',
                embargo: 'embargoes',
                emphasis: 'emphases',
                erratum: 'errata',
                fax: 'faxes',
                fireman: 'firemen',
                fish: 'fish',
                flush: 'flushes',
                focus: 'foci',
                foot: 'feet',
                formula: 'formulas',
                fungus: 'fungi',
                genus: 'genera',
                goose: 'geese',
                grafito: 'grafiti',
                half: 'halves',
                hero: 'heroes',
                hoax: 'hoaxes',
                hoof: 'hooves',
                hypothesis: 'hypotheses',
                index: 'indices',
                kiss: 'kisses',
                knife: 'knives',
                leaf: 'leaves',
                life: 'lives',
                loaf: 'loaves',
                louse: 'lice',
                man: 'men',
                mango: 'mangoes',
                matrix: 'matrices',
                means: 'means',
                medium: 'media',
                memorandum: 'memoranda',
                millennium: 'milennia',
                moose: 'moose',
                mosquito: 'mosquitoes',
                motto: 'mottoes',
                mouse: 'mice',
                nebula: 'nebulae',
                neurosis: 'neuroses',
                nucleus: 'nuclei',
                oasis: 'oases',
                octopus: 'octopodes',
                ovum: 'ova',
                ox: 'oxen',
                paralysis: 'paralyses',
                parenthesis: 'parentheses',
                person: 'people',
                phenomenon: 'phenomena',
                plateau: 'plateaux',
                potato: 'potatoes',
                quiz: 'quizzes',
                radius: 'radii',
                reflex: 'reflexes',
                'runner-up': 'runners-up',
                scampo: 'scampi',
                scarf: 'scarves',
                scissors: 'scissors',
                scratch: 'scratches',
                self: 'selves',
                series: 'series',
                sheaf: 'sheaves',
                sheep: 'sheep',
                shelf: 'shelves',
                'son-in-law': 'sons-in-law',
                species: 'species',
                splash: 'splashes',
                stimulus: 'stimuli',
                stitch: 'stitches',
                stratum: 'strata',
                syllabus: 'syllabi',
                symposium: 'symposia',
                synopsis: 'synopses',
                synthesis: 'syntheses',
                tableau: 'tableaux',
                tax: 'taxes',
                that: 'those',
                thesis: 'theses',
                thief: 'thieves',
                this: 'these',
                tomato: 'tomatoes',
                tooth: 'teeth',
                tornado: 'tornadoes',
                torpedo: 'torpedoes',
                vertebra: 'vertebrae',
                veto: 'vetoes',
                vita: 'vitae',
                volcano: 'volcanoes',
                waltz: 'waltzes',
                wash: 'washes',
                watch: 'watches',
                wharf: 'wharves',
                wife: 'wives',
                wolf: 'wolves',
                woman: 'women',
                zero: 'zeroes',
            };
        }
        /**
         * @param {?} singularEntity
         * @param {?=} quantity
         * @return {?}
         */
        MakePluralStringPipe.prototype.transform = /**
         * @param {?} singularEntity
         * @param {?=} quantity
         * @return {?}
         */
            function (singularEntity, quantity) {
                if (quantity === void 0) {
                    quantity = 0;
                }
                if (!singularEntity || singularEntity === '') {
                    return '';
                }
                if (quantity === 1) {
                    return singularEntity;
                }
                else {
                    /** @type {?} */
                    var lastWord = singularEntity.trim().split(' ')[singularEntity.trim().split(' ').length - 1];
                    if (this.irregularMap[lastWord.toLocaleLowerCase()]) {
                        if (lastWord[0] === lastWord[0].toLocaleUpperCase()) {
                            return singularEntity.replace(lastWord, this.irregularMap[lastWord.toLocaleLowerCase()].replace(this.irregularMap[lastWord.toLocaleLowerCase()][0], this.irregularMap[lastWord.toLocaleLowerCase()][0].toLocaleUpperCase()));
                        }
                        return singularEntity.replace(lastWord, this.irregularMap[lastWord.toLocaleLowerCase()]);
                    }
                    else if (lastWord[lastWord.length - 1] === 'y') {
                        // Naive approach:
                        // consonant+y = word - 'y' +'ies'
                        // vowel+y = word + 's'
                        return isVowel(lastWord[lastWord.length - 2])
                            ? singularEntity + 's'
                            : singularEntity.replace(lastWord, lastWord.slice(0, -1) + 'ies');
                    }
                    else if (lastWord[lastWord.length - 1] === 's') {
                        return singularEntity + 'es';
                    }
                    else {
                        return singularEntity + 's';
                    }
                }
            };
        MakePluralStringPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'makePluralString',
                    },] }
        ];
        return MakePluralStringPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WrapPipe = /** @class */ (function () {
        function WrapPipe() {
        }
        /**
         * @param {?} str
         * @param {?=} prefix
         * @param {?=} suffix
         * @return {?}
         */
        WrapPipe.prototype.transform = /**
         * @param {?} str
         * @param {?=} prefix
         * @param {?=} suffix
         * @return {?}
         */
            function (str, prefix, suffix) {
                if (prefix === void 0) {
                    prefix = '';
                }
                if (suffix === void 0) {
                    suffix = '';
                }
                if (!isString(str)) {
                    return str;
                }
                return (!!prefix && isString(prefix) ? prefix : '') + str + (!!suffix && isString(suffix) ? suffix : '');
            };
        WrapPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'wrap' },] }
        ];
        return WrapPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var STRING_PIPES = [
        AorAnPipe,
        LeftTrimPipe,
        RepeatPipe,
        RightTrimPipe,
        ScanPipe,
        ShortenPipe,
        StripTagsPipe,
        TrimPipe,
        UcFirstPipe,
        UcWordsPipe,
        SlugifyPipe,
        CamelizePipe,
        LatinisePipe,
        LinesPipe,
        UnderscorePipe,
        MatchPipe,
        TestPipe,
        LeftPadPipe,
        RightPadPipe,
        MakePluralStringPipe,
        WrapPipe,
    ];
    var NgStringPipesModule = /** @class */ (function () {
        function NgStringPipesModule() {
        }
        NgStringPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: STRING_PIPES,
                        imports: [],
                        exports: STRING_PIPES,
                    },] }
        ];
        return NgStringPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaxPipe = /** @class */ (function () {
        function MaxPipe() {
        }
        /**
         * @param {?} arr
         * @return {?}
         */
        MaxPipe.prototype.transform = /**
         * @param {?} arr
         * @return {?}
         */
            function (arr) {
                return Array.isArray(arr) ? Math.max.apply(Math, __spread(arr)) : arr;
            };
        MaxPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'max' },] }
        ];
        return MaxPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MinPipe = /** @class */ (function () {
        function MinPipe() {
        }
        /**
         * @param {?} arr
         * @return {?}
         */
        MinPipe.prototype.transform = /**
         * @param {?} arr
         * @return {?}
         */
            function (arr) {
                return Array.isArray(arr) ? Math.min.apply(Math, __spread(arr)) : arr;
            };
        MinPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'min' },] }
        ];
        return MinPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PercentagePipe = /** @class */ (function () {
        function PercentagePipe() {
        }
        /**
         * @param {?} num
         * @param {?=} total
         * @param {?=} floor
         * @return {?}
         */
        PercentagePipe.prototype.transform = /**
         * @param {?} num
         * @param {?=} total
         * @param {?=} floor
         * @return {?}
         */
            function (num, total, floor) {
                if (total === void 0) {
                    total = 100;
                }
                if (floor === void 0) {
                    floor = false;
                }
                if (isNaN(num)) {
                    return num;
                }
                /** @type {?} */
                var percent = (num * 100) / total;
                return floor ? Math.floor(percent) : percent;
            };
        PercentagePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'percentage' },] }
        ];
        return PercentagePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SumPipe = /** @class */ (function () {
        function SumPipe() {
        }
        /**
         * @param {?} arr
         * @return {?}
         */
        SumPipe.prototype.transform = /**
         * @param {?} arr
         * @return {?}
         */
            function (arr) {
                return Array.isArray(arr) ? arr.reduce(( /**
                 * @param {?} sum
                 * @param {?} curr
                 * @return {?}
                 */function (sum, curr) { return sum + curr; }), 0) : arr;
            };
        SumPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'sum' },] }
        ];
        return SumPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FloorPipe = /** @class */ (function () {
        function FloorPipe() {
        }
        /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
        FloorPipe.prototype.transform = /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
            function (num, precision) {
                if (precision === void 0) {
                    precision = 0;
                }
                if (precision <= 0) {
                    return Math.floor(num);
                }
                /** @type {?} */
                var tho = Math.pow(10, precision);
                return Math.floor(num * tho) / tho;
            };
        FloorPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'floor' },] }
        ];
        return FloorPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RoundPipe = /** @class */ (function () {
        function RoundPipe() {
        }
        /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
        RoundPipe.prototype.transform = /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
            function (num, precision) {
                if (precision === void 0) {
                    precision = 0;
                }
                return applyPrecision(num, precision);
            };
        RoundPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'round' },] }
        ];
        return RoundPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SqrtPipe = /** @class */ (function () {
        function SqrtPipe() {
        }
        /**
         * @param {?} num
         * @return {?}
         */
        SqrtPipe.prototype.transform = /**
         * @param {?} num
         * @return {?}
         */
            function (num) {
                return !isNaN(num) ? Math.sqrt(num) : num;
            };
        SqrtPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'sqrt' },] }
        ];
        return SqrtPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PowerPipe = /** @class */ (function () {
        function PowerPipe() {
        }
        /**
         * @param {?} num
         * @param {?=} power
         * @return {?}
         */
        PowerPipe.prototype.transform = /**
         * @param {?} num
         * @param {?=} power
         * @return {?}
         */
            function (num, power) {
                if (power === void 0) {
                    power = 2;
                }
                return !isNaN(num) ? Math.pow(num, power) : num;
            };
        PowerPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'pow' },] }
        ];
        return PowerPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CeilPipe = /** @class */ (function () {
        function CeilPipe() {
        }
        /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
        CeilPipe.prototype.transform = /**
         * @param {?} num
         * @param {?=} precision
         * @return {?}
         */
            function (num, precision) {
                if (precision === void 0) {
                    precision = 0;
                }
                if (precision <= 0) {
                    return Math.ceil(num);
                }
                /** @type {?} */
                var tho = Math.pow(10, precision);
                return Math.ceil(num * tho) / tho;
            };
        CeilPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'ceil' },] }
        ];
        return CeilPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DegreesPipe = /** @class */ (function () {
        function DegreesPipe() {
        }
        /**
         * @param {?} radians
         * @return {?}
         */
        DegreesPipe.prototype.transform = /**
         * @param {?} radians
         * @return {?}
         */
            function (radians) {
                if (!isNumberFinite(radians)) {
                    return NaN;
                }
                return (radians * 180) / Math.PI;
            };
        DegreesPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'degrees' },] }
        ];
        return DegreesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BytesPipe = /** @class */ (function () {
        function BytesPipe() {
            this.dictionary = [
                { max: 1024, type: 'B' },
                { max: 1048576, type: 'KB' },
                { max: 1073741824, type: 'MB' },
                { max: 1.0995116e12, type: 'GB' },
            ];
        }
        /**
         * @param {?} value
         * @param {?=} precision
         * @return {?}
         */
        BytesPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} precision
         * @return {?}
         */
            function (value, precision) {
                if (!isNumberFinite(value)) {
                    return NaN;
                }
                /** @type {?} */
                var format = this.dictionary.find(( /**
                 * @param {?} d
                 * @return {?}
                 */function (d) { return value < d.max; })) || this.dictionary[this.dictionary.length - 1];
                /** @type {?} */
                var calc = value / (format.max / 1024);
                /** @type {?} */
                var num = isUndefined(precision) ? calc : applyPrecision(calc, precision);
                return num + " " + format.type;
            };
        BytesPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'bytes' },] }
        ];
        return BytesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadiansPipe = /** @class */ (function () {
        function RadiansPipe() {
        }
        /**
         * @param {?} degrees
         * @return {?}
         */
        RadiansPipe.prototype.transform = /**
         * @param {?} degrees
         * @return {?}
         */
            function (degrees) {
                if (!isNumberFinite(degrees)) {
                    return NaN;
                }
                return (degrees * Math.PI) / 180;
            };
        RadiansPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'radians' },] }
        ];
        return RadiansPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MATH_PIPES = [
        MaxPipe,
        MinPipe,
        PercentagePipe,
        SumPipe,
        FloorPipe,
        RoundPipe,
        SqrtPipe,
        PowerPipe,
        CeilPipe,
        DegreesPipe,
        BytesPipe,
        RadiansPipe,
    ];
    var NgMathPipesModule = /** @class */ (function () {
        function NgMathPipesModule() {
        }
        NgMathPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: MATH_PIPES,
                        imports: [],
                        exports: MATH_PIPES,
                    },] }
        ];
        return NgMathPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsDefinedPipe = /** @class */ (function () {
        function IsDefinedPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsDefinedPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return !isUndefined(input);
            };
        IsDefinedPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isDefined' },] }
        ];
        return IsDefinedPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsNullPipe = /** @class */ (function () {
        function IsNullPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsNullPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return input === null;
            };
        IsNullPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isNull' },] }
        ];
        return IsNullPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsUndefinedPipe = /** @class */ (function () {
        function IsUndefinedPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsUndefinedPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return isUndefined(input);
            };
        IsUndefinedPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isUndefined' },] }
        ];
        return IsUndefinedPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsStringPipe = /** @class */ (function () {
        function IsStringPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsStringPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return isString(input);
            };
        IsStringPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isString' },] }
        ];
        return IsStringPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsFunctionPipe = /** @class */ (function () {
        function IsFunctionPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsFunctionPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return isFunction(input);
            };
        IsFunctionPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isFunction' },] }
        ];
        return IsFunctionPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsNumberPipe = /** @class */ (function () {
        function IsNumberPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsNumberPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return isNumber(input);
            };
        IsNumberPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isNumber' },] }
        ];
        return IsNumberPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsArrayPipe = /** @class */ (function () {
        function IsArrayPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsArrayPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return Array.isArray(input);
            };
        IsArrayPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isArray' },] }
        ];
        return IsArrayPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsObjectPipe = /** @class */ (function () {
        function IsObjectPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        IsObjectPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return isObject(input);
            };
        IsObjectPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isObject' },] }
        ];
        return IsObjectPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsGreaterEqualThanPipe = /** @class */ (function () {
        function IsGreaterEqualThanPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsGreaterEqualThanPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input >= other;
            };
        IsGreaterEqualThanPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isGreaterEqualThan' },] }
        ];
        return IsGreaterEqualThanPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsGreaterThanPipe = /** @class */ (function () {
        function IsGreaterThanPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsGreaterThanPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input > other;
            };
        IsGreaterThanPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isGreaterThan' },] }
        ];
        return IsGreaterThanPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsLessEqualThanPipe = /** @class */ (function () {
        function IsLessEqualThanPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsLessEqualThanPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input <= other;
            };
        IsLessEqualThanPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isLessEqualThan' },] }
        ];
        return IsLessEqualThanPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsEqualToPipe = /** @class */ (function () {
        function IsEqualToPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsEqualToPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                // tslint:disable-next-line:triple-equals
                return input == other;
            };
        IsEqualToPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isEqualTo' },] }
        ];
        return IsEqualToPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsNotEqualToPipe = /** @class */ (function () {
        function IsNotEqualToPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsNotEqualToPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                // tslint:disable-next-line:triple-equals
                return input != other;
            };
        IsNotEqualToPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isNotEqualTo' },] }
        ];
        return IsNotEqualToPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsIdenticalToPipe = /** @class */ (function () {
        function IsIdenticalToPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsIdenticalToPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input === other;
            };
        IsIdenticalToPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isIdenticalTo' },] }
        ];
        return IsIdenticalToPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsNotIdenticalToPipe = /** @class */ (function () {
        function IsNotIdenticalToPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsNotIdenticalToPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input !== other;
            };
        IsNotIdenticalToPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isNotIdenticalTo' },] }
        ];
        return IsNotIdenticalToPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IsLessThanPipe = /** @class */ (function () {
        function IsLessThanPipe() {
        }
        /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
        IsLessThanPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} other
         * @return {?}
         */
            function (input, other) {
                return input < other;
            };
        IsLessThanPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'isLessThan' },] }
        ];
        return IsLessThanPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var BOOLEAN_PIPES = [
        IsDefinedPipe,
        IsNullPipe,
        IsUndefinedPipe,
        IsStringPipe,
        IsFunctionPipe,
        IsNumberPipe,
        IsArrayPipe,
        IsObjectPipe,
        IsGreaterEqualThanPipe,
        IsGreaterThanPipe,
        IsLessEqualThanPipe,
        IsLessEqualThanPipe,
        IsEqualToPipe,
        IsNotEqualToPipe,
        IsIdenticalToPipe,
        IsNotIdenticalToPipe,
        IsLessThanPipe,
    ];
    var NgBooleanPipesModule = /** @class */ (function () {
        function NgBooleanPipesModule() {
        }
        NgBooleanPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: BOOLEAN_PIPES,
                        imports: [],
                        exports: BOOLEAN_PIPES,
                    },] }
        ];
        return NgBooleanPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TimeAgoPipe = /** @class */ (function () {
        function TimeAgoPipe() {
        }
        /**
         * @param inputDate: Date | Moment - not included as TypeScript interface,
         * in order to keep `ngx-pipes` "pure" from dependencies!
         */
        /**
         * @param {?} inputDate
         * @return {?}
         */
        TimeAgoPipe.prototype.transform = /**
         * @param {?} inputDate
         * @return {?}
         */
            function (inputDate) {
                if (!inputDate || (!inputDate.getTime && !inputDate.toDate)) {
                    return 'Invalid date';
                }
                /** @type {?} */
                var past = inputDate.toDate ? inputDate.toDate() : inputDate.getTime();
                /** @type {?} */
                var now = +new Date();
                if (past > now) {
                    return 'in the future';
                }
                for (var i = 0, l = TimeAgoPipe.MAPPER.length, ms = now - past, div = TimeAgoPipe.YEAR_MS; i < l; ++i) {
                    /** @type {?} */
                    var elm = TimeAgoPipe.MAPPER[i];
                    /** @type {?} */
                    var unit = Math.floor(ms / (div /= elm.div));
                    if (unit >= 1) {
                        return unit === 1 ? elm.single : unit + " " + elm.many + " ago";
                    }
                }
                return 'just now';
            };
        TimeAgoPipe.YEAR_MS = 1000 * 60 * 60 * 24 * 7 * 4 * 12;
        TimeAgoPipe.MAPPER = [
            { single: 'last year', many: 'years', div: 1 },
            { single: 'last month', many: 'months', div: 12 },
            { single: 'last week', many: 'weeks', div: 4 },
            { single: 'yesterday', many: 'days', div: 7 },
            { single: 'an hour ago', many: 'hours', div: 24 },
            { single: 'just now', many: 'minutes', div: 60 },
        ];
        TimeAgoPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'timeAgo' },] }
        ];
        return TimeAgoPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DATE_PIPES = [TimeAgoPipe];
    var NgDatePipesModule = /** @class */ (function () {
        function NgDatePipesModule() {
        }
        NgDatePipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: DATE_PIPES,
                        imports: [],
                        exports: DATE_PIPES,
                    },] }
        ];
        return NgDatePipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgPipesModule = /** @class */ (function () {
        function NgPipesModule() {
        }
        NgPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: [
                            NgArrayPipesModule,
                            NgStringPipesModule,
                            NgMathPipesModule,
                            NgBooleanPipesModule,
                            NgObjectPipesModule,
                            NgDatePipesModule,
                        ],
                    },] }
        ];
        return NgPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgPipesModule = NgPipesModule;
    exports.NgArrayPipesModule = NgArrayPipesModule;
    exports.DiffPipe = DiffPipe;
    exports.InitialPipe = InitialPipe;
    exports.FlattenPipe = FlattenPipe;
    exports.IntersectionPipe = IntersectionPipe;
    exports.ReversePipe = ReversePipe;
    exports.TailPipe = TailPipe;
    exports.TrurthifyPipe = TrurthifyPipe;
    exports.UnionPipe = UnionPipe;
    exports.UniquePipe = UniquePipe;
    exports.WithoutPipe = WithoutPipe;
    exports.PluckPipe = PluckPipe;
    exports.ShufflePipe = ShufflePipe;
    exports.EveryPipe = EveryPipe;
    exports.SomePipe = SomePipe;
    exports.SamplePipe = SamplePipe;
    exports.GroupByPipe = GroupByPipe;
    exports.FilterByPipe = FilterByPipe;
    exports.OrderByPipe = OrderByPipe;
    exports.GroupByImpurePipe = GroupByImpurePipe;
    exports.FilterByImpurePipe = FilterByImpurePipe;
    exports.OrderByImpurePipe = OrderByImpurePipe;
    exports.RangePipe = RangePipe;
    exports.NgObjectPipesModule = NgObjectPipesModule;
    exports.KeysPipe = KeysPipe;
    exports.ValuesPipe = ValuesPipe;
    exports.PairsPipe = PairsPipe;
    exports.PickPipe = PickPipe;
    exports.OmitPipe = OmitPipe;
    exports.InvertPipe = InvertPipe;
    exports.InvertByPipe = InvertByPipe;
    exports.DiffObjPipe = DiffObjPipe;
    exports.STRING_PIPES = STRING_PIPES;
    exports.NgStringPipesModule = NgStringPipesModule;
    exports.AorAnPipe = AorAnPipe;
    exports.UcWordsPipe = UcWordsPipe;
    exports.LeftTrimPipe = LeftTrimPipe;
    exports.RepeatPipe = RepeatPipe;
    exports.RightTrimPipe = RightTrimPipe;
    exports.ScanPipe = ScanPipe;
    exports.ShortenPipe = ShortenPipe;
    exports.StripTagsPipe = StripTagsPipe;
    exports.TrimPipe = TrimPipe;
    exports.UcFirstPipe = UcFirstPipe;
    exports.SlugifyPipe = SlugifyPipe;
    exports.CamelizePipe = CamelizePipe;
    exports.LatinisePipe = LatinisePipe;
    exports.LinesPipe = LinesPipe;
    exports.UnderscorePipe = UnderscorePipe;
    exports.MatchPipe = MatchPipe;
    exports.TestPipe = TestPipe;
    exports.LeftPadPipe = LeftPadPipe;
    exports.RightPadPipe = RightPadPipe;
    exports.MakePluralStringPipe = MakePluralStringPipe;
    exports.WrapPipe = WrapPipe;
    exports.MATH_PIPES = MATH_PIPES;
    exports.NgMathPipesModule = NgMathPipesModule;
    exports.MaxPipe = MaxPipe;
    exports.MinPipe = MinPipe;
    exports.PercentagePipe = PercentagePipe;
    exports.SumPipe = SumPipe;
    exports.FloorPipe = FloorPipe;
    exports.RoundPipe = RoundPipe;
    exports.SqrtPipe = SqrtPipe;
    exports.PowerPipe = PowerPipe;
    exports.CeilPipe = CeilPipe;
    exports.DegreesPipe = DegreesPipe;
    exports.BytesPipe = BytesPipe;
    exports.BOOLEAN_PIPES = BOOLEAN_PIPES;
    exports.NgBooleanPipesModule = NgBooleanPipesModule;
    exports.IsDefinedPipe = IsDefinedPipe;
    exports.IsNullPipe = IsNullPipe;
    exports.IsUndefinedPipe = IsUndefinedPipe;
    exports.IsStringPipe = IsStringPipe;
    exports.IsFunctionPipe = IsFunctionPipe;
    exports.IsNumberPipe = IsNumberPipe;
    exports.IsArrayPipe = IsArrayPipe;
    exports.IsObjectPipe = IsObjectPipe;
    exports.IsGreaterEqualThanPipe = IsGreaterEqualThanPipe;
    exports.IsGreaterThanPipe = IsGreaterThanPipe;
    exports.IsLessEqualThanPipe = IsLessEqualThanPipe;
    exports.IsEqualToPipe = IsEqualToPipe;
    exports.IsNotEqualToPipe = IsNotEqualToPipe;
    exports.IsIdenticalToPipe = IsIdenticalToPipe;
    exports.IsNotIdenticalToPipe = IsNotIdenticalToPipe;
    exports.IsLessThanPipe = IsLessThanPipe;
    exports.DATE_PIPES = DATE_PIPES;
    exports.NgDatePipesModule = NgDatePipesModule;
    exports.TimeAgoPipe = TimeAgoPipe;
    exports.ɵa = isString;
    exports.ɵb = RadiansPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-pipes.umd.js.map