/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
export class TimeAgoPipe {
    /**
     * @param {?} inputDate
     * @return {?}
     */
    transform(inputDate) {
        if (!inputDate || (!inputDate.getTime && !inputDate.toDate)) {
            return 'Invalid date';
        }
        /** @type {?} */
        const past = inputDate.toDate ? inputDate.toDate() : inputDate.getTime();
        /** @type {?} */
        const now = +new Date();
        if (past > now) {
            return 'in the future';
        }
        for (let i = 0, l = TimeAgoPipe.MAPPER.length, ms = now - past, div = TimeAgoPipe.YEAR_MS; i < l; ++i) {
            /** @type {?} */
            const elm = TimeAgoPipe.MAPPER[i];
            /** @type {?} */
            const unit = Math.floor(ms / (div /= elm.div));
            if (unit >= 1) {
                return unit === 1 ? elm.single : `${unit} ${elm.many} ago`;
            }
        }
        return 'just now';
    }
}
TimeAgoPipe.YEAR_MS = 1000 * 60 * 60 * 24 * 7 * 4 * 12;
TimeAgoPipe.MAPPER = [
    { single: 'last year', many: 'years', div: 1 },
    { single: 'last month', many: 'months', div: 12 },
    { single: 'last week', many: 'weeks', div: 4 },
    { single: 'yesterday', many: 'days', div: 7 },
    { single: 'an hour ago', many: 'hours', div: 24 },
    { single: 'just now', many: 'minutes', div: 60 },
];
TimeAgoPipe.decorators = [
    { type: Pipe, args: [{ name: 'timeAgo' },] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TimeAgoPipe.YEAR_MS;
    /**
     * @type {?}
     * @private
     */
    TimeAgoPipe.MAPPER;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvZGF0ZS90aW1lLWFnby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFHcEQsTUFBTSxPQUFPLFdBQVc7Ozs7O0lBZWYsU0FBUyxDQUFDLFNBQWM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzRCxPQUFPLGNBQWMsQ0FBQztTQUN2Qjs7Y0FFSyxJQUFJLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFOztjQUNsRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRTtRQUV2QixJQUFJLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDZCxPQUFPLGVBQWUsQ0FBQztTQUN4QjtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFOztrQkFDL0YsR0FBRyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOztrQkFDM0IsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUU5QyxJQUFJLElBQUksSUFBSSxDQUFDLEVBQUU7Z0JBQ2IsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUM7YUFDNUQ7U0FDRjtRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7O0FBcENjLG1CQUFPLEdBQVcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ25ELGtCQUFNLEdBQVE7SUFDM0IsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtJQUM5QyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFO0lBQ2pELEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUU7SUFDOUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtJQUM3QyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFO0lBQ2pELEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUU7Q0FDakQsQ0FBQzs7WUFWSCxJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFOzs7Ozs7O0lBRXZCLG9CQUFrRTs7Ozs7SUFDbEUsbUJBT0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBQaXBlKHsgbmFtZTogJ3RpbWVBZ28nIH0pXG5leHBvcnQgY2xhc3MgVGltZUFnb1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgcHJpdmF0ZSBzdGF0aWMgWUVBUl9NUzogbnVtYmVyID0gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcgKiA0ICogMTI7XG4gIHByaXZhdGUgc3RhdGljIE1BUFBFUjogYW55ID0gW1xuICAgIHsgc2luZ2xlOiAnbGFzdCB5ZWFyJywgbWFueTogJ3llYXJzJywgZGl2OiAxIH0sXG4gICAgeyBzaW5nbGU6ICdsYXN0IG1vbnRoJywgbWFueTogJ21vbnRocycsIGRpdjogMTIgfSxcbiAgICB7IHNpbmdsZTogJ2xhc3Qgd2VlaycsIG1hbnk6ICd3ZWVrcycsIGRpdjogNCB9LFxuICAgIHsgc2luZ2xlOiAneWVzdGVyZGF5JywgbWFueTogJ2RheXMnLCBkaXY6IDcgfSxcbiAgICB7IHNpbmdsZTogJ2FuIGhvdXIgYWdvJywgbWFueTogJ2hvdXJzJywgZGl2OiAyNCB9LFxuICAgIHsgc2luZ2xlOiAnanVzdCBub3cnLCBtYW55OiAnbWludXRlcycsIGRpdjogNjAgfSxcbiAgXTtcblxuICAvKipcbiAgICogQHBhcmFtIGlucHV0RGF0ZTogRGF0ZSB8IE1vbWVudCAtIG5vdCBpbmNsdWRlZCBhcyBUeXBlU2NyaXB0IGludGVyZmFjZSxcbiAgICogaW4gb3JkZXIgdG8ga2VlcCBgbmd4LXBpcGVzYCBcInB1cmVcIiBmcm9tIGRlcGVuZGVuY2llcyFcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm0oaW5wdXREYXRlOiBhbnkpOiBzdHJpbmcge1xuICAgIGlmICghaW5wdXREYXRlIHx8ICghaW5wdXREYXRlLmdldFRpbWUgJiYgIWlucHV0RGF0ZS50b0RhdGUpKSB7XG4gICAgICByZXR1cm4gJ0ludmFsaWQgZGF0ZSc7XG4gICAgfVxuXG4gICAgY29uc3QgcGFzdCA9IGlucHV0RGF0ZS50b0RhdGUgPyBpbnB1dERhdGUudG9EYXRlKCkgOiBpbnB1dERhdGUuZ2V0VGltZSgpO1xuICAgIGNvbnN0IG5vdyA9ICtuZXcgRGF0ZSgpO1xuXG4gICAgaWYgKHBhc3QgPiBub3cpIHtcbiAgICAgIHJldHVybiAnaW4gdGhlIGZ1dHVyZSc7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBUaW1lQWdvUGlwZS5NQVBQRVIubGVuZ3RoLCBtcyA9IG5vdyAtIHBhc3QsIGRpdiA9IFRpbWVBZ29QaXBlLllFQVJfTVM7IGkgPCBsOyArK2kpIHtcbiAgICAgIGNvbnN0IGVsbSA9IFRpbWVBZ29QaXBlLk1BUFBFUltpXTtcbiAgICAgIGNvbnN0IHVuaXQgPSBNYXRoLmZsb29yKG1zIC8gKGRpdiAvPSBlbG0uZGl2KSk7XG5cbiAgICAgIGlmICh1bml0ID49IDEpIHtcbiAgICAgICAgcmV0dXJuIHVuaXQgPT09IDEgPyBlbG0uc2luZ2xlIDogYCR7dW5pdH0gJHtlbG0ubWFueX0gYWdvYDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJ2p1c3Qgbm93JztcbiAgfVxufVxuIl19