/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, extractDeepPropertyByParentMapKey, isBoolean, isNumberFinite, isString, isUndefined, } from '../helpers/helpers';
// tslint:disable no-bitwise
export class FilterByPipe {
    /**
     * @param {?} input
     * @param {?} props
     * @param {?=} search
     * @param {?=} strict
     * @return {?}
     */
    transform(input, props, search = '', strict = false) {
        if (!Array.isArray(input) ||
            (!Array.isArray(search) && !isString(search) && !isNumberFinite(search) && !isBoolean(search))) {
            return input;
        }
        /** @type {?} */
        const terms = String(search)
            .toLowerCase()
            .split(',');
        return input.filter((/**
         * @param {?} obj
         * @return {?}
         */
        obj => {
            return props.some((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                return terms.some((/**
                 * @param {?} term
                 * @return {?}
                 */
                term => {
                    /** @type {?} */
                    const value = extractDeepPropertyByMapKey(obj, prop);
                    /* tslint:disable */
                    const { props, tail } = extractDeepPropertyByParentMapKey(obj, prop);
                    if (isUndefined(value) && !isUndefined(props) && Array.isArray(props)) {
                        return props.some((/**
                         * @param {?} parent
                         * @return {?}
                         */
                        parent => {
                            /** @type {?} */
                            const str = String(parent[tail]).toLowerCase();
                            return strict ? str === term : !!~str.indexOf(term);
                        }));
                    }
                    if (isUndefined(value)) {
                        return false;
                    }
                    /** @type {?} */
                    const strValue = String(value).toLowerCase();
                    return strict ? term === strValue : !!~strValue.indexOf(term);
                }));
            }));
        }));
    }
}
FilterByPipe.decorators = [
    { type: Pipe, args: [{ name: 'filterBy' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXBpcGVzLyIsInNvdXJjZXMiOlsic3JjL3BpcGVzL2FycmF5L2ZpbHRlci1ieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUNMLDJCQUEyQixFQUMzQixpQ0FBaUMsRUFDakMsU0FBUyxFQUNULGNBQWMsRUFDZCxRQUFRLEVBQ1IsV0FBVyxHQUNaLE1BQU0sb0JBQW9CLENBQUM7O0FBSTVCLE1BQU0sT0FBTyxZQUFZOzs7Ozs7OztJQUd2QixTQUFTLENBQUMsS0FBVSxFQUFFLEtBQW9CLEVBQUUsU0FBYyxFQUFFLEVBQUUsU0FBa0IsS0FBSztRQUNuRixJQUNFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDckIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDOUY7WUFDQSxPQUFPLEtBQUssQ0FBQztTQUNkOztjQUVLLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO2FBQ3pCLFdBQVcsRUFBRTthQUNiLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFFYixPQUFPLEtBQUssQ0FBQyxNQUFNOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxLQUFLLENBQUMsSUFBSTs7OztZQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN2QixPQUFPLEtBQUssQ0FBQyxJQUFJOzs7O2dCQUFDLElBQUksQ0FBQyxFQUFFOzswQkFDakIsS0FBSyxHQUFHLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUM7OzBCQUU5QyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxpQ0FBaUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDO29CQUVwRSxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO3dCQUNyRSxPQUFPLEtBQUssQ0FBQyxJQUFJOzs7O3dCQUFDLE1BQU0sQ0FBQyxFQUFFOztrQ0FDbkIsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUU7NEJBRTlDLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUN0RCxDQUFDLEVBQUMsQ0FBQztxQkFDSjtvQkFFRCxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTt3QkFDdEIsT0FBTyxLQUFLLENBQUM7cUJBQ2Q7OzBCQUVLLFFBQVEsR0FBVyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFO29CQUVwRCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDaEUsQ0FBQyxFQUFDLENBQUM7WUFDTCxDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBekNGLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXksXG4gIGV4dHJhY3REZWVwUHJvcGVydHlCeVBhcmVudE1hcEtleSxcbiAgaXNCb29sZWFuLFxuICBpc051bWJlckZpbml0ZSxcbiAgaXNTdHJpbmcsXG4gIGlzVW5kZWZpbmVkLFxufSBmcm9tICcuLi9oZWxwZXJzL2hlbHBlcnMnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZSBuby1iaXR3aXNlXG5AUGlwZSh7IG5hbWU6ICdmaWx0ZXJCeScgfSlcbmV4cG9ydCBjbGFzcyBGaWx0ZXJCeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnlbXSwgcHJvcHM6IEFycmF5PHN0cmluZz4sIHNlYXJjaD86IGFueSwgc3RyaWN0PzogYm9vbGVhbik6IGFueVtdO1xuICB0cmFuc2Zvcm08VD4oaW5wdXQ6IFQsIHByb3BzOiBBcnJheTxzdHJpbmc+LCBzZWFyY2g/OiBhbnksIHN0cmljdD86IGJvb2xlYW4pOiBUO1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgcHJvcHM6IEFycmF5PHN0cmluZz4sIHNlYXJjaDogYW55ID0gJycsIHN0cmljdDogYm9vbGVhbiA9IGZhbHNlKTogYW55IHtcbiAgICBpZiAoXG4gICAgICAhQXJyYXkuaXNBcnJheShpbnB1dCkgfHxcbiAgICAgICghQXJyYXkuaXNBcnJheShzZWFyY2gpICYmICFpc1N0cmluZyhzZWFyY2gpICYmICFpc051bWJlckZpbml0ZShzZWFyY2gpICYmICFpc0Jvb2xlYW4oc2VhcmNoKSlcbiAgICApIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBjb25zdCB0ZXJtcyA9IFN0cmluZyhzZWFyY2gpXG4gICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgLnNwbGl0KCcsJyk7XG5cbiAgICByZXR1cm4gaW5wdXQuZmlsdGVyKG9iaiA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuc29tZShwcm9wID0+IHtcbiAgICAgICAgcmV0dXJuIHRlcm1zLnNvbWUodGVybSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkob2JqLCBwcm9wKTtcbiAgICAgICAgICAvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuICAgICAgICAgIGNvbnN0IHsgcHJvcHMsIHRhaWwgfSA9IGV4dHJhY3REZWVwUHJvcGVydHlCeVBhcmVudE1hcEtleShvYmosIHByb3ApO1xuXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSAmJiAhaXNVbmRlZmluZWQocHJvcHMpICYmIEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcHMuc29tZShwYXJlbnQgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzdHIgPSBTdHJpbmcocGFyZW50W3RhaWxdKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgIHJldHVybiBzdHJpY3QgPyBzdHIgPT09IHRlcm0gOiAhIX5zdHIuaW5kZXhPZih0ZXJtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBzdHJWYWx1ZTogc3RyaW5nID0gU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgcmV0dXJuIHN0cmljdCA/IHRlcm0gPT09IHN0clZhbHVlIDogISF+c3RyVmFsdWUuaW5kZXhPZih0ZXJtKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19