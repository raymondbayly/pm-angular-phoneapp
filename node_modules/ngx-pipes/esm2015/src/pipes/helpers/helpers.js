/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
export function isUndefined(value) {
    return typeof value === 'undefined';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isString(value) {
    return typeof value === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isBoolean(value) {
    return typeof value === 'boolean';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isObject(value) {
    return value !== null && typeof value === 'object';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
/**
 * @param {?} letter
 * @return {?}
 */
export function isVowel(letter) {
    /** @type {?} */
    const vowels = ['a', 'e', 'i', 'o', 'u'];
    return vowels.indexOf(letter) !== -1;
}
/**
 * @param {?} text
 * @return {?}
 */
export function ucFirst(text) {
    const [part, ...split] = text.split(/\s/g);
    /** @type {?} */
    const ucd = part
        .toLowerCase()
        .split(/(?=['|-])/g)
        .map((/**
     * @param {?} word
     * @return {?}
     */
    (word) => word.indexOf('-') + word.indexOf("'") > -2
        ? word.slice(0, 2).toUpperCase() + word.slice(2)
        : word.slice(0, 1).toUpperCase() + word.slice(1)))
        .join('');
    return [ucd, ...split].join(' ');
}
/**
 * @param {?} num
 * @param {?} precision
 * @return {?}
 */
export function applyPrecision(num, precision) {
    if (precision <= 0) {
        return Math.round(num);
    }
    /** @type {?} */
    const tho = Math.pow(10, precision);
    return Math.round(num * tho) / tho;
}
/**
 * @param {?} obj
 * @param {?} map
 * @return {?}
 */
export function extractDeepPropertyByMapKey(obj, map) {
    /** @type {?} */
    const keys = map.split('.');
    /** @type {?} */
    const head = keys.shift();
    return keys.reduce((/**
     * @param {?} prop
     * @param {?} key
     * @return {?}
     */
    (prop, key) => {
        return !isUndefined(prop) && !isUndefined(prop[key]) ? prop[key] : undefined;
    }), obj[head || '']);
}
/**
 * @param {?} obj
 * @param {?} map
 * @return {?}
 */
export function extractDeepPropertyByParentMapKey(obj, map) {
    /** @type {?} */
    const keys = map.split('.');
    /** @type {?} */
    const tail = keys.pop();
    /** @type {?} */
    const props = extractDeepPropertyByMapKey(obj, keys.join('.'));
    return { props, tail };
}
/**
 * @param {?} obj
 * @param {?} other
 * @return {?}
 */
export function getKeysTwoObjects(obj, other) {
    return [...Object.keys(obj), ...Object.keys(other)].filter((/**
     * @param {?} key
     * @param {?} index
     * @param {?} array
     * @return {?}
     */
    (key, index, array) => array.indexOf(key) === index));
}
/**
 * @param {?} obj
 * @param {?} other
 * @return {?}
 */
export function isDeepEqual(obj, other) {
    if (!isObject(obj) || !isObject(other)) {
        return obj === other;
    }
    return getKeysTwoObjects(obj, other).every((/**
     * @param {?} key
     * @return {?}
     */
    (key) => {
        if (!isObject(obj[key]) && !isObject(other[key])) {
            return obj[key] === other[key];
        }
        if (!isObject(obj[key]) || !isObject(other[key])) {
            return false;
        }
        return isDeepEqual(obj[key], other[key]);
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1waXBlcy8iLCJzb3VyY2VzIjpbInNyYy9waXBlcy9oZWxwZXJzL2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQVU7SUFDcEMsT0FBTyxPQUFPLEtBQUssS0FBSyxXQUFXLENBQUM7QUFDdEMsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLEtBQVU7SUFDbkMsT0FBTyxPQUFPLEtBQUssS0FBSyxVQUFVLENBQUM7QUFDckMsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQVU7SUFDakMsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUFDbkMsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQVU7SUFDakMsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUFDbkMsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEtBQVU7SUFDbEMsT0FBTyxPQUFPLEtBQUssS0FBSyxTQUFTLENBQUM7QUFDcEMsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQVU7SUFDakMsT0FBTyxLQUFLLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztBQUNyRCxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsS0FBVTtJQUN2QyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUMsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFDLE1BQWM7O1VBQzlCLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFFeEMsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENB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Q0FBQztBQUNsSCxDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEdBQVEsRUFBRSxLQUFVO0lBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdEMsT0FBTyxHQUFHLEtBQUssS0FBSyxDQUFDO0tBQ3RCO0lBRUQsT0FBTyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSzs7OztJQUN4QyxDQUFDLEdBQVEsRUFBVyxFQUFFO1FBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDaEQsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNoRCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUMsRUFDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWU6IGFueSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlckZpbml0ZSh2YWx1ZTogYW55KSB7XG4gIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgaXNGaW5pdGUodmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWb3dlbChsZXR0ZXI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCB2b3dlbHMgPSBbJ2EnLCAnZScsICdpJywgJ28nLCAndSddO1xuXG4gIHJldHVybiB2b3dlbHMuaW5kZXhPZihsZXR0ZXIpICE9PSAtMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVjRmlyc3QodGV4dDogc3RyaW5nKSB7XG4gIGNvbnN0IFtwYXJ0LCAuLi5zcGxpdF0gPSB0ZXh0LnNwbGl0KC9cXHMvZyk7XG5cbiAgY29uc3QgdWNkID0gcGFydFxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnNwbGl0KC8oPz1bJ3wtXSkvZylcbiAgICAubWFwKFxuICAgICAgKHdvcmQ6IGFueSkgPT5cbiAgICAgICAgd29yZC5pbmRleE9mKCctJykgKyB3b3JkLmluZGV4T2YoXCInXCIpID4gLTJcbiAgICAgICAgICA/IHdvcmQuc2xpY2UoMCwgMikudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMilcbiAgICAgICAgICA6IHdvcmQuc2xpY2UoMCwgMSkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSlcbiAgICApXG4gICAgLmpvaW4oJycpO1xuXG4gIHJldHVybiBbdWNkLCAuLi5zcGxpdF0uam9pbignICcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlQcmVjaXNpb24obnVtOiBudW1iZXIsIHByZWNpc2lvbjogbnVtYmVyKSB7XG4gIGlmIChwcmVjaXNpb24gPD0gMCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG51bSk7XG4gIH1cblxuICBjb25zdCB0aG8gPSAxMCAqKiBwcmVjaXNpb247XG5cbiAgcmV0dXJuIE1hdGgucm91bmQobnVtICogdGhvKSAvIHRobztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShvYmo6IGFueSwgbWFwOiBzdHJpbmcpOiBhbnkge1xuICBjb25zdCBrZXlzID0gbWFwLnNwbGl0KCcuJyk7XG4gIGNvbnN0IGhlYWQgPSBrZXlzLnNoaWZ0KCk7XG5cbiAgcmV0dXJuIGtleXMucmVkdWNlKChwcm9wOiBhbnksIGtleTogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuICFpc1VuZGVmaW5lZChwcm9wKSAmJiAhaXNVbmRlZmluZWQocHJvcFtrZXldKSA/IHByb3Bba2V5XSA6IHVuZGVmaW5lZDtcbiAgfSwgb2JqW2hlYWQgfHwgJyddKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3REZWVwUHJvcGVydHlCeVBhcmVudE1hcEtleShvYmo6IGFueSwgbWFwOiBzdHJpbmcpOiBhbnkge1xuICBjb25zdCBrZXlzID0gbWFwLnNwbGl0KCcuJyk7XG4gIGNvbnN0IHRhaWwgPSBrZXlzLnBvcCgpO1xuICBjb25zdCBwcm9wcyA9IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShvYmosIGtleXMuam9pbignLicpKTtcblxuICByZXR1cm4geyBwcm9wcywgdGFpbCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5c1R3b09iamVjdHMob2JqOiBhbnksIG90aGVyOiBhbnkpOiBhbnkge1xuICByZXR1cm4gWy4uLk9iamVjdC5rZXlzKG9iaiksIC4uLk9iamVjdC5rZXlzKG90aGVyKV0uZmlsdGVyKChrZXksIGluZGV4LCBhcnJheSkgPT4gYXJyYXkuaW5kZXhPZihrZXkpID09PSBpbmRleCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZXBFcXVhbChvYmo6IGFueSwgb3RoZXI6IGFueSk6IGFueSB7XG4gIGlmICghaXNPYmplY3Qob2JqKSB8fCAhaXNPYmplY3Qob3RoZXIpKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gb3RoZXI7XG4gIH1cblxuICByZXR1cm4gZ2V0S2V5c1R3b09iamVjdHMob2JqLCBvdGhlcikuZXZlcnkoXG4gICAgKGtleTogYW55KTogYm9vbGVhbiA9PiB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9ialtrZXldKSAmJiAhaXNPYmplY3Qob3RoZXJba2V5XSkpIHtcbiAgICAgICAgcmV0dXJuIG9ialtrZXldID09PSBvdGhlcltrZXldO1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdChvYmpba2V5XSkgfHwgIWlzT2JqZWN0KG90aGVyW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzRGVlcEVxdWFsKG9ialtrZXldLCBvdGhlcltrZXldKTtcbiAgICB9XG4gICk7XG59XG4iXX0=