/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} rect
 * @param {?} options
 * @return {?}
 */
export function calcMeasure(rect, options) {
    const /** @type {?} */ numPossibleRows = Math.ceil(rect.height / options.itemHeight);
    const /** @type {?} */ numPossibleColumns = options.itemWidth !== undefined ? Math.floor(rect.width / options.itemWidth) : 0;
    return {
        containerHeight: rect.height,
        containerWidth: rect.width,
        itemHeight: options.itemHeight,
        itemWidth: options.itemWidth,
        numPossibleColumns,
        numPossibleItems: numPossibleRows * numPossibleColumns,
        numPossibleRows,
    };
}
const /** @type {?} */ clamp = (min, max, value) => Math.min(max, Math.max(min, value));
const ɵ0 = clamp;
/**
 * @param {?} scrollTop
 * @param {?} measure
 * @param {?} numItems
 * @param {?} dataTimestamp
 * @param {?} options
 * @return {?}
 */
export function calcScrollWindow(scrollTop, measure, numItems, dataTimestamp, options) {
    const /** @type {?} */ numVirtualItems = numItems;
    const /** @type {?} */ requestedColumns = options.numLimitColumns !== undefined ? options.numLimitColumns : measure.numPossibleColumns;
    const /** @type {?} */ numActualColumns = Math.min(numVirtualItems, requestedColumns);
    const /** @type {?} */ numVirtualRows = Math.ceil(numVirtualItems / Math.max(1, numActualColumns));
    const /** @type {?} */ virtualHeight = numVirtualRows * measure.itemHeight;
    const /** @type {?} */ numAdditionalRows = options.numAdditionalRows !== undefined ? options.numAdditionalRows : 1;
    const /** @type {?} */ requestedRows = measure.numPossibleRows + numAdditionalRows;
    const /** @type {?} */ numActualRows = numActualColumns > 0 ? Math.min(requestedRows, numVirtualRows) : 0;
    const /** @type {?} */ actualHeight = numActualRows * measure.itemHeight;
    const /** @type {?} */ visibleEndRow = numActualColumns > 0 && numActualRows > 0 ? clamp(0, numVirtualRows - 1, Math.floor((scrollTop + actualHeight) / measure.itemHeight) - 1) : -1;
    return {
        actualHeight,
        containerHeight: measure.containerHeight,
        containerWidth: measure.containerWidth,
        dataTimestamp,
        itemHeight: measure.itemHeight,
        itemWidth: measure.itemWidth,
        numActualColumns,
        numActualItems: Math.min(numActualRows * numActualColumns, numVirtualItems),
        numActualRows,
        numAdditionalRows,
        numVirtualItems,
        numVirtualRows,
        scrollPercentage: clamp(0, 100, scrollTop / (virtualHeight - measure.containerHeight)),
        scrollTop,
        virtualHeight,
        visibleEndRow,
        visibleStartRow: visibleEndRow !== -1 ? Math.max(0, visibleEndRow - numActualRows + 1) : -1
    };
}
/**
 * @param {?} scrollWin
 * @return {?}
 */
export function getMaxIndex(scrollWin) {
    return scrollWin.visibleEndRow * scrollWin.numActualColumns + scrollWin.numActualColumns - 1;
}
export { ɵ0 };
//# sourceMappingURL=measurement.js.map